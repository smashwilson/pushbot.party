type Query {
  # Profile for the currently logged-in user.
  me: User! @deprecated(reason: "Use users {me} instead")

  # Query known users.
  users: UserSet!

  # Currently available DocumentSets. These strings are valid arguments for
  # `#documents(set)`.
  documentSets: [String!]!

  # Query documents within a named DocumentSet.
  documents(set: String!): DocumentSet

  # Access the Cache of recent Lines seen by the bot.
  cache: Cache!

  # Go digging around in pushbot's gooey grey matter. Admin-only.
  brain: Brain!

  # Free-for-all key-value store.
  rem: Rem!

  # URL at which your personal iCal feed is found.
  calendarURL: String!
}

type Mutation {
  # Create a new Document within a DocumentSet. Requires a user role specified by the named DocumentSet, like
  # "quote pontiff" for the "quotes" set.
  createDocument(set: String!, channel: String!, lines: [ID!]!): Document!

  # Modify a value within the robot's internal storage. Very dangerous. And yes, this accepts a JSON-encoded
  # string as an argument: don't @ me.
  setBrainKey(name: String!, property: [String!] = [], value: String!): Entry!
}

# Metadata about the current page of results and its relationship with the full
# result set.
type PageInfo {
  # The total number of results that were matched by the Criteria constraints
  # across all possible pages.
  count: Int!

  # True if there is a page of results before this one.
  hasPreviousPage: Boolean!

  # True if there is a page of results after this one.
  hasNextPage: Boolean!

  # Cursor of the first result from this page.
  startCursor: String!

  # Cursor of the final result from this page.
  endCursor: String!
}

# Common search result sort order values.
enum SortDirection {
  # Oldest to newest, lowest to highest, ...
  ASCENDING

  # Newest to oldest, highest to lowest, ...
  DESCENDING
}

type UserSet {
  # Profile for the currently logged-in User.
  me: User!

  # Array of all known Users.
  all: [User!]!

  # User with a specific name if they exist.
  withName(name: String!): User
}

# A single user in the Slack team.
type User {
  # Unique identifier assigned by Slack.
  id: ID!

  # Username.
  name: String!

  # First and last name.
  realName: String

  # Current timezone, as configured through Slack preferences.
  timezone: String

  # URLs of the user's avatar in various dimensions.
  avatar: Avatar!

  # Most recently set status.
  status: Status!

  # Slack's best guess about whether or not this User is looking at chat.
  presence: Presence!

  # Permissions granted to this user. Used to control permitted chat actions
  # and web actions.
  roles: [Role!]!

  # Return the reaction emoji most frequently given to messages that this user posts.
  topReactionsGiven(limit: Int = 10): [EmojiCount!]!

  # Return the reaction emoji that this user most frequently gives to others.
  topReactionsReceived(limit: Int = 10): [EmojiCount!]!

  # A token that may be used to make authenticated requests against the az-coordinator server. Only present if this
  # user is the logged-in user and is an administrator.
  coordinatorToken: String
}

# Graphic this user has chosen to represent themselves.
type Avatar {
  image24: String
  image32: String
  image48: String
  image72: String
  image192: String
  image512: String
  image1024: String
  imageOriginal: String
}

# Most recently reported /status.
type Status {
  message: String
  emoji: String
}

# A Slack emoji
type Emoji {
  # Name used to type this emoji in Slack
  name: String!

  # The URL of a custom emoji
  url: String
}

type EmojiCount {
  # Number of times this emoji has been given or received
  count: Int!

  # The emoji
  emoji: Emoji!
}

# Slack's best guess about whether or not this user is looking at the channel
# or not.
enum Presence {
  UNKNOWN
  ACTIVE
  AWAY
}

# Permission that may be assigned to a User.
type Role {
  name: String!
}

# Collection of Documents that may be queried in a variety of ways. "Documents"
# include everything from the quote file to limericks to user titles.
type DocumentSet {
  # Internal name of this DocumentSet. Use with #documents().
  name: String!

  # Produce a random Document from the set that matches the specified search
  # criteria. A null document will be returned if no matches exist. Use
  # empty Criteria (`random(criteria: {})`) to choose randomly from all
  # Documents.
  random(criteria: Criteria!): Document!

  # Paginated view of all Documents matching specified Criteria.
  # Supply the "cursor" of the final DocumentEdge in one page as the "after"
  # parameter to the next query to retrieve the next page of results.
  all(criteria: Criteria!, first: Int, after: String): DocumentConnection!

  # A random Document with a "subject" of the currently authenticated User.
  mine: Document!

  # Order all speakers associated with documents in this set and return the
  # ordinal rank of a chosen speaker.
  rank(speaker: String!): Int!

  # The number of Documents in the DocumentSet that match specific search
  # criteria. Use empty Criteria (`count(criteria: {})`) to count all documents.
  count(criteria: Criteria!): Int!
}

# Paginated collection of Documents. As specified by:
# https://facebook.github.io/relay/graphql/connections.htm
type DocumentConnection {
  # Containers for the results on this page.
  edges: [DocumentEdge!]!

  # Paging support information.
  pageInfo: PageInfo!
}

# Paginated Document result. As specified by:
# https://facebook.github.io/relay/graphql/connections.htm
type DocumentEdge {
  # Opaque identifier used for paging. Supply the "cursor" of the final result
  # in one page as the "after" parameter to the next query to retrieve the
  # next page of results.
  cursor: String!

  # A single matching Document.
  node: Document!
}

# Single entry retrieved from a DocumentSet. A single quote, limerick, title,
# soultrait, motto, whatever.
type Document {
  # Unique identifier for this Document within its DocumentSet. Absent if
  # "found" is false.
  id: ID

  # False if this Document is a null document, returned when no documents match
  # search criteria.
  found: Boolean!

  # Body of the Document.
  text: String!

  # Name of a user associated with a Document in a user-focused DocumentSet, like
  # a motto or title.
  subject: String

  # Names of Users who have a speaking role in this Document.
  speakers: [String!]!

  # Names of Users who are mentioned by this Document.
  mentions: [String!]!
}

# Line of spoken text within a Cache collected by the bot from one of the channels the bot belongs to. Messages
# that contain newlines are split into multiple Lines.
type Line {
  # Unique, stable identifier for this specific row.
  id: ID

  # Username of the Slack User who spoke this line.
  speaker: User

  # Timestamp at which this Line was spoken, expressed as milliseconds since the epoch. Encoded as a String because
  # GraphQL Ints are limited to 32 bits.
  timestamp: String!

  # Actual, unformatted text.
  text: String!
}

# Query recently seen text.
type Cache {
  # Enumerate the channels that the bot has data from.
  knownChannels: [String!]!

  # Access the stored data collected from a named channel. Returns null if no such channel is known.
  linesForChannel(channel: String!): [Line!]
}

# Single JavaScript object stored within the Brain.
type Entry {
  # Enumerate child properties. Admin-only.
  children(limit: Int = 100, prefix: String = ""): [String!]!

  # Inspect the entry with `util.inspect`. Admin-only.
  inspect(depth: Int = 2): String!

  # Render the entry as JSON if possible. Admin-only.
  json(pretty: Boolean = false): String!
}

# Internal bot storage.
type Brain {
  # Enumerate top-level storage keys. Admin-only.
  keys(limit: Int = 100, prefix: String = ""): [String!]!

  # Access a top-level storage value at a named key. Optionally, descend into the object tree
  # by following named properties. Admin-only.
  key(name: String!, property: [String!] = []): Entry!
}

enum RemOrderField {
  KEY
  RANDOM
}

# Free-for-all key-value store
type Rem {
  # Choose a specific key by exact, case-sensitive match. Return `null` if it does not exist.
  get(key: String!): Memory

  # Paginated, ordered search over all stored Memories.
  search(
    query: String
    first: Int
    after: String
    orderField: RemOrderField = KEY
    orderDirection: SortDirection = ASCENDING
  ): MemoryConnection!
}

# Paginated collection of Memories within Rem. As specified by:
# https://facebook.github.io/relay/graphql/connections.htm
type MemoryConnection {
  # Paging support information.
  pageInfo: PageInfo!

  # Containers for results on the current page.
  edges: [MemoryEdge!]!
}

# Paginated Memory result within Rem. As specified by:
# https://facebook.github.io/relay/graphql/connections.htm
type MemoryEdge {
  # Opaque identifier used for paging. Supply the "cursor" of the final result
  # in one page as the "after" parameter to the next query to retrieve the
  # next page of results.
  cursor: String!

  # Single matching Memory.
  node: Memory!
}

# Key-value pair stored by any User.
type Memory {
  # The full, exact key used to identify this Memory.
  key: String!

  # This Memory's value.
  value: String!
}

# Constraints on the Documents to be included in a query, count, or random
# selection.
input Criteria {
  # Whitespace-delimited text terms that must all be present in the Document's
  # body. Use 'single quotes' or "double quotes" to include multi-word terms.
  query: String

  # A one-to-one mapping that exists between some DocumentSets and Users to
  # "attach" each Document to a specific User. For example, a User's motto.
  subject: String

  # If listed, all named Users must have a speaking role in the Document. The
  # meaning of "speaking" varies from DocumentSet to DocumentSet.
  speakers: [String!]

  # If listed, all named Users must be mentioned in the Document. The meaning of
  # a "mention" varies from DocumentSet to DocumentSet.
  mentions: [String!]
}
