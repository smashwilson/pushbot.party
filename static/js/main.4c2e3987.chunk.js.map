{"version":3,"sources":["__generated__/PeopleQuery.graphql.ts","__generated__/ProfileQuery.graphql.ts","__generated__/QuotesPageQuery.graphql.ts","__generated__/QuotesRandomQuery.graphql.ts","__generated__/EventsQuery.graphql.ts","__generated__/RecentSubmitMutation.graphql.ts","__generated__/RecentChannelQuery.graphql.ts","__generated__/RecentHistoryQuery.graphql.ts","__generated__/AppQuery.graphql.ts","Transport.ts","SideNav.tsx","Dashboard.tsx","People.tsx","Chart.tsx","Profile.tsx","Quotes.tsx","Events.tsx","Role.tsx","Recent.tsx","Authenticated.tsx","Banner.tsx","Login.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["__webpack_require__","r","__webpack_exports__","node","v0","kind","alias","name","args","storageKey","v1","v2","concreteType","plural","selections","v3","v4","value","v5","v6","v7","v8","fragment","type","metadata","argumentDefinitions","operation","params","operationKind","id","text","hash","defaultValue","variableName","v9","v10","v11","API_URL","concat","process","REACT_APP_API_BASE_URL","AUTH_URL","REACT_APP_API_AUTH_TYPE","NETWORK_ERROR_MARKER","Symbol","createNetworkError","_callee","message","response","err","regenerator_default","a","wrap","_context","prev","next","Error","status","sent","marker","abrupt","stop","_callee2","request","variables","_context2","fetch","method","headers","content-type","credentials","body","JSON","stringify","query","ok","json","source","RecordSource","network","Network","create","getEnvironment","store","Store","Environment","Pill","props","react_default","createElement","react_router","path","to","exact","children","rp","klass","match","role","className","react_router_dom","SideNav","SideNav_Pill","Dashboard","Person","_props$user","user","presence","avatar","avatarURL","image48","presenceIcon","src","alt","aria-hidden","title","People","_Component","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","environment","inherits","createClass","key","_graphql","react_relay","render","renderResult","_ref","error","collateUsers","map","_ref2","People_Person","titles","titlesByUsername","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","all","edges","iterator","done","subject","return","userData","users","sort","b","localeCompare","Component","Chartist","plugins","ctHtmlLabels","chart","on","context","element","empty","_node","innerHTML","Chart","_getPrototypeOf2","_len","arguments","length","Array","_key","apply","refElement","_this2","ref","c","options","Bar","data","detach","Profile","emoji","current","image192","renderReactionsReceivedChart","renderReactionsGivenChart","renderTitles","renderQuoteRank","EmojiConverter","img_sets","apple","sheet","use_sheet","include_title","Profile_graphql","username","titleCriteria","renderReactionChart","topReactionsGiven","topReactionsReceived","results","labels","each","url","replace_colons","series","count","Chart_Chart","low","axisY","onlyInteger","_this3","t","titleFrom","quotes","rank","test","CONTAINING","when","cases","containing","default","label","BY","by","ABOUT","about","modes","Quote","QuotePage","lastTotal","lastResults","renderDocuments","documents","pageInfo","Quotes_graphql","criteria","mode","speakers","people","mentions","total","document","Quotes_Quote","more","RandomQuote","lastQuote","quoteText","random","onClick","another","setState","state","_graphql2","Quotes","_Component3","_this4","didChangeMode","event","find","target","writeSearch","didChangeQuery","didChangePeople","URLSearchParams","window","location","search","has","get","changes","previous","readSearch","assign","set","nextSearch","toString","nextURL","protocol","host","pathname","history","replaceState","href","forceUpdate","showPeople","onChange","index","placeholder","split","person","replace","trim","filter","Quotes_RandomQuote","Quotes_QuotePage","FeedForm","copied","btnClass","btnMessage","feedURL","readOnly","lib_default","onCopy","disabled","ready","Events","_Component2","result","renderResultBody","Events_graphql","Boolean","calendarURL","Events_FeedForm","rel","UserContext","React","createContext","Role","useContext","roles","some","ALL","Selection","isSelecting","ids","subs","Set","cb","push","dispose","indexOf","splice","payload","sub","line","wasSelected","add","didChange","delete","clear","from","size","Line","didMouseDown","button","preventDefault","selection","toggle","startSelecting","didMouseMove","select","onDidChange","_this$props","ts","moment","parseInt","timestamp","sameSpeaker","speaker","lineClasses","isSelected","speakerBanner","image32","join","onMouseDown","onMouseMove","format","History","bottom","didMouseUp","stopSelecting","didMouseOut","addEventListener","scrollIntoView","removeEventListener","lines","renderLoading","renderLines","_this5","onMouseOut","i","Recent_Line","ActionBar","_this6","didSubmitQuote","didSubmitLim","didClear","submit","bind","assertThisInitialized","_this7","textClassNames","clearBtn","disable","isEmpty","describe","Role_Role","_this8","channel","mutation","Recent_graphql","getLineIDs","commitMutation","onCompleted","Recent","_Component4","_this9","knownChannels","renderChannelResult","renderError","channelNames","cache","renderCurrent","renderHistoryResult","linesForChannel","didChangeChannel","currentChannel","refresh","renderChannelQuery","renderHistoryQuery","Recent_graphql2","_graphql3","_this10","setTimeout","displayChannelNames","displayChannel","htmlFor","Recent_History","Recent_ActionBar","Authenticated","Provider","SideNav_SideNav","component","LOGOUT_URL","Banner","accountControl","accountElements","data-toggle","data-target","aria-expanded","Login","classList","authUrl","height","width","srcSet","remove","App","backTo","encodeURIComponent","Login_Login","me","mine","Authenticated_Authenticated","Banner_Banner","App_graphql","hostname","ReactDOM","App_App","getElementById","navigator","serviceWorker","then","registration","unregister"],"mappings":"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","file":"static/js/main.4c2e3987.chunk.js","sourcesContent":["/* tslint:disable */\n\nimport { ConcreteRequest } from \"relay-runtime\";\nexport type Presence = \"ACTIVE\" | \"AWAY\" | \"UNKNOWN\" | \"%future added value\";\nexport type PeopleQueryVariables = {};\nexport type PeopleQueryResponse = {\n    readonly users: {\n        readonly all: ReadonlyArray<{\n            readonly name: string;\n            readonly presence: Presence;\n            readonly avatar: {\n                readonly image48: string | null;\n            };\n            readonly status: {\n                readonly message: string | null;\n                readonly emoji: string | null;\n            };\n        }>;\n    };\n    readonly titles: {\n        readonly all: {\n            readonly edges: ReadonlyArray<{\n                readonly node: {\n                    readonly text: string;\n                    readonly subject: string | null;\n                };\n            }>;\n        };\n    } | null;\n};\nexport type PeopleQuery = {\n    readonly response: PeopleQueryResponse;\n    readonly variables: PeopleQueryVariables;\n};\n\n\n\n/*\nquery PeopleQuery {\n  users {\n    all {\n      name\n      presence\n      avatar {\n        image48\n      }\n      status {\n        message\n        emoji\n      }\n      id\n    }\n  }\n  titles: documents(set: \"title\") {\n    all(criteria: {}) {\n      edges {\n        node {\n          text\n          subject\n          id\n        }\n      }\n    }\n  }\n}\n*/\n\nconst node: ConcreteRequest = (function(){\nvar v0 = {\n  \"kind\": \"ScalarField\",\n  \"alias\": null,\n  \"name\": \"name\",\n  \"args\": null,\n  \"storageKey\": null\n},\nv1 = {\n  \"kind\": \"ScalarField\",\n  \"alias\": null,\n  \"name\": \"presence\",\n  \"args\": null,\n  \"storageKey\": null\n},\nv2 = {\n  \"kind\": \"LinkedField\",\n  \"alias\": null,\n  \"name\": \"avatar\",\n  \"storageKey\": null,\n  \"args\": null,\n  \"concreteType\": \"Avatar\",\n  \"plural\": false,\n  \"selections\": [\n    {\n      \"kind\": \"ScalarField\",\n      \"alias\": null,\n      \"name\": \"image48\",\n      \"args\": null,\n      \"storageKey\": null\n    }\n  ]\n},\nv3 = {\n  \"kind\": \"LinkedField\",\n  \"alias\": null,\n  \"name\": \"status\",\n  \"storageKey\": null,\n  \"args\": null,\n  \"concreteType\": \"Status\",\n  \"plural\": false,\n  \"selections\": [\n    {\n      \"kind\": \"ScalarField\",\n      \"alias\": null,\n      \"name\": \"message\",\n      \"args\": null,\n      \"storageKey\": null\n    },\n    {\n      \"kind\": \"ScalarField\",\n      \"alias\": null,\n      \"name\": \"emoji\",\n      \"args\": null,\n      \"storageKey\": null\n    }\n  ]\n},\nv4 = [\n  {\n    \"kind\": \"Literal\",\n    \"name\": \"set\",\n    \"value\": \"title\"\n  }\n],\nv5 = [\n  {\n    \"kind\": \"Literal\",\n    \"name\": \"criteria\",\n    \"value\": {}\n  }\n],\nv6 = {\n  \"kind\": \"ScalarField\",\n  \"alias\": null,\n  \"name\": \"text\",\n  \"args\": null,\n  \"storageKey\": null\n},\nv7 = {\n  \"kind\": \"ScalarField\",\n  \"alias\": null,\n  \"name\": \"subject\",\n  \"args\": null,\n  \"storageKey\": null\n},\nv8 = {\n  \"kind\": \"ScalarField\",\n  \"alias\": null,\n  \"name\": \"id\",\n  \"args\": null,\n  \"storageKey\": null\n};\nreturn {\n  \"kind\": \"Request\",\n  \"fragment\": {\n    \"kind\": \"Fragment\",\n    \"name\": \"PeopleQuery\",\n    \"type\": \"Query\",\n    \"metadata\": null,\n    \"argumentDefinitions\": [],\n    \"selections\": [\n      {\n        \"kind\": \"LinkedField\",\n        \"alias\": null,\n        \"name\": \"users\",\n        \"storageKey\": null,\n        \"args\": null,\n        \"concreteType\": \"UserSet\",\n        \"plural\": false,\n        \"selections\": [\n          {\n            \"kind\": \"LinkedField\",\n            \"alias\": null,\n            \"name\": \"all\",\n            \"storageKey\": null,\n            \"args\": null,\n            \"concreteType\": \"User\",\n            \"plural\": true,\n            \"selections\": [\n              (v0/*: any*/),\n              (v1/*: any*/),\n              (v2/*: any*/),\n              (v3/*: any*/)\n            ]\n          }\n        ]\n      },\n      {\n        \"kind\": \"LinkedField\",\n        \"alias\": \"titles\",\n        \"name\": \"documents\",\n        \"storageKey\": \"documents(set:\\\"title\\\")\",\n        \"args\": (v4/*: any*/),\n        \"concreteType\": \"DocumentSet\",\n        \"plural\": false,\n        \"selections\": [\n          {\n            \"kind\": \"LinkedField\",\n            \"alias\": null,\n            \"name\": \"all\",\n            \"storageKey\": \"all(criteria:{})\",\n            \"args\": (v5/*: any*/),\n            \"concreteType\": \"DocumentConnection\",\n            \"plural\": false,\n            \"selections\": [\n              {\n                \"kind\": \"LinkedField\",\n                \"alias\": null,\n                \"name\": \"edges\",\n                \"storageKey\": null,\n                \"args\": null,\n                \"concreteType\": \"DocumentEdge\",\n                \"plural\": true,\n                \"selections\": [\n                  {\n                    \"kind\": \"LinkedField\",\n                    \"alias\": null,\n                    \"name\": \"node\",\n                    \"storageKey\": null,\n                    \"args\": null,\n                    \"concreteType\": \"Document\",\n                    \"plural\": false,\n                    \"selections\": [\n                      (v6/*: any*/),\n                      (v7/*: any*/)\n                    ]\n                  }\n                ]\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  },\n  \"operation\": {\n    \"kind\": \"Operation\",\n    \"name\": \"PeopleQuery\",\n    \"argumentDefinitions\": [],\n    \"selections\": [\n      {\n        \"kind\": \"LinkedField\",\n        \"alias\": null,\n        \"name\": \"users\",\n        \"storageKey\": null,\n        \"args\": null,\n        \"concreteType\": \"UserSet\",\n        \"plural\": false,\n        \"selections\": [\n          {\n            \"kind\": \"LinkedField\",\n            \"alias\": null,\n            \"name\": \"all\",\n            \"storageKey\": null,\n            \"args\": null,\n            \"concreteType\": \"User\",\n            \"plural\": true,\n            \"selections\": [\n              (v0/*: any*/),\n              (v1/*: any*/),\n              (v2/*: any*/),\n              (v3/*: any*/),\n              (v8/*: any*/)\n            ]\n          }\n        ]\n      },\n      {\n        \"kind\": \"LinkedField\",\n        \"alias\": \"titles\",\n        \"name\": \"documents\",\n        \"storageKey\": \"documents(set:\\\"title\\\")\",\n        \"args\": (v4/*: any*/),\n        \"concreteType\": \"DocumentSet\",\n        \"plural\": false,\n        \"selections\": [\n          {\n            \"kind\": \"LinkedField\",\n            \"alias\": null,\n            \"name\": \"all\",\n            \"storageKey\": \"all(criteria:{})\",\n            \"args\": (v5/*: any*/),\n            \"concreteType\": \"DocumentConnection\",\n            \"plural\": false,\n            \"selections\": [\n              {\n                \"kind\": \"LinkedField\",\n                \"alias\": null,\n                \"name\": \"edges\",\n                \"storageKey\": null,\n                \"args\": null,\n                \"concreteType\": \"DocumentEdge\",\n                \"plural\": true,\n                \"selections\": [\n                  {\n                    \"kind\": \"LinkedField\",\n                    \"alias\": null,\n                    \"name\": \"node\",\n                    \"storageKey\": null,\n                    \"args\": null,\n                    \"concreteType\": \"Document\",\n                    \"plural\": false,\n                    \"selections\": [\n                      (v6/*: any*/),\n                      (v7/*: any*/),\n                      (v8/*: any*/)\n                    ]\n                  }\n                ]\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  },\n  \"params\": {\n    \"operationKind\": \"query\",\n    \"name\": \"PeopleQuery\",\n    \"id\": null,\n    \"text\": \"query PeopleQuery {\\n  users {\\n    all {\\n      name\\n      presence\\n      avatar {\\n        image48\\n      }\\n      status {\\n        message\\n        emoji\\n      }\\n      id\\n    }\\n  }\\n  titles: documents(set: \\\"title\\\") {\\n    all(criteria: {}) {\\n      edges {\\n        node {\\n          text\\n          subject\\n          id\\n        }\\n      }\\n    }\\n  }\\n}\\n\",\n    \"metadata\": {}\n  }\n};\n})();\n(node as any).hash = '28094ab31a64fbe177811308b6004e81';\nexport default node;\n","/* tslint:disable */\n\nimport { ConcreteRequest } from \"relay-runtime\";\nexport type Criteria = {\n    readonly query?: string | null;\n    readonly subject?: string | null;\n    readonly speakers?: ReadonlyArray<string> | null;\n    readonly mentions?: ReadonlyArray<string> | null;\n};\nexport type ProfileQueryVariables = {\n    readonly name: string;\n    readonly titleCriteria: Criteria;\n};\nexport type ProfileQueryResponse = {\n    readonly users: {\n        readonly current: {\n            readonly avatar: {\n                readonly image192: string | null;\n            };\n            readonly topReactionsReceived: ReadonlyArray<{\n                readonly count: number;\n                readonly emoji: {\n                    readonly name: string;\n                    readonly url: string | null;\n                };\n            }>;\n            readonly topReactionsGiven: ReadonlyArray<{\n                readonly count: number;\n                readonly emoji: {\n                    readonly name: string;\n                    readonly url: string | null;\n                };\n            }>;\n        } | null;\n    };\n    readonly titles: {\n        readonly all: {\n            readonly edges: ReadonlyArray<{\n                readonly node: {\n                    readonly text: string;\n                };\n            }>;\n        };\n    } | null;\n    readonly quotes: {\n        readonly rank: number;\n    } | null;\n};\nexport type ProfileQuery = {\n    readonly response: ProfileQueryResponse;\n    readonly variables: ProfileQueryVariables;\n};\n\n\n\n/*\nquery ProfileQuery(\n  $name: String!\n  $titleCriteria: Criteria!\n) {\n  users {\n    current: withName(name: $name) {\n      avatar {\n        image192\n      }\n      topReactionsReceived(limit: 10) {\n        count\n        emoji {\n          name\n          url\n        }\n      }\n      topReactionsGiven(limit: 10) {\n        count\n        emoji {\n          name\n          url\n        }\n      }\n      id\n    }\n  }\n  titles: documents(set: \"title\") {\n    all(first: 100, criteria: $titleCriteria) {\n      edges {\n        node {\n          text\n          id\n        }\n      }\n    }\n  }\n  quotes: documents(set: \"quote\") {\n    rank(speaker: $name)\n  }\n}\n*/\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"kind\": \"LocalArgument\",\n    \"name\": \"name\",\n    \"type\": \"String!\",\n    \"defaultValue\": null\n  },\n  {\n    \"kind\": \"LocalArgument\",\n    \"name\": \"titleCriteria\",\n    \"type\": \"Criteria!\",\n    \"defaultValue\": null\n  }\n],\nv1 = [\n  {\n    \"kind\": \"Variable\",\n    \"name\": \"name\",\n    \"variableName\": \"name\"\n  }\n],\nv2 = {\n  \"kind\": \"LinkedField\",\n  \"alias\": null,\n  \"name\": \"avatar\",\n  \"storageKey\": null,\n  \"args\": null,\n  \"concreteType\": \"Avatar\",\n  \"plural\": false,\n  \"selections\": [\n    {\n      \"kind\": \"ScalarField\",\n      \"alias\": null,\n      \"name\": \"image192\",\n      \"args\": null,\n      \"storageKey\": null\n    }\n  ]\n},\nv3 = [\n  {\n    \"kind\": \"Literal\",\n    \"name\": \"limit\",\n    \"value\": 10\n  }\n],\nv4 = [\n  {\n    \"kind\": \"ScalarField\",\n    \"alias\": null,\n    \"name\": \"count\",\n    \"args\": null,\n    \"storageKey\": null\n  },\n  {\n    \"kind\": \"LinkedField\",\n    \"alias\": null,\n    \"name\": \"emoji\",\n    \"storageKey\": null,\n    \"args\": null,\n    \"concreteType\": \"Emoji\",\n    \"plural\": false,\n    \"selections\": [\n      {\n        \"kind\": \"ScalarField\",\n        \"alias\": null,\n        \"name\": \"name\",\n        \"args\": null,\n        \"storageKey\": null\n      },\n      {\n        \"kind\": \"ScalarField\",\n        \"alias\": null,\n        \"name\": \"url\",\n        \"args\": null,\n        \"storageKey\": null\n      }\n    ]\n  }\n],\nv5 = {\n  \"kind\": \"LinkedField\",\n  \"alias\": null,\n  \"name\": \"topReactionsReceived\",\n  \"storageKey\": \"topReactionsReceived(limit:10)\",\n  \"args\": (v3/*: any*/),\n  \"concreteType\": \"EmojiCount\",\n  \"plural\": true,\n  \"selections\": (v4/*: any*/)\n},\nv6 = {\n  \"kind\": \"LinkedField\",\n  \"alias\": null,\n  \"name\": \"topReactionsGiven\",\n  \"storageKey\": \"topReactionsGiven(limit:10)\",\n  \"args\": (v3/*: any*/),\n  \"concreteType\": \"EmojiCount\",\n  \"plural\": true,\n  \"selections\": (v4/*: any*/)\n},\nv7 = [\n  {\n    \"kind\": \"Literal\",\n    \"name\": \"set\",\n    \"value\": \"title\"\n  }\n],\nv8 = [\n  {\n    \"kind\": \"Variable\",\n    \"name\": \"criteria\",\n    \"variableName\": \"titleCriteria\"\n  },\n  {\n    \"kind\": \"Literal\",\n    \"name\": \"first\",\n    \"value\": 100\n  }\n],\nv9 = {\n  \"kind\": \"ScalarField\",\n  \"alias\": null,\n  \"name\": \"text\",\n  \"args\": null,\n  \"storageKey\": null\n},\nv10 = {\n  \"kind\": \"LinkedField\",\n  \"alias\": \"quotes\",\n  \"name\": \"documents\",\n  \"storageKey\": \"documents(set:\\\"quote\\\")\",\n  \"args\": [\n    {\n      \"kind\": \"Literal\",\n      \"name\": \"set\",\n      \"value\": \"quote\"\n    }\n  ],\n  \"concreteType\": \"DocumentSet\",\n  \"plural\": false,\n  \"selections\": [\n    {\n      \"kind\": \"ScalarField\",\n      \"alias\": null,\n      \"name\": \"rank\",\n      \"args\": [\n        {\n          \"kind\": \"Variable\",\n          \"name\": \"speaker\",\n          \"variableName\": \"name\"\n        }\n      ],\n      \"storageKey\": null\n    }\n  ]\n},\nv11 = {\n  \"kind\": \"ScalarField\",\n  \"alias\": null,\n  \"name\": \"id\",\n  \"args\": null,\n  \"storageKey\": null\n};\nreturn {\n  \"kind\": \"Request\",\n  \"fragment\": {\n    \"kind\": \"Fragment\",\n    \"name\": \"ProfileQuery\",\n    \"type\": \"Query\",\n    \"metadata\": null,\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"selections\": [\n      {\n        \"kind\": \"LinkedField\",\n        \"alias\": null,\n        \"name\": \"users\",\n        \"storageKey\": null,\n        \"args\": null,\n        \"concreteType\": \"UserSet\",\n        \"plural\": false,\n        \"selections\": [\n          {\n            \"kind\": \"LinkedField\",\n            \"alias\": \"current\",\n            \"name\": \"withName\",\n            \"storageKey\": null,\n            \"args\": (v1/*: any*/),\n            \"concreteType\": \"User\",\n            \"plural\": false,\n            \"selections\": [\n              (v2/*: any*/),\n              (v5/*: any*/),\n              (v6/*: any*/)\n            ]\n          }\n        ]\n      },\n      {\n        \"kind\": \"LinkedField\",\n        \"alias\": \"titles\",\n        \"name\": \"documents\",\n        \"storageKey\": \"documents(set:\\\"title\\\")\",\n        \"args\": (v7/*: any*/),\n        \"concreteType\": \"DocumentSet\",\n        \"plural\": false,\n        \"selections\": [\n          {\n            \"kind\": \"LinkedField\",\n            \"alias\": null,\n            \"name\": \"all\",\n            \"storageKey\": null,\n            \"args\": (v8/*: any*/),\n            \"concreteType\": \"DocumentConnection\",\n            \"plural\": false,\n            \"selections\": [\n              {\n                \"kind\": \"LinkedField\",\n                \"alias\": null,\n                \"name\": \"edges\",\n                \"storageKey\": null,\n                \"args\": null,\n                \"concreteType\": \"DocumentEdge\",\n                \"plural\": true,\n                \"selections\": [\n                  {\n                    \"kind\": \"LinkedField\",\n                    \"alias\": null,\n                    \"name\": \"node\",\n                    \"storageKey\": null,\n                    \"args\": null,\n                    \"concreteType\": \"Document\",\n                    \"plural\": false,\n                    \"selections\": [\n                      (v9/*: any*/)\n                    ]\n                  }\n                ]\n              }\n            ]\n          }\n        ]\n      },\n      (v10/*: any*/)\n    ]\n  },\n  \"operation\": {\n    \"kind\": \"Operation\",\n    \"name\": \"ProfileQuery\",\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"selections\": [\n      {\n        \"kind\": \"LinkedField\",\n        \"alias\": null,\n        \"name\": \"users\",\n        \"storageKey\": null,\n        \"args\": null,\n        \"concreteType\": \"UserSet\",\n        \"plural\": false,\n        \"selections\": [\n          {\n            \"kind\": \"LinkedField\",\n            \"alias\": \"current\",\n            \"name\": \"withName\",\n            \"storageKey\": null,\n            \"args\": (v1/*: any*/),\n            \"concreteType\": \"User\",\n            \"plural\": false,\n            \"selections\": [\n              (v2/*: any*/),\n              (v5/*: any*/),\n              (v6/*: any*/),\n              (v11/*: any*/)\n            ]\n          }\n        ]\n      },\n      {\n        \"kind\": \"LinkedField\",\n        \"alias\": \"titles\",\n        \"name\": \"documents\",\n        \"storageKey\": \"documents(set:\\\"title\\\")\",\n        \"args\": (v7/*: any*/),\n        \"concreteType\": \"DocumentSet\",\n        \"plural\": false,\n        \"selections\": [\n          {\n            \"kind\": \"LinkedField\",\n            \"alias\": null,\n            \"name\": \"all\",\n            \"storageKey\": null,\n            \"args\": (v8/*: any*/),\n            \"concreteType\": \"DocumentConnection\",\n            \"plural\": false,\n            \"selections\": [\n              {\n                \"kind\": \"LinkedField\",\n                \"alias\": null,\n                \"name\": \"edges\",\n                \"storageKey\": null,\n                \"args\": null,\n                \"concreteType\": \"DocumentEdge\",\n                \"plural\": true,\n                \"selections\": [\n                  {\n                    \"kind\": \"LinkedField\",\n                    \"alias\": null,\n                    \"name\": \"node\",\n                    \"storageKey\": null,\n                    \"args\": null,\n                    \"concreteType\": \"Document\",\n                    \"plural\": false,\n                    \"selections\": [\n                      (v9/*: any*/),\n                      (v11/*: any*/)\n                    ]\n                  }\n                ]\n              }\n            ]\n          }\n        ]\n      },\n      (v10/*: any*/)\n    ]\n  },\n  \"params\": {\n    \"operationKind\": \"query\",\n    \"name\": \"ProfileQuery\",\n    \"id\": null,\n    \"text\": \"query ProfileQuery(\\n  $name: String!\\n  $titleCriteria: Criteria!\\n) {\\n  users {\\n    current: withName(name: $name) {\\n      avatar {\\n        image192\\n      }\\n      topReactionsReceived(limit: 10) {\\n        count\\n        emoji {\\n          name\\n          url\\n        }\\n      }\\n      topReactionsGiven(limit: 10) {\\n        count\\n        emoji {\\n          name\\n          url\\n        }\\n      }\\n      id\\n    }\\n  }\\n  titles: documents(set: \\\"title\\\") {\\n    all(first: 100, criteria: $titleCriteria) {\\n      edges {\\n        node {\\n          text\\n          id\\n        }\\n      }\\n    }\\n  }\\n  quotes: documents(set: \\\"quote\\\") {\\n    rank(speaker: $name)\\n  }\\n}\\n\",\n    \"metadata\": {}\n  }\n};\n})();\n(node as any).hash = '6909612b595759bd5819ae0b5de00978';\nexport default node;\n","/* tslint:disable */\n\nimport { ConcreteRequest } from \"relay-runtime\";\nexport type Criteria = {\n    readonly query?: string | null;\n    readonly subject?: string | null;\n    readonly speakers?: ReadonlyArray<string> | null;\n    readonly mentions?: ReadonlyArray<string> | null;\n};\nexport type QuotesPageQueryVariables = {\n    readonly c: Criteria;\n};\nexport type QuotesPageQueryResponse = {\n    readonly documents: {\n        readonly all: {\n            readonly edges: ReadonlyArray<{\n                readonly node: {\n                    readonly id: string | null;\n                    readonly text: string;\n                };\n            }>;\n            readonly pageInfo: {\n                readonly count: number;\n                readonly hasNextPage: boolean;\n            };\n        };\n    } | null;\n};\nexport type QuotesPageQuery = {\n    readonly response: QuotesPageQueryResponse;\n    readonly variables: QuotesPageQueryVariables;\n};\n\n\n\n/*\nquery QuotesPageQuery(\n  $c: Criteria!\n) {\n  documents(set: \"quote\") {\n    all(criteria: $c, first: 20) {\n      edges {\n        node {\n          id\n          text\n        }\n      }\n      pageInfo {\n        count\n        hasNextPage\n      }\n    }\n  }\n}\n*/\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"kind\": \"LocalArgument\",\n    \"name\": \"c\",\n    \"type\": \"Criteria!\",\n    \"defaultValue\": null\n  }\n],\nv1 = [\n  {\n    \"kind\": \"LinkedField\",\n    \"alias\": null,\n    \"name\": \"documents\",\n    \"storageKey\": \"documents(set:\\\"quote\\\")\",\n    \"args\": [\n      {\n        \"kind\": \"Literal\",\n        \"name\": \"set\",\n        \"value\": \"quote\"\n      }\n    ],\n    \"concreteType\": \"DocumentSet\",\n    \"plural\": false,\n    \"selections\": [\n      {\n        \"kind\": \"LinkedField\",\n        \"alias\": null,\n        \"name\": \"all\",\n        \"storageKey\": null,\n        \"args\": [\n          {\n            \"kind\": \"Variable\",\n            \"name\": \"criteria\",\n            \"variableName\": \"c\"\n          },\n          {\n            \"kind\": \"Literal\",\n            \"name\": \"first\",\n            \"value\": 20\n          }\n        ],\n        \"concreteType\": \"DocumentConnection\",\n        \"plural\": false,\n        \"selections\": [\n          {\n            \"kind\": \"LinkedField\",\n            \"alias\": null,\n            \"name\": \"edges\",\n            \"storageKey\": null,\n            \"args\": null,\n            \"concreteType\": \"DocumentEdge\",\n            \"plural\": true,\n            \"selections\": [\n              {\n                \"kind\": \"LinkedField\",\n                \"alias\": null,\n                \"name\": \"node\",\n                \"storageKey\": null,\n                \"args\": null,\n                \"concreteType\": \"Document\",\n                \"plural\": false,\n                \"selections\": [\n                  {\n                    \"kind\": \"ScalarField\",\n                    \"alias\": null,\n                    \"name\": \"id\",\n                    \"args\": null,\n                    \"storageKey\": null\n                  },\n                  {\n                    \"kind\": \"ScalarField\",\n                    \"alias\": null,\n                    \"name\": \"text\",\n                    \"args\": null,\n                    \"storageKey\": null\n                  }\n                ]\n              }\n            ]\n          },\n          {\n            \"kind\": \"LinkedField\",\n            \"alias\": null,\n            \"name\": \"pageInfo\",\n            \"storageKey\": null,\n            \"args\": null,\n            \"concreteType\": \"PageInfo\",\n            \"plural\": false,\n            \"selections\": [\n              {\n                \"kind\": \"ScalarField\",\n                \"alias\": null,\n                \"name\": \"count\",\n                \"args\": null,\n                \"storageKey\": null\n              },\n              {\n                \"kind\": \"ScalarField\",\n                \"alias\": null,\n                \"name\": \"hasNextPage\",\n                \"args\": null,\n                \"storageKey\": null\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  }\n];\nreturn {\n  \"kind\": \"Request\",\n  \"fragment\": {\n    \"kind\": \"Fragment\",\n    \"name\": \"QuotesPageQuery\",\n    \"type\": \"Query\",\n    \"metadata\": null,\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"selections\": (v1/*: any*/)\n  },\n  \"operation\": {\n    \"kind\": \"Operation\",\n    \"name\": \"QuotesPageQuery\",\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"selections\": (v1/*: any*/)\n  },\n  \"params\": {\n    \"operationKind\": \"query\",\n    \"name\": \"QuotesPageQuery\",\n    \"id\": null,\n    \"text\": \"query QuotesPageQuery(\\n  $c: Criteria!\\n) {\\n  documents(set: \\\"quote\\\") {\\n    all(criteria: $c, first: 20) {\\n      edges {\\n        node {\\n          id\\n          text\\n        }\\n      }\\n      pageInfo {\\n        count\\n        hasNextPage\\n      }\\n    }\\n  }\\n}\\n\",\n    \"metadata\": {}\n  }\n};\n})();\n(node as any).hash = '492bb0e3eddbdf96a587f3ab5493817a';\nexport default node;\n","/* tslint:disable */\n\nimport { ConcreteRequest } from \"relay-runtime\";\nexport type QuotesRandomQueryVariables = {};\nexport type QuotesRandomQueryResponse = {\n    readonly documents: {\n        readonly random: {\n            readonly found: boolean;\n            readonly text: string;\n        };\n    } | null;\n};\nexport type QuotesRandomQuery = {\n    readonly response: QuotesRandomQueryResponse;\n    readonly variables: QuotesRandomQueryVariables;\n};\n\n\n\n/*\nquery QuotesRandomQuery {\n  documents(set: \"quote\") {\n    random(criteria: {}) {\n      found\n      text\n      id\n    }\n  }\n}\n*/\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"kind\": \"Literal\",\n    \"name\": \"set\",\n    \"value\": \"quote\"\n  }\n],\nv1 = [\n  {\n    \"kind\": \"Literal\",\n    \"name\": \"criteria\",\n    \"value\": {}\n  }\n],\nv2 = {\n  \"kind\": \"ScalarField\",\n  \"alias\": null,\n  \"name\": \"found\",\n  \"args\": null,\n  \"storageKey\": null\n},\nv3 = {\n  \"kind\": \"ScalarField\",\n  \"alias\": null,\n  \"name\": \"text\",\n  \"args\": null,\n  \"storageKey\": null\n};\nreturn {\n  \"kind\": \"Request\",\n  \"fragment\": {\n    \"kind\": \"Fragment\",\n    \"name\": \"QuotesRandomQuery\",\n    \"type\": \"Query\",\n    \"metadata\": null,\n    \"argumentDefinitions\": [],\n    \"selections\": [\n      {\n        \"kind\": \"LinkedField\",\n        \"alias\": null,\n        \"name\": \"documents\",\n        \"storageKey\": \"documents(set:\\\"quote\\\")\",\n        \"args\": (v0/*: any*/),\n        \"concreteType\": \"DocumentSet\",\n        \"plural\": false,\n        \"selections\": [\n          {\n            \"kind\": \"LinkedField\",\n            \"alias\": null,\n            \"name\": \"random\",\n            \"storageKey\": \"random(criteria:{})\",\n            \"args\": (v1/*: any*/),\n            \"concreteType\": \"Document\",\n            \"plural\": false,\n            \"selections\": [\n              (v2/*: any*/),\n              (v3/*: any*/)\n            ]\n          }\n        ]\n      }\n    ]\n  },\n  \"operation\": {\n    \"kind\": \"Operation\",\n    \"name\": \"QuotesRandomQuery\",\n    \"argumentDefinitions\": [],\n    \"selections\": [\n      {\n        \"kind\": \"LinkedField\",\n        \"alias\": null,\n        \"name\": \"documents\",\n        \"storageKey\": \"documents(set:\\\"quote\\\")\",\n        \"args\": (v0/*: any*/),\n        \"concreteType\": \"DocumentSet\",\n        \"plural\": false,\n        \"selections\": [\n          {\n            \"kind\": \"LinkedField\",\n            \"alias\": null,\n            \"name\": \"random\",\n            \"storageKey\": \"random(criteria:{})\",\n            \"args\": (v1/*: any*/),\n            \"concreteType\": \"Document\",\n            \"plural\": false,\n            \"selections\": [\n              (v2/*: any*/),\n              (v3/*: any*/),\n              {\n                \"kind\": \"ScalarField\",\n                \"alias\": null,\n                \"name\": \"id\",\n                \"args\": null,\n                \"storageKey\": null\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  },\n  \"params\": {\n    \"operationKind\": \"query\",\n    \"name\": \"QuotesRandomQuery\",\n    \"id\": null,\n    \"text\": \"query QuotesRandomQuery {\\n  documents(set: \\\"quote\\\") {\\n    random(criteria: {}) {\\n      found\\n      text\\n      id\\n    }\\n  }\\n}\\n\",\n    \"metadata\": {}\n  }\n};\n})();\n(node as any).hash = 'd5307ec9471190cea0e8cab226913180';\nexport default node;\n","/* tslint:disable */\n\nimport { ConcreteRequest } from \"relay-runtime\";\nexport type EventsQueryVariables = {};\nexport type EventsQueryResponse = {\n    readonly calendarURL: string;\n};\nexport type EventsQuery = {\n    readonly response: EventsQueryResponse;\n    readonly variables: EventsQueryVariables;\n};\n\n\n\n/*\nquery EventsQuery {\n  calendarURL\n}\n*/\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"kind\": \"ScalarField\",\n    \"alias\": null,\n    \"name\": \"calendarURL\",\n    \"args\": null,\n    \"storageKey\": null\n  }\n];\nreturn {\n  \"kind\": \"Request\",\n  \"fragment\": {\n    \"kind\": \"Fragment\",\n    \"name\": \"EventsQuery\",\n    \"type\": \"Query\",\n    \"metadata\": null,\n    \"argumentDefinitions\": [],\n    \"selections\": (v0/*: any*/)\n  },\n  \"operation\": {\n    \"kind\": \"Operation\",\n    \"name\": \"EventsQuery\",\n    \"argumentDefinitions\": [],\n    \"selections\": (v0/*: any*/)\n  },\n  \"params\": {\n    \"operationKind\": \"query\",\n    \"name\": \"EventsQuery\",\n    \"id\": null,\n    \"text\": \"query EventsQuery {\\n  calendarURL\\n}\\n\",\n    \"metadata\": {}\n  }\n};\n})();\n(node as any).hash = '388cd7e5bbbedc329dded72e8648dbf6';\nexport default node;\n","/* tslint:disable */\n\nimport { ConcreteRequest } from \"relay-runtime\";\nexport type RecentSubmitMutationVariables = {\n    readonly set: string;\n    readonly channel: string;\n    readonly lines: ReadonlyArray<string>;\n};\nexport type RecentSubmitMutationResponse = {\n    readonly createDocument: {\n        readonly id: string | null;\n    };\n};\nexport type RecentSubmitMutation = {\n    readonly response: RecentSubmitMutationResponse;\n    readonly variables: RecentSubmitMutationVariables;\n};\n\n\n\n/*\nmutation RecentSubmitMutation(\n  $set: String!\n  $channel: String!\n  $lines: [ID!]!\n) {\n  createDocument(set: $set, channel: $channel, lines: $lines) {\n    id\n  }\n}\n*/\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"kind\": \"LocalArgument\",\n    \"name\": \"set\",\n    \"type\": \"String!\",\n    \"defaultValue\": null\n  },\n  {\n    \"kind\": \"LocalArgument\",\n    \"name\": \"channel\",\n    \"type\": \"String!\",\n    \"defaultValue\": null\n  },\n  {\n    \"kind\": \"LocalArgument\",\n    \"name\": \"lines\",\n    \"type\": \"[ID!]!\",\n    \"defaultValue\": null\n  }\n],\nv1 = [\n  {\n    \"kind\": \"LinkedField\",\n    \"alias\": null,\n    \"name\": \"createDocument\",\n    \"storageKey\": null,\n    \"args\": [\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"channel\",\n        \"variableName\": \"channel\"\n      },\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"lines\",\n        \"variableName\": \"lines\"\n      },\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"set\",\n        \"variableName\": \"set\"\n      }\n    ],\n    \"concreteType\": \"Document\",\n    \"plural\": false,\n    \"selections\": [\n      {\n        \"kind\": \"ScalarField\",\n        \"alias\": null,\n        \"name\": \"id\",\n        \"args\": null,\n        \"storageKey\": null\n      }\n    ]\n  }\n];\nreturn {\n  \"kind\": \"Request\",\n  \"fragment\": {\n    \"kind\": \"Fragment\",\n    \"name\": \"RecentSubmitMutation\",\n    \"type\": \"Mutation\",\n    \"metadata\": null,\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"selections\": (v1/*: any*/)\n  },\n  \"operation\": {\n    \"kind\": \"Operation\",\n    \"name\": \"RecentSubmitMutation\",\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"selections\": (v1/*: any*/)\n  },\n  \"params\": {\n    \"operationKind\": \"mutation\",\n    \"name\": \"RecentSubmitMutation\",\n    \"id\": null,\n    \"text\": \"mutation RecentSubmitMutation(\\n  $set: String!\\n  $channel: String!\\n  $lines: [ID!]!\\n) {\\n  createDocument(set: $set, channel: $channel, lines: $lines) {\\n    id\\n  }\\n}\\n\",\n    \"metadata\": {}\n  }\n};\n})();\n(node as any).hash = 'a5027df9b7469422a1a273bb643620b7';\nexport default node;\n","/* tslint:disable */\n\nimport { ConcreteRequest } from \"relay-runtime\";\nexport type RecentChannelQueryVariables = {};\nexport type RecentChannelQueryResponse = {\n    readonly cache: {\n        readonly knownChannels: ReadonlyArray<string>;\n    };\n};\nexport type RecentChannelQuery = {\n    readonly response: RecentChannelQueryResponse;\n    readonly variables: RecentChannelQueryVariables;\n};\n\n\n\n/*\nquery RecentChannelQuery {\n  cache {\n    knownChannels\n  }\n}\n*/\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"kind\": \"LinkedField\",\n    \"alias\": null,\n    \"name\": \"cache\",\n    \"storageKey\": null,\n    \"args\": null,\n    \"concreteType\": \"Cache\",\n    \"plural\": false,\n    \"selections\": [\n      {\n        \"kind\": \"ScalarField\",\n        \"alias\": null,\n        \"name\": \"knownChannels\",\n        \"args\": null,\n        \"storageKey\": null\n      }\n    ]\n  }\n];\nreturn {\n  \"kind\": \"Request\",\n  \"fragment\": {\n    \"kind\": \"Fragment\",\n    \"name\": \"RecentChannelQuery\",\n    \"type\": \"Query\",\n    \"metadata\": null,\n    \"argumentDefinitions\": [],\n    \"selections\": (v0/*: any*/)\n  },\n  \"operation\": {\n    \"kind\": \"Operation\",\n    \"name\": \"RecentChannelQuery\",\n    \"argumentDefinitions\": [],\n    \"selections\": (v0/*: any*/)\n  },\n  \"params\": {\n    \"operationKind\": \"query\",\n    \"name\": \"RecentChannelQuery\",\n    \"id\": null,\n    \"text\": \"query RecentChannelQuery {\\n  cache {\\n    knownChannels\\n  }\\n}\\n\",\n    \"metadata\": {}\n  }\n};\n})();\n(node as any).hash = 'b33c5ca20b56c7400e6a375a0e5965ed';\nexport default node;\n","/* tslint:disable */\n\nimport { ConcreteRequest } from \"relay-runtime\";\nexport type RecentHistoryQueryVariables = {\n    readonly channel: string;\n};\nexport type RecentHistoryQueryResponse = {\n    readonly cache: {\n        readonly knownChannels: ReadonlyArray<string>;\n        readonly linesForChannel: ReadonlyArray<{\n            readonly id: string | null;\n            readonly speaker: {\n                readonly id: string;\n                readonly name: string;\n                readonly avatar: {\n                    readonly image32: string | null;\n                };\n            } | null;\n            readonly timestamp: string;\n            readonly text: string;\n        }> | null;\n    };\n};\nexport type RecentHistoryQuery = {\n    readonly response: RecentHistoryQueryResponse;\n    readonly variables: RecentHistoryQueryVariables;\n};\n\n\n\n/*\nquery RecentHistoryQuery(\n  $channel: String!\n) {\n  cache {\n    knownChannels\n    linesForChannel(channel: $channel) {\n      id\n      speaker {\n        id\n        name\n        avatar {\n          image32\n        }\n      }\n      timestamp\n      text\n    }\n  }\n}\n*/\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"kind\": \"LocalArgument\",\n    \"name\": \"channel\",\n    \"type\": \"String!\",\n    \"defaultValue\": null\n  }\n],\nv1 = {\n  \"kind\": \"ScalarField\",\n  \"alias\": null,\n  \"name\": \"id\",\n  \"args\": null,\n  \"storageKey\": null\n},\nv2 = [\n  {\n    \"kind\": \"LinkedField\",\n    \"alias\": null,\n    \"name\": \"cache\",\n    \"storageKey\": null,\n    \"args\": null,\n    \"concreteType\": \"Cache\",\n    \"plural\": false,\n    \"selections\": [\n      {\n        \"kind\": \"ScalarField\",\n        \"alias\": null,\n        \"name\": \"knownChannels\",\n        \"args\": null,\n        \"storageKey\": null\n      },\n      {\n        \"kind\": \"LinkedField\",\n        \"alias\": null,\n        \"name\": \"linesForChannel\",\n        \"storageKey\": null,\n        \"args\": [\n          {\n            \"kind\": \"Variable\",\n            \"name\": \"channel\",\n            \"variableName\": \"channel\"\n          }\n        ],\n        \"concreteType\": \"Line\",\n        \"plural\": true,\n        \"selections\": [\n          (v1/*: any*/),\n          {\n            \"kind\": \"LinkedField\",\n            \"alias\": null,\n            \"name\": \"speaker\",\n            \"storageKey\": null,\n            \"args\": null,\n            \"concreteType\": \"User\",\n            \"plural\": false,\n            \"selections\": [\n              (v1/*: any*/),\n              {\n                \"kind\": \"ScalarField\",\n                \"alias\": null,\n                \"name\": \"name\",\n                \"args\": null,\n                \"storageKey\": null\n              },\n              {\n                \"kind\": \"LinkedField\",\n                \"alias\": null,\n                \"name\": \"avatar\",\n                \"storageKey\": null,\n                \"args\": null,\n                \"concreteType\": \"Avatar\",\n                \"plural\": false,\n                \"selections\": [\n                  {\n                    \"kind\": \"ScalarField\",\n                    \"alias\": null,\n                    \"name\": \"image32\",\n                    \"args\": null,\n                    \"storageKey\": null\n                  }\n                ]\n              }\n            ]\n          },\n          {\n            \"kind\": \"ScalarField\",\n            \"alias\": null,\n            \"name\": \"timestamp\",\n            \"args\": null,\n            \"storageKey\": null\n          },\n          {\n            \"kind\": \"ScalarField\",\n            \"alias\": null,\n            \"name\": \"text\",\n            \"args\": null,\n            \"storageKey\": null\n          }\n        ]\n      }\n    ]\n  }\n];\nreturn {\n  \"kind\": \"Request\",\n  \"fragment\": {\n    \"kind\": \"Fragment\",\n    \"name\": \"RecentHistoryQuery\",\n    \"type\": \"Query\",\n    \"metadata\": null,\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"selections\": (v2/*: any*/)\n  },\n  \"operation\": {\n    \"kind\": \"Operation\",\n    \"name\": \"RecentHistoryQuery\",\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"selections\": (v2/*: any*/)\n  },\n  \"params\": {\n    \"operationKind\": \"query\",\n    \"name\": \"RecentHistoryQuery\",\n    \"id\": null,\n    \"text\": \"query RecentHistoryQuery(\\n  $channel: String!\\n) {\\n  cache {\\n    knownChannels\\n    linesForChannel(channel: $channel) {\\n      id\\n      speaker {\\n        id\\n        name\\n        avatar {\\n          image32\\n        }\\n      }\\n      timestamp\\n      text\\n    }\\n  }\\n}\\n\",\n    \"metadata\": {}\n  }\n};\n})();\n(node as any).hash = '4638d70a91379c9d2ce46aefaca2f3d9';\nexport default node;\n","/* tslint:disable */\n\nimport { ConcreteRequest } from \"relay-runtime\";\nexport type AppQueryVariables = {};\nexport type AppQueryResponse = {\n    readonly users: {\n        readonly me: {\n            readonly id: string;\n            readonly name: string;\n            readonly avatar: {\n                readonly image48: string | null;\n            };\n            readonly roles: ReadonlyArray<{\n                readonly name: string;\n            }>;\n        };\n    };\n    readonly title: {\n        readonly mine: {\n            readonly text: string;\n            readonly found: boolean;\n        };\n    } | null;\n};\nexport type AppQuery = {\n    readonly response: AppQueryResponse;\n    readonly variables: AppQueryVariables;\n};\n\n\n\n/*\nquery AppQuery {\n  users {\n    me {\n      id\n      name\n      avatar {\n        image48\n      }\n      roles {\n        name\n      }\n    }\n  }\n  title: documents(set: \"title\") {\n    mine {\n      text\n      found\n      id\n    }\n  }\n}\n*/\n\nconst node: ConcreteRequest = (function(){\nvar v0 = {\n  \"kind\": \"ScalarField\",\n  \"alias\": null,\n  \"name\": \"id\",\n  \"args\": null,\n  \"storageKey\": null\n},\nv1 = {\n  \"kind\": \"ScalarField\",\n  \"alias\": null,\n  \"name\": \"name\",\n  \"args\": null,\n  \"storageKey\": null\n},\nv2 = {\n  \"kind\": \"LinkedField\",\n  \"alias\": null,\n  \"name\": \"users\",\n  \"storageKey\": null,\n  \"args\": null,\n  \"concreteType\": \"UserSet\",\n  \"plural\": false,\n  \"selections\": [\n    {\n      \"kind\": \"LinkedField\",\n      \"alias\": null,\n      \"name\": \"me\",\n      \"storageKey\": null,\n      \"args\": null,\n      \"concreteType\": \"User\",\n      \"plural\": false,\n      \"selections\": [\n        (v0/*: any*/),\n        (v1/*: any*/),\n        {\n          \"kind\": \"LinkedField\",\n          \"alias\": null,\n          \"name\": \"avatar\",\n          \"storageKey\": null,\n          \"args\": null,\n          \"concreteType\": \"Avatar\",\n          \"plural\": false,\n          \"selections\": [\n            {\n              \"kind\": \"ScalarField\",\n              \"alias\": null,\n              \"name\": \"image48\",\n              \"args\": null,\n              \"storageKey\": null\n            }\n          ]\n        },\n        {\n          \"kind\": \"LinkedField\",\n          \"alias\": null,\n          \"name\": \"roles\",\n          \"storageKey\": null,\n          \"args\": null,\n          \"concreteType\": \"Role\",\n          \"plural\": true,\n          \"selections\": [\n            (v1/*: any*/)\n          ]\n        }\n      ]\n    }\n  ]\n},\nv3 = [\n  {\n    \"kind\": \"Literal\",\n    \"name\": \"set\",\n    \"value\": \"title\"\n  }\n],\nv4 = {\n  \"kind\": \"ScalarField\",\n  \"alias\": null,\n  \"name\": \"text\",\n  \"args\": null,\n  \"storageKey\": null\n},\nv5 = {\n  \"kind\": \"ScalarField\",\n  \"alias\": null,\n  \"name\": \"found\",\n  \"args\": null,\n  \"storageKey\": null\n};\nreturn {\n  \"kind\": \"Request\",\n  \"fragment\": {\n    \"kind\": \"Fragment\",\n    \"name\": \"AppQuery\",\n    \"type\": \"Query\",\n    \"metadata\": null,\n    \"argumentDefinitions\": [],\n    \"selections\": [\n      (v2/*: any*/),\n      {\n        \"kind\": \"LinkedField\",\n        \"alias\": \"title\",\n        \"name\": \"documents\",\n        \"storageKey\": \"documents(set:\\\"title\\\")\",\n        \"args\": (v3/*: any*/),\n        \"concreteType\": \"DocumentSet\",\n        \"plural\": false,\n        \"selections\": [\n          {\n            \"kind\": \"LinkedField\",\n            \"alias\": null,\n            \"name\": \"mine\",\n            \"storageKey\": null,\n            \"args\": null,\n            \"concreteType\": \"Document\",\n            \"plural\": false,\n            \"selections\": [\n              (v4/*: any*/),\n              (v5/*: any*/)\n            ]\n          }\n        ]\n      }\n    ]\n  },\n  \"operation\": {\n    \"kind\": \"Operation\",\n    \"name\": \"AppQuery\",\n    \"argumentDefinitions\": [],\n    \"selections\": [\n      (v2/*: any*/),\n      {\n        \"kind\": \"LinkedField\",\n        \"alias\": \"title\",\n        \"name\": \"documents\",\n        \"storageKey\": \"documents(set:\\\"title\\\")\",\n        \"args\": (v3/*: any*/),\n        \"concreteType\": \"DocumentSet\",\n        \"plural\": false,\n        \"selections\": [\n          {\n            \"kind\": \"LinkedField\",\n            \"alias\": null,\n            \"name\": \"mine\",\n            \"storageKey\": null,\n            \"args\": null,\n            \"concreteType\": \"Document\",\n            \"plural\": false,\n            \"selections\": [\n              (v4/*: any*/),\n              (v5/*: any*/),\n              (v0/*: any*/)\n            ]\n          }\n        ]\n      }\n    ]\n  },\n  \"params\": {\n    \"operationKind\": \"query\",\n    \"name\": \"AppQuery\",\n    \"id\": null,\n    \"text\": \"query AppQuery {\\n  users {\\n    me {\\n      id\\n      name\\n      avatar {\\n        image48\\n      }\\n      roles {\\n        name\\n      }\\n    }\\n  }\\n  title: documents(set: \\\"title\\\") {\\n    mine {\\n      text\\n      found\\n      id\\n    }\\n  }\\n}\\n\",\n    \"metadata\": {}\n  }\n};\n})();\n(node as any).hash = 'ef0c7e8618a1ab8874ab5c307ccd12bc';\nexport default node;\n","import {\n  Environment,\n  Network,\n  RecordSource,\n  Store,\n  OperationType,\n  RequestParameters,\n  Variables,\n} from \"relay-runtime\";\n\nconst API_URL = `${process.env.REACT_APP_API_BASE_URL}/graphql`;\nexport const AUTH_URL = `${process.env.REACT_APP_API_BASE_URL}/auth/${process.env.REACT_APP_API_AUTH_TYPE}`;\n\nexport interface QueryResult<T extends OperationType> {\n  error: Error | null;\n  props: T[\"response\"] | null;\n  retry: (() => void) | null;\n}\n\nconst NETWORK_ERROR_MARKER = Symbol(\"is-network-error\");\n\nexport interface NetworkError extends Error {\n  status: number;\n  text: string;\n  marker: typeof NETWORK_ERROR_MARKER;\n}\n\nexport function isNetworkError(err: Error | null): err is NetworkError {\n  return err ? (err as NetworkError).marker === NETWORK_ERROR_MARKER : false;\n}\n\nasync function createNetworkError(message: string, response: Response) {\n  const err = new Error(message) as NetworkError;\n  err.status = response.status;\n  err.text = await response.text();\n  err.marker = NETWORK_ERROR_MARKER;\n  return err as NetworkError;\n}\n\nasync function fetchQuery(\n  request: RequestParameters,\n  variables: Variables\n): Promise<any> {\n  const response = await fetch(API_URL, {\n    method: \"POST\",\n    headers: {\n      \"content-type\": \"application/json\",\n    },\n    credentials: \"include\",\n    body: JSON.stringify({\n      query: request.text,\n      variables,\n    }),\n  });\n\n  if (response.ok) {\n    return response.json();\n  } else {\n    throw await createNetworkError(\n      `API server responded with ${response.status}`,\n      response\n    );\n  }\n}\n\nconst source = new RecordSource();\nconst network = Network.create(fetchQuery);\n\nexport function getEnvironment(): Environment {\n  const store = new Store(source);\n\n  return new Environment({\n    network,\n    store,\n  });\n}\n","import React from \"react\";\nimport {Link, Route} from \"react-router-dom\";\n\ninterface PillProps {\n  to: string;\n  exact?: boolean;\n  children: string;\n}\n\nconst Pill = (props: PillProps) => {\n  return (\n    <Route\n      path={props.to}\n      exact={props.exact}\n      children={rp => {\n        const klass = rp.match ? \"active\" : \"\";\n\n        return (\n          <li role=\"presentation\" className={klass}>\n            <Link to={props.to}>{props.children}</Link>\n          </li>\n        );\n      }}\n    />\n  );\n};\n\nexport const SideNav = () => (\n  <ul className=\"nav nav-pills nav-stacked\">\n    <Pill to=\"/\" exact>\n      dashboard\n    </Pill>\n    <Pill to=\"/people\">dramatis personae</Pill>\n    <Pill to=\"/recent\">recent chatter</Pill>\n    <hr />\n    <Pill to=\"/quotes\">quotes</Pill>\n    <Pill to=\"/events\">events</Pill>\n  </ul>\n);\n","import React from \"react\";\n\nexport const Dashboard = () => (\n  <div className=\"panel panel-info\">\n    <div className=\"panel-heading\">\n      <h3 className=\"panel-title\">Why hello there</h3>\n    </div>\n    <div className=\"panel-body\">\n      {\"Pretend there's something awesome written here.\"}\n    </div>\n  </div>\n);\n","import React, {Component} from \"react\";\nimport {QueryRenderer, Environment} from \"react-relay\";\nimport {graphql} from \"babel-plugin-relay/macro\";\nimport {Link} from \"react-router-dom\";\n\nimport {getEnvironment, QueryResult} from \"./Transport\";\n\nimport {PeopleQuery} from \"./__generated__/PeopleQuery.graphql\";\n\nimport \"./People.css\";\n\ninterface User {\n  readonly name: string;\n  readonly presence: string;\n  readonly avatar: {image48: string | null};\n  readonly status: {readonly message: string | null};\n}\n\ninterface PersonProps {\n  user: User;\n  title: string;\n}\n\nconst Person = (props: PersonProps) => {\n  const {name, presence, avatar, status} = props.user;\n  const avatarURL = avatar.image48;\n  const presenceIcon =\n    presence === \"ACTIVE\"\n      ? \"pushbot-status-active fa-dot-circle-o\"\n      : \"pushbot-status-inactive fa-circle-o\";\n  const {message} = status;\n\n  return (\n    <div className=\"pushbot-person row\">\n      <div className=\"col-xs-1\">\n        <img src={avatarURL!} className=\"img-rounded\" alt=\"\" />\n      </div>\n      <div className=\"col-xs-11\">\n        <p>\n          <i\n            className={`fa pushbot-status ${presenceIcon}`}\n            aria-hidden=\"true\"\n          />\n          <Link to={`/people/${name}`} className=\"pushbot-person-name\">\n            {name}\n          </Link>\n          <span className=\"pushbot-person-title\">{props.title}</span>\n        </p>\n        <p className=\"pushbot-person-status-message\">{message}</p>\n      </div>\n    </div>\n  );\n};\n\nexport class People extends Component {\n  private environment: Environment;\n\n  constructor(props: {}) {\n    super(props);\n\n    this.environment = getEnvironment();\n  }\n\n  render() {\n    const query = graphql`\n      query PeopleQuery {\n        users {\n          all {\n            name\n            presence\n\n            avatar {\n              image48\n            }\n\n            status {\n              message\n              emoji\n            }\n          }\n        }\n\n        titles: documents(set: \"title\") {\n          all(criteria: {}) {\n            edges {\n              node {\n                text\n                subject\n              }\n            }\n          }\n        }\n      }\n    `;\n\n    return (\n      <QueryRenderer<PeopleQuery>\n        environment={this.environment}\n        query={query}\n        variables={{}}\n        render={this.renderResult}\n      />\n    );\n  }\n\n  renderResult({error, props}: QueryResult<PeopleQuery>) {\n    if (error) {\n      return <div>{error.message}</div>;\n    }\n\n    return (\n      <div>\n        <h3>Dramatis Personae</h3>\n        <blockquote className=\"blockquote-reverse\">\n          Maybe the <em>real</em> lab was the friends we made along the way.\n        </blockquote>\n        <ul className=\"list-group\">\n          {this.collateUsers(props).map(({user, title}) => {\n            return (\n              <li key={user.name} className=\"list-group-item\">\n                <Person user={user} title={title} />\n              </li>\n            );\n          })}\n        </ul>\n      </div>\n    );\n  }\n\n  collateUsers(\n    props: QueryResult<PeopleQuery>[\"props\"]\n  ): {user: User; title: string}[] {\n    if (!props) {\n      return [];\n    }\n\n    const titles = props.titles;\n    if (!titles) {\n      return [];\n    }\n\n    const titlesByUsername: {[username: string]: string} = {};\n    for (const title of titles.all.edges) {\n      if (title.node.subject) {\n        titlesByUsername[title.node.subject] = title.node.text;\n      }\n    }\n\n    const userData = props.users.all.map(user => {\n      return {user, title: titlesByUsername[user.name] || \"\"};\n    });\n\n    userData.sort((a, b) => a.user.name.localeCompare(b.user.name));\n\n    return userData;\n  }\n}\n","import React, {Component} from \"react\";\nimport Chartist from \"chartist\";\n\nChartist.plugins = Chartist.plugins || {};\nChartist.plugins.ctHtmlLabels = function() {\n  return function(chart: any) {\n    chart.on(\"draw\", function(context: any) {\n      if (context.type === \"label\") {\n        context.element.empty()._node.innerHTML = context.text;\n      }\n    });\n  };\n};\n\ninterface ChartProps {\n  data: Chartist.IChartistData;\n  options: Chartist.IBarChartOptions;\n}\n\nexport class Chart extends Component<ChartProps> {\n  private refElement?: HTMLElement | null;\n  private chart?: Chartist.IChartistBarChart;\n\n  render() {\n    return (\n      <div\n        className=\"ct-chart ct-golden-section\"\n        ref={c => {\n          this.refElement = c;\n        }}\n      />\n    );\n  }\n\n  componentDidMount() {\n    const options = this.props.options || {};\n    options.plugins = [Chartist.plugins.ctHtmlLabels()];\n\n    this.chart = new Chartist.Bar(this.refElement, this.props.data, options);\n  }\n\n  componentWillUnmount() {\n    this.chart && this.chart.detach();\n  }\n}\n","import React, {Component} from \"react\";\nimport {QueryRenderer, Environment} from \"react-relay\";\nimport {graphql} from \"babel-plugin-relay/macro\";\nimport EmojiConverter from \"emoji-js\";\n\nimport {getEnvironment, QueryResult} from \"./Transport\";\nimport {Chart} from \"./Chart\";\nimport {ProfileQuery} from \"./__generated__/ProfileQuery.graphql\";\n\nimport \"./Profile.css\";\n\ninterface ProfileProps {\n  match: {\n    params: {\n      name: string;\n    };\n  };\n}\n\ntype User = NonNullable<ProfileQuery[\"response\"][\"users\"][\"current\"]>;\n\ntype EmojiCount = User[\"topReactionsGiven\"] | User[\"topReactionsReceived\"];\n\nexport class Profile extends Component<ProfileProps> {\n  private environment: Environment;\n  private emoji: EmojiConverter;\n\n  constructor(props: ProfileProps) {\n    super(props);\n\n    this.environment = getEnvironment();\n    this.emoji = new EmojiConverter();\n\n    this.emoji.img_sets.apple.sheet = \"/sheet_apple_64.png\";\n    this.emoji.use_sheet = true;\n    this.emoji.include_title = true;\n  }\n\n  render() {\n    const query = graphql`\n      query ProfileQuery($name: String!, $titleCriteria: Criteria!) {\n        users {\n          current: withName(name: $name) {\n            avatar {\n              image192\n            }\n\n            topReactionsReceived(limit: 10) {\n              count\n              emoji {\n                name\n                url\n              }\n            }\n\n            topReactionsGiven(limit: 10) {\n              count\n              emoji {\n                name\n                url\n              }\n            }\n          }\n        }\n\n        titles: documents(set: \"title\") {\n          all(first: 100, criteria: $titleCriteria) {\n            edges {\n              node {\n                text\n              }\n            }\n          }\n        }\n\n        quotes: documents(set: \"quote\") {\n          rank(speaker: $name)\n        }\n      }\n    `;\n\n    const username = this.props.match.params.name;\n    const variables = {\n      name: username,\n      titleCriteria: {subject: username},\n    };\n\n    return (\n      <QueryRenderer<ProfileQuery>\n        environment={this.environment}\n        query={query}\n        variables={variables}\n        render={this.renderResult}\n      />\n    );\n  }\n\n  renderResult = ({error, props}: QueryResult<ProfileQuery>) => {\n    if (error) {\n      return <div>{error.message}</div>;\n    }\n\n    if (!props) {\n      return (\n        <div className=\"pushbot-loading\">\n          <i className=\"fa fa-circle-o-notch fa-spin\" aria-hidden=\"true\" />\n          sluuuuurp\n        </div>\n      );\n    }\n\n    const user = props.users.current;\n    if (!user) {\n      return null;\n    }\n\n    const avatar = user.avatar.image192 || \"\";\n\n    return (\n      <div className=\"pushbot-profile row\">\n        <div className=\"col-md-6\">\n          <img\n            className=\"pushbot-profile-avatar img-responsive img-rounded\"\n            src={avatar}\n            alt=\"\"\n          />\n          {this.renderReactionsReceivedChart(user)}\n          {this.renderReactionsGivenChart(user)}\n        </div>\n        <div className=\"col-md-6\">\n          <h1 className=\"pushbot-profile-username\">\n            @{this.props.match.params.name}\n          </h1>\n          {this.renderTitles(props)}\n          {this.renderQuoteRank(props)}\n        </div>\n      </div>\n    );\n  };\n\n  renderReactionsGivenChart(user: User) {\n    return this.renderReactionChart(\n      user.topReactionsGiven,\n      \"Emoji reactions given\"\n    );\n  }\n\n  renderReactionsReceivedChart(user: User) {\n    return this.renderReactionChart(\n      user.topReactionsReceived,\n      \"Emoji reactions received\"\n    );\n  }\n\n  renderReactionChart(results: EmojiCount, name: string) {\n    const data = {\n      labels: results.map(each => {\n        if (each.emoji.url) {\n          return `<img class=\"emoji\" alt=\"${each.emoji.name}\" src=\"${each.emoji.url}\" title=\"${each.emoji.name}\">`;\n        }\n\n        return this.emoji.replace_colons(`:${each.emoji.name}:`);\n      }),\n      series: [results.map(each => each.count)],\n    };\n\n    const options = {\n      low: 0,\n      axisY: {\n        onlyInteger: true,\n      },\n    };\n\n    return (\n      <p className=\"pushbot-profile-reaction-chart\">\n        <h4>{name}</h4>\n        <Chart data={data} options={options} />\n      </p>\n    );\n  }\n\n  renderTitles(props: NonNullable<QueryResult<ProfileQuery>[\"props\"]>) {\n    const edges = props.titles ? props.titles.all.edges : [];\n    if (edges.length === 0) {\n      return (\n        <p className=\"pushbot-profile-titles-empty\">\n          No titles yet. Set one with{\" \"}\n          <code>!settitle {this.props.match.params.name}: ...</code>.\n        </p>\n      );\n    }\n\n    return (\n      <p className=\"pushbot-profile-titles\">\n        {edges.map(t => this.titleFrom(t.node.text))}\n      </p>\n    );\n  }\n\n  renderQuoteRank(props: NonNullable<QueryResult<ProfileQuery>[\"props\"]>) {\n    if (!props.quotes) {\n      return (\n        <p className=\"pushbot-profile-quoterank\">\n          You have not yet been immortalized in the quotefile.\n        </p>\n      );\n    }\n\n    const rank = props.quotes.rank;\n    return (\n      <p className=\"pushbot-profile-quoterank\">\n        Rank #{rank} in the quotefile.\n      </p>\n    );\n  }\n\n  titleFrom(title: string) {\n    if (/^https?:/.test(title)) {\n      return (\n        <img\n          className=\"pushbot-profile-title img-responsive\"\n          alt=\"\"\n          src={title}\n        />\n      );\n    }\n\n    return <span className=\"pushbot-profile-title\">{title}</span>;\n  }\n}\n","import React, {Component} from \"react\";\nimport {QueryRenderer, Environment} from \"react-relay\";\nimport {graphql} from \"babel-plugin-relay/macro\";\n\nimport {getEnvironment, QueryResult} from \"./Transport\";\nimport {QuotesPageQuery} from \"./__generated__/QuotesPageQuery.graphql\";\nimport {QuotesRandomQuery} from \"./__generated__/QuotesRandomQuery.graphql\";\n\nimport \"./Quotes.css\";\n\ninterface QueryModeCases<R> {\n  containing?(): R;\n  by?(): R;\n  about?(): R;\n  default?(): R;\n}\n\ninterface QueryMode {\n  when<R>(cases: QueryModeCases<R>): R | null;\n  label: string;\n}\n\nconst CONTAINING: QueryMode = {\n  when<R>(cases: QueryModeCases<R>): R | null {\n    return (cases.containing || cases.default || (() => null))();\n  },\n\n  label: \"containing\",\n};\n\nconst BY = {\n  when<R>(cases: QueryModeCases<R>): R | null {\n    return (cases.by || cases.default || (() => null))();\n  },\n\n  label: \"by\",\n};\n\nconst ABOUT = {\n  when<R>(cases: QueryModeCases<R>): R | null {\n    return (cases.about || cases.default || (() => null))();\n  },\n\n  label: \"about\",\n};\n\nconst modes: QueryMode[] = [CONTAINING, BY, ABOUT];\n\ntype IQuotes = NonNullable<\n  QuotesPageQuery[\"response\"][\"documents\"]\n>[\"all\"][\"edges\"];\n\ninterface QuoteProps {\n  text: string;\n}\n\nconst Quote = (props: QuoteProps) => (\n  <blockquote className=\"pushbot-quote\">\n    <p>{props.text}</p>\n  </blockquote>\n);\n\ninterface QuotePageProps {\n  query: string;\n  people: string[];\n  mode: QueryMode;\n}\n\nclass QuotePage extends Component<QuotePageProps> {\n  private environment: Environment;\n  private lastTotal: number | null;\n  private lastResults: IQuotes | null;\n\n  constructor(props: QuotePageProps) {\n    super(props);\n    this.environment = getEnvironment();\n    this.lastTotal = null;\n    this.lastResults = null;\n  }\n\n  render() {\n    const query = graphql`\n      query QuotesPageQuery($c: Criteria!) {\n        documents(set: \"quote\") {\n          all(criteria: $c, first: 20) {\n            edges {\n              node {\n                id\n                text\n              }\n            }\n\n            pageInfo {\n              count\n              hasNextPage\n            }\n          }\n        }\n      }\n    `;\n\n    const criteria: any = {query: this.props.query};\n    this.props.mode.when({\n      by: () => {\n        criteria.speakers = this.props.people;\n      },\n      about: () => {\n        criteria.mentions = this.props.people;\n      },\n    });\n\n    const variables: QuotesPageQuery[\"variables\"] = {\n      c: criteria,\n    };\n\n    return (\n      <QueryRenderer<QuotesPageQuery>\n        environment={this.environment}\n        query={query}\n        variables={variables}\n        render={this.renderResult}\n      />\n    );\n  }\n\n  renderResult = ({error, props}: QueryResult<QuotesPageQuery>) => {\n    if (error) {\n      return <div>{error.message}</div>;\n    }\n\n    if (!props && !this.lastResults) {\n      return (\n        <div className=\"pushbot-loading\">\n          <i className=\"fa fa-circle-o-notch fa-spin\" aria-hidden=\"true\" />\n          performing query\n        </div>\n      );\n    } else if (!props && this.lastResults && this.lastTotal) {\n      return this.renderDocuments(this.lastTotal, this.lastResults);\n    } else if (props) {\n      this.lastTotal = props.documents!.all.pageInfo.count;\n      this.lastResults = props.documents!.all.edges;\n\n      return this.renderDocuments(this.lastTotal, this.lastResults);\n    }\n  };\n\n  renderDocuments(total: number, documents: IQuotes) {\n    const quotes = documents.map(document => {\n      return <Quote key={document.node.id!} text={document.node.text} />;\n    });\n\n    const more = documents.length < total ? \"the first of\" : \"\";\n    const plural = total === 1 ? `matching quote` : `matching quotes`;\n\n    return (\n      <div className=\"pushbot-results\">\n        <div className=\"well well-sm\">\n          <p>\n            Showing {more} <strong>{total}</strong> {plural}.\n          </p>\n        </div>\n        {quotes}\n      </div>\n    );\n  }\n}\n\ninterface RandomQuoteState {\n  environment: Environment;\n}\n\nclass RandomQuote extends Component<{}, RandomQuoteState> {\n  private lastQuote: string | null;\n\n  constructor() {\n    super({});\n\n    this.lastQuote = null;\n    this.state = {\n      environment: getEnvironment(),\n    };\n  }\n\n  render() {\n    const query = graphql`\n      query QuotesRandomQuery {\n        documents(set: \"quote\") {\n          random(criteria: {}) {\n            found\n            text\n          }\n        }\n      }\n    `;\n\n    return (\n      <QueryRenderer<QuotesRandomQuery>\n        environment={this.state.environment}\n        query={query}\n        variables={{}}\n        render={this.renderResult}\n      />\n    );\n  }\n\n  renderResult = ({error, props}: QueryResult<QuotesRandomQuery>) => {\n    if (error) {\n      return <div>{error.message}</div>;\n    }\n\n    const quoteText = props ? props.documents!.random.text : this.lastQuote;\n\n    if (!quoteText) {\n      return null;\n    }\n\n    this.lastQuote = quoteText;\n\n    return (\n      <div className=\"pushbot-random-quote\">\n        <div className=\"well well-sm\">\n          <p>\n            Type a search term above to find specific quotes. In the meantime,\n            enjoy this random quote.\n          </p>\n          <button type=\"button\" className=\"btn btn-sm\" onClick={this.another}>\n            <i className=\"fa fa-refresh\" aria-hidden=\"true\" />\n            Another\n          </button>\n        </div>\n        <Quote text={quoteText} />\n      </div>\n    );\n  };\n\n  another = () => {\n    this.setState({\n      environment: getEnvironment(),\n    });\n  };\n}\n\ninterface Search {\n  query: string;\n  people: string;\n  mode: QueryMode;\n}\n\nexport class Quotes extends Component {\n  readSearch(): Search {\n    const params = new URLSearchParams(window.location.search);\n\n    let mode = CONTAINING;\n    let people = \"\";\n    if (params.has(\"by\")) {\n      mode = BY;\n      people = params.get(\"by\")!;\n    } else if (params.has(\"about\")) {\n      mode = ABOUT;\n      people = params.get(\"about\")!;\n    }\n\n    return {\n      query: params.get(\"q\") || \"\",\n      people,\n      mode,\n    };\n  }\n\n  writeSearch(changes: Partial<Search>) {\n    const previous = this.readSearch();\n    const current = Object.assign(previous, changes);\n\n    const params = new URLSearchParams();\n\n    current.mode.when({\n      by: () => params.set(\"by\", current.people),\n      about: () => params.set(\"about\", current.people),\n    });\n    if (current.query.length) {\n      params.set(\"q\", current.query);\n    }\n\n    const nextSearch = params.toString();\n    const nextURL =\n      window.location.protocol +\n      \"//\" +\n      window.location.host +\n      window.location.pathname +\n      (nextSearch.length > 0 ? \"?\" + nextSearch : \"\") +\n      window.location.hash;\n\n    if (window.history.replaceState) {\n      window.history.replaceState({}, \"\", nextURL);\n    } else {\n      window.location.href = nextURL;\n    }\n    this.forceUpdate();\n  }\n\n  render() {\n    const search = this.readSearch();\n    const showPeople = search.mode.when({\n      containing: () => false,\n      by: () => true,\n      about: () => true,\n    });\n\n    return (\n      <div>\n        <form\n          className={`pushbot-quote-form form-inline pushbot-mode-${search.mode.label}`}\n        >\n          <select\n            className=\"pushbot-quote-mode form-control\"\n            value={search.mode.label}\n            onChange={this.didChangeMode}\n          >\n            {modes.map((mode, index) => {\n              return (\n                <option key={index} value={mode.label}>\n                  {mode.label}\n                </option>\n              );\n            })}\n          </select>\n          {showPeople && (\n            <input\n              type=\"text\"\n              className=\"form-control\"\n              id=\"pushbot-quote-people\"\n              placeholder=\"fenris, iguanaditty\"\n              value={search.people}\n              onChange={this.didChangePeople}\n            />\n          )}\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            id=\"pushbot-quote-query\"\n            placeholder='\"query\"'\n            value={search.query}\n            onChange={this.didChangeQuery}\n          />\n        </form>\n        {this.renderResult(search)}\n      </div>\n    );\n  }\n\n  renderResult(search: Search) {\n    const people = search.people\n      .split(/[,+;]|\\s/)\n      .map(person => person.replace(/^@/, \"\"))\n      .map(person => person.trim())\n      .filter(person => person.length > 0);\n\n    const noQuery = search.mode.when({\n      containing: () => search.query.length === 0,\n      by: () => people.length === 0,\n      about: () => people.length === 0,\n    });\n\n    if (noQuery) {\n      return <RandomQuote />;\n    } else {\n      return (\n        <QuotePage mode={search.mode} people={people} query={search.query} />\n      );\n    }\n  }\n\n  didChangeMode = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const mode = modes.find(mode => mode.label === event.target.value);\n    this.writeSearch({mode});\n  };\n\n  didChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.writeSearch({query: event.target.value});\n  };\n\n  didChangePeople = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.writeSearch({people: event.target.value});\n  };\n}\n","import React, {Component} from \"react\";\nimport {QueryRenderer, Environment} from \"react-relay\";\nimport {graphql} from \"babel-plugin-relay/macro\";\nimport CopyToClipboard from \"react-copy-to-clipboard\";\n\nimport {getEnvironment, QueryResult} from \"./Transport\";\n\nimport {EventsQuery} from \"./__generated__/EventsQuery.graphql\";\n\nimport \"./Events.css\";\n\ninterface FeedFormProps {\n  ready: boolean;\n  feedURL: string;\n}\n\ninterface FeedFormState {\n  copied: boolean;\n}\n\nclass FeedForm extends Component<FeedFormProps, FeedFormState> {\n  state = {\n    copied: false,\n  };\n\n  render() {\n    const btnClass = this.state.copied ? \"btn btn-success\" : \"btn btn-default\";\n    const btnMessage = this.state.copied ? \"Copied\" : \"Copy\";\n\n    return (\n      <p className=\"form-inline\">\n        <input\n          type=\"text\"\n          id=\"pushbot-events-feedurl\"\n          className=\"form-control\"\n          value={this.props.feedURL}\n          readOnly\n        />\n        <CopyToClipboard\n          text={this.props.feedURL}\n          onCopy={() => this.setState({copied: true})}\n        >\n          <button className={btnClass} disabled={!this.props.ready}>\n            {btnMessage}\n          </button>\n        </CopyToClipboard>\n      </p>\n    );\n  }\n}\n\nexport class Events extends Component {\n  private environment: Environment;\n\n  constructor() {\n    super({});\n    this.environment = getEnvironment();\n  }\n\n  render() {\n    const query = graphql`\n      query EventsQuery {\n        calendarURL\n      }\n    `;\n\n    return (\n      <QueryRenderer<EventsQuery>\n        environment={this.environment}\n        query={query}\n        variables={{}}\n        render={this.renderResult}\n      />\n    );\n  }\n\n  renderResult = (result: QueryResult<EventsQuery>) => {\n    return (\n      <div>\n        <h3>Goings On and Happenings</h3>\n        {this.renderResultBody(result)}\n      </div>\n    );\n  };\n\n  renderResultBody({error, props}: QueryResult<EventsQuery>) {\n    if (error) {\n      return <div>{error.message}</div>;\n    }\n\n    const ready = Boolean(props);\n    const feedURL = props ? props.calendarURL : \"...\";\n\n    return (\n      <div>\n        <p>\n          Keep up with #~s events planned in the <code>#events</code> channel\n          with your own, personal iCal feed.\n        </p>\n        <FeedForm ready={ready} feedURL={feedURL} />\n        <p>\n          Subscribe to this URL with any compatible calendar software, including{\" \"}\n          <a\n            href=\"https://calendar.google.com/calendar/r/settings/addbyurl\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Google calendar\n          </a>\n          .\n        </p>\n      </div>\n    );\n  }\n}\n","import React, {useContext} from \"react\";\n\ninterface IRole {\n  readonly name: string;\n}\n\nexport interface IUser {\n  readonly id: string;\n  readonly name: string;\n  readonly roles: ReadonlyArray<IRole>;\n}\n\nexport const UserContext = React.createContext<IUser | null>(null);\n\ninterface RoleProps {\n  name: string;\n  children: JSX.Element;\n}\n\nexport const Role = (props: RoleProps) => {\n  const user = useContext(UserContext);\n  if (!user) return null;\n\n  const match = user.roles.some(role => role.name === props.name);\n  if (!match) return null;\n\n  return props.children;\n};\n","import React, {Component} from \"react\";\nimport {QueryRenderer, commitMutation} from \"react-relay\";\nimport {Environment} from \"relay-runtime\";\nimport {graphql} from \"babel-plugin-relay/macro\";\nimport moment from \"moment\";\n\nimport {getEnvironment, QueryResult} from \"./Transport\";\nimport {Role} from \"./Role\";\n\nimport {RecentChannelQuery} from \"./__generated__/RecentChannelQuery.graphql\";\nimport {RecentHistoryQuery} from \"./__generated__/RecentHistoryQuery.graphql\";\n\nimport \"./Recent.css\";\n\ntype ILine = NonNullable<\n  RecentHistoryQuery[\"response\"][\"cache\"][\"linesForChannel\"]\n> extends ReadonlyArray<infer E>\n  ? E\n  : void;\n\nconst ALL = Symbol(\"all\");\n\ntype Change = ILine | typeof ALL;\n\ninterface Disposable {\n  dispose(): void;\n}\n\nclass Selection {\n  public isSelecting: boolean;\n  private ids: Set<string>;\n  private subs: ((arg: Change) => any)[];\n\n  constructor() {\n    this.ids = new Set();\n    this.isSelecting = false;\n    this.subs = [];\n  }\n\n  onDidChange(cb: (arg: Change) => any): Disposable {\n    this.subs.push(cb);\n    return {\n      dispose: () => {\n        const index = this.subs.indexOf(cb);\n        this.subs.splice(index, 1);\n      },\n    };\n  }\n\n  didChange(payload: Change) {\n    for (const sub of this.subs) {\n      sub(payload);\n    }\n  }\n\n  isSelected(line: ILine): boolean {\n    return this.ids.has(line.id!);\n  }\n\n  select(line: ILine): boolean {\n    const wasSelected = this.ids.has(line.id!);\n    this.ids.add(line.id!);\n    if (!wasSelected) this.didChange(line);\n    return !wasSelected;\n  }\n\n  startSelecting() {\n    this.isSelecting = true;\n  }\n\n  stopSelecting() {\n    this.isSelecting = false;\n  }\n\n  toggle(line: ILine) {\n    if (!this.ids.delete(line.id!)) {\n      this.ids.add(line.id!);\n    }\n    this.didChange(line);\n  }\n\n  clear() {\n    this.ids.clear();\n    this.didChange(ALL);\n  }\n\n  getLineIDs(): string[] {\n    return Array.from(this.ids);\n  }\n\n  isEmpty(): boolean {\n    return this.ids.size === 0;\n  }\n\n  describe(): string {\n    if (this.ids.size === 0) {\n      return \"nothing selected\";\n    } else if (this.ids.size === 1) {\n      return \"1 line selected\";\n    } else {\n      return `${this.ids.size} lines selected`;\n    }\n  }\n}\n\ninterface LineProps {\n  previous?: ILine;\n  line: ILine;\n  selection: Selection;\n}\n\nclass Line extends Component<LineProps> {\n  private sub?: Disposable;\n\n  componentDidMount() {\n    this.sub = this.props.selection.onDidChange(kind => {\n      if (kind === ALL) this.forceUpdate();\n    });\n  }\n\n  componentWillUnmount() {\n    this.sub && this.sub.dispose();\n  }\n\n  render() {\n    const {line, previous} = this.props;\n    const ts = moment(parseInt(line.timestamp));\n    const sameSpeaker = previous && previous.speaker!.id === line.speaker!.id;\n\n    const lineClasses = [\"pushbot-line\"];\n    if (this.props.selection.isSelected(line))\n      lineClasses.push(\"pushbot-line-selected\");\n\n    let speakerBanner = null;\n    if (!sameSpeaker) {\n      speakerBanner = (\n        <div className=\"pushbot-speaker-banner\">\n          <span className=\"pushbot-line-avatar\">\n            <img src={line.speaker!.avatar!.image32!} alt=\"\" />\n          </span>\n          <span className=\"pushbot-line-name\">{line.speaker!.name}</span>\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={lineClasses.join(\" \")}\n        onMouseDown={this.didMouseDown}\n        onMouseMove={this.didMouseMove}\n      >\n        {speakerBanner}\n        <span className=\"pushbot-line-timestamp\">{ts.format(\"h:mm:ss\")}</span>\n        <span className=\"pushbot-line-text\">{line.text}</span>\n      </div>\n    );\n  }\n\n  didMouseDown = (event: React.MouseEvent<HTMLDivElement>) => {\n    if (event.button !== 0) return;\n\n    event.preventDefault();\n    this.props.selection.toggle(this.props.line);\n    this.props.selection.startSelecting();\n    this.forceUpdate();\n  };\n\n  didMouseMove = (event: React.MouseEvent) => {\n    if (!this.props.selection.isSelecting) return;\n\n    event.preventDefault();\n    if (this.props.selection.select(this.props.line)) {\n      this.forceUpdate();\n    }\n  };\n}\n\ninterface HistoryProps {\n  lines: ReadonlyArray<ILine> | null;\n  selection: Selection;\n}\n\nclass History extends Component<HistoryProps> {\n  private bottom?: HTMLElement | null;\n\n  componentDidMount() {\n    window.addEventListener(\"mouseup\", this.didMouseUp);\n\n    this.bottom && this.bottom.scrollIntoView();\n  }\n\n  componentDidUpdate() {\n    this.bottom && this.bottom.scrollIntoView();\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"mouseup\", this.didMouseUp);\n  }\n\n  render() {\n    if (this.props.lines === null) {\n      return this.renderLoading();\n    } else {\n      return this.renderLines();\n    }\n  }\n\n  renderLoading() {\n    return (\n      <div className=\"pushbot-history pushbot-loading\">\n        <i className=\"fa fa-circle-o-notch fa-spin\" aria-hidden=\"true\" />\n        loading\n      </div>\n    );\n  }\n\n  renderLines() {\n    return (\n      <div\n        className=\"pushbot-history pushbot-history-loaded\"\n        onMouseOut={this.didMouseOut}\n      >\n        {this.props.lines!.map((line, i) => {\n          return (\n            <Line\n              key={line.id!}\n              line={line}\n              previous={this.props.lines![i - 1]}\n              selection={this.props.selection}\n            />\n          );\n        })}\n        <div\n          ref={element => {\n            this.bottom = element;\n          }}\n        />\n      </div>\n    );\n  }\n\n  didMouseUp = () => {\n    this.props.selection.stopSelecting();\n  };\n\n  didMouseOut = () => {\n    this.props.selection.stopSelecting();\n  };\n}\n\ninterface ActionBarProps {\n  environment: Environment;\n  channel: string;\n  selection: Selection;\n}\n\nclass ActionBar extends Component<ActionBarProps> {\n  private sub?: Disposable;\n  private didSubmitQuote: () => void;\n  private didSubmitLim: () => void;\n\n  constructor(props: ActionBarProps) {\n    super(props);\n\n    this.didSubmitQuote = this.submit.bind(this, \"quote\");\n    this.didSubmitLim = this.submit.bind(this, \"lim\");\n  }\n\n  componentDidMount() {\n    this.sub = this.props.selection.onDidChange(() => this.forceUpdate());\n  }\n\n  componentWillUnmount() {\n    this.sub && this.sub.dispose();\n  }\n\n  render() {\n    const textClassNames = [\"text-muted\"];\n    let clearBtn = null;\n    let disable = true;\n    if (this.props.selection.isEmpty()) {\n      textClassNames.push(\"pushbot-empty\");\n    } else {\n      disable = false;\n      clearBtn = (\n        <button className=\"btn btn-link\" onClick={this.didClear}>\n          clear\n        </button>\n      );\n    }\n\n    return (\n      <div className=\"pushbot-recent-actions\">\n        <p className={textClassNames.join(\" \")}>\n          {this.props.selection.describe()}\n          {clearBtn}\n        </p>\n        <div className=\"btn-group pushbot-recent-actions\">\n          <Role name=\"quote pontiff\">\n            <button\n              className=\"btn btn-primary\"\n              disabled={disable}\n              onClick={this.didSubmitQuote}\n            >\n              Quote\n            </button>\n          </Role>\n          <Role name=\"poet laureate\">\n            <button\n              className=\"btn btn-primary\"\n              disabled={disable}\n              onClick={this.didSubmitLim}\n            >\n              Limerick\n            </button>\n          </Role>\n        </div>\n      </div>\n    );\n  }\n\n  didClear = () => {\n    this.props.selection.clear();\n  };\n\n  submit(set: string) {\n    if (!this.props.channel) return;\n\n    const mutation = graphql`\n      mutation RecentSubmitMutation(\n        $set: String!\n        $channel: String!\n        $lines: [ID!]!\n      ) {\n        createDocument(set: $set, channel: $channel, lines: $lines) {\n          id\n        }\n      }\n    `;\n\n    const variables = {\n      set,\n      channel: this.props.channel,\n      lines: this.props.selection.getLineIDs(),\n    };\n\n    commitMutation(this.props.environment, {\n      mutation,\n      variables,\n      onCompleted: () => this.props.selection.clear(),\n    });\n  }\n}\n\ninterface RecentState {\n  environment: Environment;\n  currentChannel: string | null;\n  selection: Selection;\n}\n\nexport class Recent extends Component<{}, RecentState> {\n  private knownChannels: ReadonlyArray<string> | null;\n  private history: ReadonlyArray<ILine> | null;\n\n  constructor() {\n    super({});\n\n    this.knownChannels = null;\n    this.history = null;\n\n    this.state = {\n      environment: getEnvironment(),\n      currentChannel: null,\n      selection: new Selection(),\n    };\n    this.didChangeChannel = this.didChangeChannel.bind(this);\n  }\n\n  render() {\n    if (this.knownChannels === null) {\n      return this.renderChannelQuery();\n    }\n\n    return this.renderHistoryQuery();\n  }\n\n  renderError(error: Error) {\n    return (\n      <div className=\"pushbot-recent pushbot-recent-error\">\n        <h3>Recent Chatter</h3>\n        <form className=\"pushbot-recent-form form-inline\">\n          <select\n            className=\"pushbot-recent-channel form-control\"\n            value=\"...\"\n            disabled\n          >\n            <option value=\"...\">...</option>\n          </select>\n        </form>\n        <div className=\"pushbot-error-message\">{error.message}</div>\n      </div>\n    );\n  }\n\n  renderChannelQuery() {\n    const query = graphql`\n      query RecentChannelQuery {\n        cache {\n          knownChannels\n        }\n      }\n    `;\n\n    return (\n      <QueryRenderer<RecentChannelQuery>\n        environment={this.state.environment}\n        query={query}\n        variables={{}}\n        render={this.renderChannelResult}\n      />\n    );\n  }\n\n  renderChannelResult = ({error, props}: QueryResult<RecentChannelQuery>) => {\n    if (error) {\n      return this.renderError(error);\n    }\n\n    const channelNames = props ? props.cache.knownChannels : this.knownChannels;\n    return this.renderCurrent(channelNames || [], null);\n  };\n\n  renderHistoryQuery() {\n    const query = graphql`\n      query RecentHistoryQuery($channel: String!) {\n        cache {\n          knownChannels\n          linesForChannel(channel: $channel) {\n            id\n            speaker {\n              id\n              name\n              avatar {\n                image32\n              }\n            }\n            timestamp\n            text\n          }\n        }\n      }\n    `;\n\n    const variables = {\n      channel: this.state.currentChannel || \"\",\n    };\n\n    return (\n      <QueryRenderer<RecentHistoryQuery>\n        environment={this.state.environment}\n        query={query}\n        variables={variables}\n        render={this.renderHistoryResult}\n      />\n    );\n  }\n\n  renderHistoryResult = ({error, props}: QueryResult<RecentHistoryQuery>) => {\n    if (error) {\n      return this.renderError(error);\n    }\n\n    const channelNames = props ? props.cache.knownChannels : this.knownChannels;\n    const history = props ? props.cache.linesForChannel : this.history;\n\n    return this.renderCurrent(channelNames, history);\n  };\n\n  renderCurrent(\n    channelNames: ReadonlyArray<string> | null,\n    history: ReadonlyArray<ILine> | null\n  ) {\n    if (channelNames) {\n      if (!this.state.currentChannel && channelNames.length > 0) {\n        setTimeout(() => this.setState({currentChannel: channelNames[0]}), 0);\n      }\n      this.knownChannels = channelNames;\n    }\n\n    if (history) {\n      this.history = history;\n    }\n\n    const displayChannelNames = channelNames || [\"...\"];\n    const displayChannel = this.state.currentChannel || \"...\";\n\n    return (\n      <div className=\"pushbot-recent\">\n        <h3>Recent Chatter</h3>\n        <form className=\"pushbot-recent-form form-inline\">\n          <label htmlFor=\"pushbot-recent-channel\">Channel</label>\n          <select\n            className=\"pushbot-recent-channel form-control\"\n            id=\"pushbot-recent-channel\"\n            value={displayChannel}\n            disabled={!channelNames}\n            onChange={this.didChangeChannel}\n          >\n            {displayChannelNames.map(name => {\n              return (\n                <option key={name} value={name}>\n                  {name}\n                </option>\n              );\n            })}\n          </select>\n          <button\n            className=\"btn btn-default pushbot-recent-refresh\"\n            onClick={this.refresh}\n          >\n            <i className=\"fa fa-refresh\" aria-hidden /> Refresh\n          </button>\n        </form>\n        <History lines={history} selection={this.state.selection} />\n        <ActionBar\n          environment={this.state.environment}\n          channel={this.state.currentChannel || \"\"}\n          selection={this.state.selection}\n        />\n      </div>\n    );\n  }\n\n  didChangeChannel = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    this.history = null;\n    this.state.selection.clear();\n    this.setState({currentChannel: event.target.value});\n  };\n\n  refresh = (event: React.MouseEvent<HTMLButtonElement>) => {\n    event.preventDefault();\n    this.setState({environment: getEnvironment()});\n  };\n}\n","import React from \"react\";\nimport {Route} from \"react-router-dom\";\n\nimport {SideNav} from \"./SideNav\";\nimport {Dashboard} from \"./Dashboard\";\nimport {People} from \"./People\";\nimport {Profile} from \"./Profile\";\nimport {Quotes} from \"./Quotes\";\nimport {Events} from \"./Events\";\nimport {Recent} from \"./Recent\";\nimport {UserContext, IUser} from \"./Role\";\n\ninterface AuthenticatedProps {\n  user: IUser;\n}\n\nexport const Authenticated = (props: AuthenticatedProps) => (\n  <UserContext.Provider value={props.user}>\n    <div className=\"row\">\n      <div className=\"col-md-2\">\n        <SideNav />\n      </div>\n      <div className=\"col-md-8\">\n        <Route path=\"/\" component={Dashboard} exact />\n        <Route path=\"/people\" component={People} exact />\n        <Route path=\"/people/:name\" component={Profile} />\n        <Route path=\"/quotes\" component={Quotes} />\n        <Route path=\"/events\" component={Events} />\n        <Route path=\"/recent\" component={Recent} />\n      </div>\n    </div>\n  </UserContext.Provider>\n);\n","import React from \"react\";\nimport {Link} from \"react-router-dom\";\n\nimport \"./Banner.css\";\n\nconst LOGOUT_URL = `${process.env.REACT_APP_API_BASE_URL}/logout?backTo=true`;\n\ninterface BannerProps {\n  username: string;\n  title: string;\n  avatar: string;\n}\n\nexport const Banner = (props: BannerProps) => {\n  let accountControl = null;\n\n  if (props.username) {\n    let accountElements = [];\n    if (props.title) {\n      accountElements.push(\n        <span key=\"0\" className=\"pushbot-navbar-title\">\n          {props.title}\n        </span>\n      );\n      accountElements.push(\n        <i\n          key=\"1\"\n          className=\"fa fa-circle pushbot-navbar-separator\"\n          aria-hidden=\"true\"\n        />\n      );\n    }\n    accountElements.push(\n      <Link\n        to={`/people/${props.username}`}\n        key=\"2\"\n        className=\"pushbot-navbar-username\"\n      >\n        @{props.username}\n      </Link>\n    );\n\n    accountControl = (\n      <ul className=\"nav navbar-nav navbar-right\">\n        <li>\n          <p className=\"navbar-text\">{accountElements}</p>\n        </li>\n        <li>\n          <img className=\"pushbot-navbar-avatar\" src={props.avatar} alt=\"\" />\n        </li>\n        <li>\n          <a href={LOGOUT_URL} className=\"pushbot-navbar-logout\">\n            <i className=\"fa fa-sign-out\" aria-hidden=\"true\" />\n            Log out\n          </a>\n        </li>\n      </ul>\n    );\n  }\n\n  return (\n    <nav className=\"navbar navbar-default\">\n      <div className=\"container-fluid\">\n        <div className=\"navbar-header\">\n          <button\n            type=\"button\"\n            className=\"navbar-toggle collapsed\"\n            data-toggle=\"collapse\"\n            data-target=\"#bs-example-navbar-collapse-1\"\n            aria-expanded=\"false\"\n          >\n            <span className=\"sr-only\">Toggle navigation</span>\n          </button>\n          <p className=\"navbar-brand\">pushbot party</p>\n        </div>\n\n        <div\n          className=\"collapse navbar-collapse\"\n          id=\"bs-example-navbar-collapse-1\"\n        >\n          {accountControl}\n        </div>\n      </div>\n    </nav>\n  );\n};\n","import React, {Component} from \"react\";\n\nimport \"./Login.css\";\n\ninterface LoginProps {\n  authUrl: string;\n}\n\nexport class Login extends Component<LoginProps> {\n  componentDidMount() {\n    document.children[0].classList.add(\"pushbot-login-bg\");\n  }\n\n  render() {\n    return (\n      <div className=\"jumbotron pushbot-login\">\n        <h1>Are there stairs in your house?</h1>\n        <p>\n          <a href={this.props.authUrl} className=\"pushbot-signin-slack\">\n            <img\n              alt=\"Sign in with Slack\"\n              height=\"40\"\n              width=\"172\"\n              src=\"https://platform.slack-edge.com/img/sign_in_with_slack.png\"\n              srcSet=\"https://platform.slack-edge.com/img/sign_in_with_slack.png 1x, https://platform.slack-edge.com/img/sign_in_with_slack@2x.png 2x\"\n            />\n          </a>\n          so that I may protect you from the\n          <a href=\"https://www.youtube.com/watch?v=7E0ot9iJm_k\">\n            terrible secret of space\n          </a>\n        </p>\n        <p className=\"text-muted\">\n          <em>\n            <small>\n              (Make sure that you choose <strong>#~s</strong> as your Slack\n              team)\n            </small>\n          </em>\n        </p>\n      </div>\n    );\n  }\n\n  componentWillUnmount() {\n    document.children[0].classList.remove(\"pushbot-login-bg\");\n  }\n}\n","import React, {Component} from \"react\";\nimport {QueryRenderer, Environment} from \"react-relay\";\nimport {graphql} from \"babel-plugin-relay/macro\";\nimport {BrowserRouter as Router} from \"react-router-dom\";\n\nimport {\n  getEnvironment,\n  AUTH_URL,\n  QueryResult,\n  isNetworkError,\n} from \"./Transport\";\nimport {Authenticated} from \"./Authenticated\";\nimport {Banner} from \"./Banner\";\nimport {Login} from \"./Login\";\n\nimport {AppQuery} from \"./__generated__/AppQuery.graphql\";\n\nimport \"./App.css\";\n\nexport class App extends Component {\n  private environment: Environment;\n\n  constructor(props: {}) {\n    super(props);\n    this.environment = getEnvironment();\n  }\n\n  render() {\n    const query = graphql`\n      query AppQuery {\n        users {\n          me {\n            id\n            name\n            avatar {\n              image48\n            }\n            roles {\n              name\n            }\n          }\n        }\n\n        title: documents(set: \"title\") {\n          mine {\n            text\n            found\n          }\n        }\n      }\n    `;\n\n    return (\n      <QueryRenderer<AppQuery>\n        environment={this.environment}\n        query={query}\n        variables={{}}\n        render={this.renderResult}\n      />\n    );\n  }\n\n  renderResult = (result: QueryResult<AppQuery>) => {\n    let body = null;\n    let username = \"\";\n    let title = \"\";\n    let avatar = \"\";\n\n    if (isNetworkError(result.error)) {\n      if (result.error.status === 401) {\n        const backTo = encodeURIComponent(document.location!.pathname);\n        body = <Login authUrl={`${AUTH_URL}?backTo=${backTo}`} />;\n      } else {\n        body = <div>{result.error.message}</div>;\n      }\n    } else if (result.props) {\n      const user = result.props.users.me;\n      username = user.name;\n      if (result.props.title) {\n        title = result.props.title.mine.text;\n      }\n      if (user.avatar && user.avatar.image48) {\n        avatar = user.avatar.image48;\n      }\n\n      body = <Authenticated user={user} />;\n    } else {\n      body = (\n        <div className=\"pushbot-loading\">\n          <i className=\"fa fa-circle-o-notch fa-spin\" aria-hidden=\"true\" />\n          loading\n        </div>\n      );\n    }\n\n    return (\n      <Router>\n        <div className=\"container-fluid\">\n          <div className=\"row\">\n            <Banner username={username} title={title} avatar={avatar} />\n          </div>\n          {body}\n        </div>\n      </Router>\n    );\n  };\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as {env: {[key: string]: string}}).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import \"bootstrap/dist/css/bootstrap.css\";\n\nimport \"jquery\";\nimport \"popper.js\";\nimport \"bootstrap\";\nimport \"@fortawesome/fontawesome-free\";\nimport \"./index.css\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {App} from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}