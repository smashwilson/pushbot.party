{"version":3,"sources":["__generated__/PeopleQuery.graphql.ts","__generated__/ProfileQuery.graphql.ts","__generated__/RandomQuoteQuery.graphql.ts","__generated__/QuotePageQuery.graphql.ts","__generated__/EventsQuery.graphql.ts","__generated__/ActionBarSubmitMutation.graphql.ts","__generated__/AppQuery.graphql.ts","common/Transport.ts","SideNav.tsx","dashboard/Dashboard.tsx","people/Person.tsx","people/People.tsx","common/Chart.tsx","profile/Profile.tsx","quotes/queryMode.ts","quotes/Quote.tsx","quotes/RandomQuote.tsx","quotes/QuotePage.tsx","quotes/Quotes.tsx","events/FeedForm.tsx","events/Events.tsx","recent/queryTypes.ts","recent/selection.ts","recent/Line.tsx","recent/History.tsx","common/Role.tsx","recent/ActionBar.tsx","recent/Recent.tsx","Authenticated.tsx","Banner.tsx","Login.tsx","App.tsx","serviceWorker.ts","index.tsx","__generated__/RecentChannelQuery.graphql.ts","__generated__/RecentHistoryQuery.graphql.ts"],"names":["__webpack_require__","r","__webpack_exports__","node","v0","kind","alias","name","args","storageKey","v1","v2","concreteType","plural","selections","v3","v4","value","v5","v6","v7","v8","fragment","type","metadata","argumentDefinitions","operation","params","operationKind","id","text","hash","defaultValue","variableName","v9","v10","v11","API_URL","concat","process","AUTH_URL","NETWORK_ERROR_MARKER","Symbol","createNetworkError","_callee","message","response","err","regenerator_default","a","wrap","_context","prev","next","Error","status","sent","marker","abrupt","stop","_callee2","request","variables","_context2","fetch","method","headers","content-type","credentials","body","JSON","stringify","query","ok","json","source","RecordSource","network","Network","create","getEnvironment","store","Store","Environment","Pill","props","react_default","createElement","role","className","react_router_dom","to","exact","activeClassName","children","SideNav","SideNav_Pill","Dashboard","Person","_props$user","user","presence","avatar","avatarURL","image48","presenceIcon","src","alt","aria-hidden","title","People","_Component","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","environment","renderResult","_ref","error","collateUsers","map","_ref2","key","inherits","createClass","_graphql","react_relay","render","titles","titlesByUsername","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","all","edges","iterator","done","subject","return","userData","users","sort","b","localeCompare","Component","Chartist","plugins","ctHtmlLabels","chart","on","context","element","empty","_node","innerHTML","Chart","_getPrototypeOf2","_len","arguments","length","Array","_key","apply","refElement","_this2","ref","c","options","Bar","data","detach","Profile","emoji","current","image192","renderReactionsReceivedChart","renderReactionsGivenChart","match","renderTitles","renderQuoteRank","EmojiConverter","img_sets","apple","sheet","use_sheet","include_title","Profile_graphql","username","titleCriteria","renderReactionChart","topReactionsGiven","topReactionsReceived","results","labels","each","url","replace_colons","series","count","Chart_Chart","low","axisY","onlyInteger","_this3","t","titleFrom","quotes","rank","test","CONTAINING","when","cases","containing","default","label","BY","by","ABOUT","about","modes","Quote","RandomQuote","lastQuote","quoteText","documents","random","onClick","another","setState","state","RandomQuote_graphql","QuotePage","lastTotal","lastResults","renderDocuments","pageInfo","QuotePage_graphql","criteria","mode","speakers","people","mentions","total","document","more","Quotes","didChangeMode","event","find","target","writeSearch","didChangeQuery","didChangePeople","URLSearchParams","window","location","search","has","get","changes","previous","readSearch","assign","set","nextSearch","toString","nextURL","protocol","host","pathname","history","replaceState","href","forceUpdate","showPeople","onChange","index","placeholder","split","person","replace","trim","filter","RandomQuote_RandomQuote","QuotePage_QuotePage","FeedForm","copied","btnClass","btnMessage","feedURL","readOnly","lib_default","onCopy","disabled","ready","Events","result","renderResultBody","Events_graphql","Boolean","calendarURL","FeedForm_FeedForm","rel","ALL","Selection","isSelecting","ids","subs","Set","cb","push","dispose","indexOf","splice","payload","sub","line","wasSelected","add","didChange","delete","clear","from","size","Line","didMouseDown","button","preventDefault","selection","toggle","startSelecting","didMouseMove","select","onDidChange","_this$props","ts","moment","parseInt","timestamp","sameSpeaker","speaker","lineClasses","isSelected","speakerBanner","image32","join","onMouseDown","onMouseMove","format","History","bottom","didMouseUp","stopSelecting","didMouseOut","addEventListener","scrollIntoView","removeEventListener","lines","renderLoading","renderLines","onMouseOut","i","Line_Line","UserContext","React","createContext","Role","useContext","roles","some","ActionBar","didSubmitQuote","didSubmitLim","didClear","submit","bind","assertThisInitialized","textClassNames","clearBtn","disable","isEmpty","describe","Role_Role","channel","mutation","ActionBar_graphql","getLineIDs","commitMutation","onCompleted","Recent","knownChannels","renderChannelResult","renderError","channelNames","cache","renderCurrent","renderHistoryResult","linesForChannel","didChangeChannel","currentChannel","refresh","renderChannelQuery","renderHistoryQuery","Recent_graphql","_graphql2","setTimeout","displayChannelNames","displayChannel","htmlFor","History_History","ActionBar_ActionBar","Authenticated","Provider","SideNav_SideNav","react_router","path","component","LOGOUT_URL","Banner","accountControl","accountElements","Fragment","data-toggle","data-target","aria-expanded","Login","classList","authUrl","height","width","srcSet","remove","App","backTo","encodeURIComponent","Login_Login","me","mine","Authenticated_Authenticated","Banner_Banner","App_graphql","hostname","ReactDOM","App_App","getElementById","navigator","serviceWorker","then","registration","unregister"],"mappings":"sIAAAA,EAAAC,EAAAC,GAmEA,IAAMC,EAAyB,WAC/B,IAAIC,EAAK,CACPC,KAAQ,cACRC,MAAS,KACTC,KAAQ,OACRC,KAAQ,KACRC,WAAc,MAEhBC,EAAK,CACHL,KAAQ,cACRC,MAAS,KACTC,KAAQ,WACRC,KAAQ,KACRC,WAAc,MAEhBE,EAAK,CACHN,KAAQ,cACRC,MAAS,KACTC,KAAQ,SACRE,WAAc,KACdD,KAAQ,KACRI,aAAgB,SAChBC,QAAU,EACVC,WAAc,CACZ,CACET,KAAQ,cACRC,MAAS,KACTC,KAAQ,UACRC,KAAQ,KACRC,WAAc,QAIpBM,EAAK,CACHV,KAAQ,cACRC,MAAS,KACTC,KAAQ,SACRE,WAAc,KACdD,KAAQ,KACRI,aAAgB,SAChBC,QAAU,EACVC,WAAc,CACZ,CACET,KAAQ,cACRC,MAAS,KACTC,KAAQ,UACRC,KAAQ,KACRC,WAAc,MAEhB,CACEJ,KAAQ,cACRC,MAAS,KACTC,KAAQ,QACRC,KAAQ,KACRC,WAAc,QAIpBO,EAAK,CACH,CACEX,KAAQ,UACRE,KAAQ,MACRU,MAAS,UAGbC,EAAK,CACH,CACEb,KAAQ,UACRE,KAAQ,WACRU,MAAS,KAGbE,EAAK,CACHd,KAAQ,cACRC,MAAS,KACTC,KAAQ,OACRC,KAAQ,KACRC,WAAc,MAEhBW,EAAK,CACHf,KAAQ,cACRC,MAAS,KACTC,KAAQ,UACRC,KAAQ,KACRC,WAAc,MAEhBY,EAAK,CACHhB,KAAQ,cACRC,MAAS,KACTC,KAAQ,KACRC,KAAQ,KACRC,WAAc,MAEhB,MAAO,CACLJ,KAAQ,UACRiB,SAAY,CACVjB,KAAQ,WACRE,KAAQ,cACRgB,KAAQ,QACRC,SAAY,KACZC,oBAAuB,GACvBX,WAAc,CACZ,CACET,KAAQ,cACRC,MAAS,KACTC,KAAQ,QACRE,WAAc,KACdD,KAAQ,KACRI,aAAgB,UAChBC,QAAU,EACVC,WAAc,CACZ,CACET,KAAQ,cACRC,MAAS,KACTC,KAAQ,MACRE,WAAc,KACdD,KAAQ,KACRI,aAAgB,OAChBC,QAAU,EACVC,WAAc,CACXV,EACAM,EACAC,EACAI,MAKT,CACEV,KAAQ,cACRC,MAAS,SACTC,KAAQ,YACRE,WAAc,yBACdD,KAASQ,EACTJ,aAAgB,cAChBC,QAAU,EACVC,WAAc,CACZ,CACET,KAAQ,cACRC,MAAS,KACTC,KAAQ,MACRE,WAAc,mBACdD,KAASU,EACTN,aAAgB,qBAChBC,QAAU,EACVC,WAAc,CACZ,CACET,KAAQ,cACRC,MAAS,KACTC,KAAQ,QACRE,WAAc,KACdD,KAAQ,KACRI,aAAgB,eAChBC,QAAU,EACVC,WAAc,CACZ,CACET,KAAQ,cACRC,MAAS,KACTC,KAAQ,OACRE,WAAc,KACdD,KAAQ,KACRI,aAAgB,WAChBC,QAAU,EACVC,WAAc,CACXK,EACAC,YAWrBM,UAAa,CACXrB,KAAQ,YACRE,KAAQ,cACRkB,oBAAuB,GACvBX,WAAc,CACZ,CACET,KAAQ,cACRC,MAAS,KACTC,KAAQ,QACRE,WAAc,KACdD,KAAQ,KACRI,aAAgB,UAChBC,QAAU,EACVC,WAAc,CACZ,CACET,KAAQ,cACRC,MAAS,KACTC,KAAQ,MACRE,WAAc,KACdD,KAAQ,KACRI,aAAgB,OAChBC,QAAU,EACVC,WAAc,CACXV,EACAM,EACAC,EACAI,EACAM,MAKT,CACEhB,KAAQ,cACRC,MAAS,SACTC,KAAQ,YACRE,WAAc,yBACdD,KAASQ,EACTJ,aAAgB,cAChBC,QAAU,EACVC,WAAc,CACZ,CACET,KAAQ,cACRC,MAAS,KACTC,KAAQ,MACRE,WAAc,mBACdD,KAASU,EACTN,aAAgB,qBAChBC,QAAU,EACVC,WAAc,CACZ,CACET,KAAQ,cACRC,MAAS,KACTC,KAAQ,QACRE,WAAc,KACdD,KAAQ,KACRI,aAAgB,eAChBC,QAAU,EACVC,WAAc,CACZ,CACET,KAAQ,cACRC,MAAS,KACTC,KAAQ,OACRE,WAAc,KACdD,KAAQ,KACRI,aAAgB,WAChBC,QAAU,EACVC,WAAc,CACXK,EACAC,EACAC,YAWrBM,OAAU,CACRC,cAAiB,QACjBrB,KAAQ,cACRsB,GAAM,KACNC,KAAQ,oXACRN,SAAY,KAtQe,GA0Q9BrB,EAAa4B,KAAO,mCACN5B,oEC9UfH,EAAAC,EAAAC,GAkGA,IAAMC,EAAyB,WAC/B,IAAIC,EAAK,CACP,CACEC,KAAQ,gBACRE,KAAQ,OACRgB,KAAQ,UACRS,aAAgB,MAElB,CACE3B,KAAQ,gBACRE,KAAQ,gBACRgB,KAAQ,YACRS,aAAgB,OAGpBtB,EAAK,CACH,CACEL,KAAQ,WACRE,KAAQ,OACR0B,aAAgB,SAGpBtB,EAAK,CACHN,KAAQ,cACRC,MAAS,KACTC,KAAQ,SACRE,WAAc,KACdD,KAAQ,KACRI,aAAgB,SAChBC,QAAU,EACVC,WAAc,CACZ,CACET,KAAQ,cACRC,MAAS,KACTC,KAAQ,WACRC,KAAQ,KACRC,WAAc,QAIpBM,EAAK,CACH,CACEV,KAAQ,UACRE,KAAQ,QACRU,MAAS,KAGbD,EAAK,CACH,CACEX,KAAQ,cACRC,MAAS,KACTC,KAAQ,QACRC,KAAQ,KACRC,WAAc,MAEhB,CACEJ,KAAQ,cACRC,MAAS,KACTC,KAAQ,QACRE,WAAc,KACdD,KAAQ,KACRI,aAAgB,QAChBC,QAAU,EACVC,WAAc,CACZ,CACET,KAAQ,cACRC,MAAS,KACTC,KAAQ,OACRC,KAAQ,KACRC,WAAc,MAEhB,CACEJ,KAAQ,cACRC,MAAS,KACTC,KAAQ,MACRC,KAAQ,KACRC,WAAc,SAKtBS,EAAK,CACHb,KAAQ,cACRC,MAAS,KACTC,KAAQ,uBACRE,WAAc,iCACdD,KAASO,EACTH,aAAgB,aAChBC,QAAU,EACVC,WAAeE,GAEjBG,EAAK,CACHd,KAAQ,cACRC,MAAS,KACTC,KAAQ,oBACRE,WAAc,8BACdD,KAASO,EACTH,aAAgB,aAChBC,QAAU,EACVC,WAAeE,GAEjBI,EAAK,CACH,CACEf,KAAQ,UACRE,KAAQ,MACRU,MAAS,UAGbI,EAAK,CACH,CACEhB,KAAQ,WACRE,KAAQ,WACR0B,aAAgB,iBAElB,CACE5B,KAAQ,UACRE,KAAQ,QACRU,MAAS,MAGbiB,EAAK,CACH7B,KAAQ,cACRC,MAAS,KACTC,KAAQ,OACRC,KAAQ,KACRC,WAAc,MAEhB0B,EAAM,CACJ9B,KAAQ,cACRC,MAAS,SACTC,KAAQ,YACRE,WAAc,yBACdD,KAAQ,CACN,CACEH,KAAQ,UACRE,KAAQ,MACRU,MAAS,UAGbL,aAAgB,cAChBC,QAAU,EACVC,WAAc,CACZ,CACET,KAAQ,cACRC,MAAS,KACTC,KAAQ,OACRC,KAAQ,CACN,CACEH,KAAQ,WACRE,KAAQ,UACR0B,aAAgB,SAGpBxB,WAAc,QAIpB2B,EAAM,CACJ/B,KAAQ,cACRC,MAAS,KACTC,KAAQ,KACRC,KAAQ,KACRC,WAAc,MAEhB,MAAO,CACLJ,KAAQ,UACRiB,SAAY,CACVjB,KAAQ,WACRE,KAAQ,eACRgB,KAAQ,QACRC,SAAY,KACZC,oBAAwBrB,EACxBU,WAAc,CACZ,CACET,KAAQ,cACRC,MAAS,KACTC,KAAQ,QACRE,WAAc,KACdD,KAAQ,KACRI,aAAgB,UAChBC,QAAU,EACVC,WAAc,CACZ,CACET,KAAQ,cACRC,MAAS,UACTC,KAAQ,WACRE,WAAc,KACdD,KAASE,EACTE,aAAgB,OAChBC,QAAU,EACVC,WAAc,CACXH,EACAO,EACAC,MAKT,CACEd,KAAQ,cACRC,MAAS,SACTC,KAAQ,YACRE,WAAc,yBACdD,KAASY,EACTR,aAAgB,cAChBC,QAAU,EACVC,WAAc,CACZ,CACET,KAAQ,cACRC,MAAS,KACTC,KAAQ,MACRE,WAAc,KACdD,KAASa,EACTT,aAAgB,qBAChBC,QAAU,EACVC,WAAc,CACZ,CACET,KAAQ,cACRC,MAAS,KACTC,KAAQ,QACRE,WAAc,KACdD,KAAQ,KACRI,aAAgB,eAChBC,QAAU,EACVC,WAAc,CACZ,CACET,KAAQ,cACRC,MAAS,KACTC,KAAQ,OACRE,WAAc,KACdD,KAAQ,KACRI,aAAgB,WAChBC,QAAU,EACVC,WAAc,CACXoB,UAShBC,IAGLT,UAAa,CACXrB,KAAQ,YACRE,KAAQ,eACRkB,oBAAwBrB,EACxBU,WAAc,CACZ,CACET,KAAQ,cACRC,MAAS,KACTC,KAAQ,QACRE,WAAc,KACdD,KAAQ,KACRI,aAAgB,UAChBC,QAAU,EACVC,WAAc,CACZ,CACET,KAAQ,cACRC,MAAS,UACTC,KAAQ,WACRE,WAAc,KACdD,KAASE,EACTE,aAAgB,OAChBC,QAAU,EACVC,WAAc,CACXH,EACAO,EACAC,EACAiB,MAKT,CACE/B,KAAQ,cACRC,MAAS,SACTC,KAAQ,YACRE,WAAc,yBACdD,KAASY,EACTR,aAAgB,cAChBC,QAAU,EACVC,WAAc,CACZ,CACET,KAAQ,cACRC,MAAS,KACTC,KAAQ,MACRE,WAAc,KACdD,KAASa,EACTT,aAAgB,qBAChBC,QAAU,EACVC,WAAc,CACZ,CACET,KAAQ,cACRC,MAAS,KACTC,KAAQ,QACRE,WAAc,KACdD,KAAQ,KACRI,aAAgB,eAChBC,QAAU,EACVC,WAAc,CACZ,CACET,KAAQ,cACRC,MAAS,KACTC,KAAQ,OACRE,WAAc,KACdD,KAAQ,KACRI,aAAgB,WAChBC,QAAU,EACVC,WAAc,CACXoB,EACAE,UAShBD,IAGLR,OAAU,CACRC,cAAiB,QACjBrB,KAAQ,eACRsB,GAAM,KACNC,KAAQ,6qBACRN,SAAY,KA3Ue,GA+U9BrB,EAAa4B,KAAO,mCACN5B,8CClbfH,EAAAC,EAAAC,GA+BA,IAAMC,EAAyB,WAC/B,IAAIC,EAAK,CACP,CACEC,KAAQ,UACRE,KAAQ,MACRU,MAAS,UAGbP,EAAK,CACH,CACEL,KAAQ,UACRE,KAAQ,WACRU,MAAS,KAGbN,EAAK,CACHN,KAAQ,cACRC,MAAS,KACTC,KAAQ,QACRC,KAAQ,KACRC,WAAc,MAEhBM,EAAK,CACHV,KAAQ,cACRC,MAAS,KACTC,KAAQ,OACRC,KAAQ,KACRC,WAAc,MAEhB,MAAO,CACLJ,KAAQ,UACRiB,SAAY,CACVjB,KAAQ,WACRE,KAAQ,mBACRgB,KAAQ,QACRC,SAAY,KACZC,oBAAuB,GACvBX,WAAc,CACZ,CACET,KAAQ,cACRC,MAAS,KACTC,KAAQ,YACRE,WAAc,yBACdD,KAASJ,EACTQ,aAAgB,cAChBC,QAAU,EACVC,WAAc,CACZ,CACET,KAAQ,cACRC,MAAS,KACTC,KAAQ,SACRE,WAAc,sBACdD,KAASE,EACTE,aAAgB,WAChBC,QAAU,EACVC,WAAc,CACXH,EACAI,QAObW,UAAa,CACXrB,KAAQ,YACRE,KAAQ,mBACRkB,oBAAuB,GACvBX,WAAc,CACZ,CACET,KAAQ,cACRC,MAAS,KACTC,KAAQ,YACRE,WAAc,yBACdD,KAASJ,EACTQ,aAAgB,cAChBC,QAAU,EACVC,WAAc,CACZ,CACET,KAAQ,cACRC,MAAS,KACTC,KAAQ,SACRE,WAAc,sBACdD,KAASE,EACTE,aAAgB,WAChBC,QAAU,EACVC,WAAc,CACXH,EACAI,EACD,CACEV,KAAQ,cACRC,MAAS,KACTC,KAAQ,KACRC,KAAQ,KACRC,WAAc,YAQ5BkB,OAAU,CACRC,cAAiB,QACjBrB,KAAQ,mBACRsB,GAAM,KACNC,KAAQ,wIACRN,SAAY,KA3Ge,GA+G9BrB,EAAa4B,KAAO,mCACN5B,8CC/IfH,EAAAC,EAAAC,GAwDA,IAAMC,EAAyB,WAC/B,IAAIC,EAAK,CACP,CACEC,KAAQ,gBACRE,KAAQ,IACRgB,KAAQ,YACRS,aAAgB,OAGpBtB,EAAK,CACH,CACEL,KAAQ,cACRC,MAAS,KACTC,KAAQ,YACRE,WAAc,yBACdD,KAAQ,CACN,CACEH,KAAQ,UACRE,KAAQ,MACRU,MAAS,UAGbL,aAAgB,cAChBC,QAAU,EACVC,WAAc,CACZ,CACET,KAAQ,cACRC,MAAS,KACTC,KAAQ,MACRE,WAAc,KACdD,KAAQ,CACN,CACEH,KAAQ,WACRE,KAAQ,WACR0B,aAAgB,KAElB,CACE5B,KAAQ,UACRE,KAAQ,QACRU,MAAS,KAGbL,aAAgB,qBAChBC,QAAU,EACVC,WAAc,CACZ,CACET,KAAQ,cACRC,MAAS,KACTC,KAAQ,QACRE,WAAc,KACdD,KAAQ,KACRI,aAAgB,eAChBC,QAAU,EACVC,WAAc,CACZ,CACET,KAAQ,cACRC,MAAS,KACTC,KAAQ,OACRE,WAAc,KACdD,KAAQ,KACRI,aAAgB,WAChBC,QAAU,EACVC,WAAc,CACZ,CACET,KAAQ,cACRC,MAAS,KACTC,KAAQ,KACRC,KAAQ,KACRC,WAAc,MAEhB,CACEJ,KAAQ,cACRC,MAAS,KACTC,KAAQ,OACRC,KAAQ,KACRC,WAAc,UAMxB,CACEJ,KAAQ,cACRC,MAAS,KACTC,KAAQ,WACRE,WAAc,KACdD,KAAQ,KACRI,aAAgB,WAChBC,QAAU,EACVC,WAAc,CACZ,CACET,KAAQ,cACRC,MAAS,KACTC,KAAQ,QACRC,KAAQ,KACRC,WAAc,MAEhB,CACEJ,KAAQ,cACRC,MAAS,KACTC,KAAQ,cACRC,KAAQ,KACRC,WAAc,aAS9B,MAAO,CACLJ,KAAQ,UACRiB,SAAY,CACVjB,KAAQ,WACRE,KAAQ,iBACRgB,KAAQ,QACRC,SAAY,KACZC,oBAAwBrB,EACxBU,WAAeJ,GAEjBgB,UAAa,CACXrB,KAAQ,YACRE,KAAQ,iBACRkB,oBAAwBrB,EACxBU,WAAeJ,GAEjBiB,OAAU,CACRC,cAAiB,QACjBrB,KAAQ,iBACRsB,GAAM,KACNC,KAAQ,gRACRN,SAAY,KApIe,GAwI9BrB,EAAa4B,KAAO,mCACN5B,0FCjMfH,EAAAC,EAAAC,GAoBA,IAAMC,EAAyB,WAC/B,IAAIC,EAAK,CACP,CACEC,KAAQ,cACRC,MAAS,KACTC,KAAQ,cACRC,KAAQ,KACRC,WAAc,OAGlB,MAAO,CACLJ,KAAQ,UACRiB,SAAY,CACVjB,KAAQ,WACRE,KAAQ,cACRgB,KAAQ,QACRC,SAAY,KACZC,oBAAuB,GACvBX,WAAeV,GAEjBsB,UAAa,CACXrB,KAAQ,YACRE,KAAQ,cACRkB,oBAAuB,GACvBX,WAAeV,GAEjBuB,OAAU,CACRC,cAAiB,QACjBrB,KAAQ,cACRsB,GAAM,KACNC,KAAQ,0CACRN,SAAY,KA/Be,GAmC9BrB,EAAa4B,KAAO,mCACN5B,8CCxDfH,EAAAC,EAAAC,GAgCA,IAAMC,EAAyB,WAC/B,IAAIC,EAAK,CACP,CACEC,KAAQ,gBACRE,KAAQ,MACRgB,KAAQ,UACRS,aAAgB,MAElB,CACE3B,KAAQ,gBACRE,KAAQ,UACRgB,KAAQ,UACRS,aAAgB,MAElB,CACE3B,KAAQ,gBACRE,KAAQ,QACRgB,KAAQ,SACRS,aAAgB,OAGpBtB,EAAK,CACH,CACEL,KAAQ,cACRC,MAAS,KACTC,KAAQ,iBACRE,WAAc,KACdD,KAAQ,CACN,CACEH,KAAQ,WACRE,KAAQ,UACR0B,aAAgB,WAElB,CACE5B,KAAQ,WACRE,KAAQ,QACR0B,aAAgB,SAElB,CACE5B,KAAQ,WACRE,KAAQ,MACR0B,aAAgB,QAGpBrB,aAAgB,WAChBC,QAAU,EACVC,WAAc,CACZ,CACET,KAAQ,cACRC,MAAS,KACTC,KAAQ,KACRC,KAAQ,KACRC,WAAc,SAKtB,MAAO,CACLJ,KAAQ,UACRiB,SAAY,CACVjB,KAAQ,WACRE,KAAQ,0BACRgB,KAAQ,WACRC,SAAY,KACZC,oBAAwBrB,EACxBU,WAAeJ,GAEjBgB,UAAa,CACXrB,KAAQ,YACRE,KAAQ,0BACRkB,oBAAwBrB,EACxBU,WAAeJ,GAEjBiB,OAAU,CACRC,cAAiB,WACjBrB,KAAQ,0BACRsB,GAAM,KACNC,KAAQ,oLACRN,SAAY,KA9Ee,GAkF9BrB,EAAa4B,KAAO,mCACN5B,sICnHfH,EAAAC,EAAAC,GAuDA,IAAMC,EAAyB,WAC/B,IAAIC,EAAK,CACPC,KAAQ,cACRC,MAAS,KACTC,KAAQ,KACRC,KAAQ,KACRC,WAAc,MAEhBC,EAAK,CACHL,KAAQ,cACRC,MAAS,KACTC,KAAQ,OACRC,KAAQ,KACRC,WAAc,MAEhBE,EAAK,CACHN,KAAQ,cACRC,MAAS,KACTC,KAAQ,QACRE,WAAc,KACdD,KAAQ,KACRI,aAAgB,UAChBC,QAAU,EACVC,WAAc,CACZ,CACET,KAAQ,cACRC,MAAS,KACTC,KAAQ,KACRE,WAAc,KACdD,KAAQ,KACRI,aAAgB,OAChBC,QAAU,EACVC,WAAc,CACXV,EACAM,EACD,CACEL,KAAQ,cACRC,MAAS,KACTC,KAAQ,SACRE,WAAc,KACdD,KAAQ,KACRI,aAAgB,SAChBC,QAAU,EACVC,WAAc,CACZ,CACET,KAAQ,cACRC,MAAS,KACTC,KAAQ,UACRC,KAAQ,KACRC,WAAc,QAIpB,CACEJ,KAAQ,cACRC,MAAS,KACTC,KAAQ,QACRE,WAAc,KACdD,KAAQ,KACRI,aAAgB,OAChBC,QAAU,EACVC,WAAc,CACXJ,QAObK,EAAK,CACH,CACEV,KAAQ,UACRE,KAAQ,MACRU,MAAS,UAGbD,EAAK,CACHX,KAAQ,cACRC,MAAS,KACTC,KAAQ,OACRC,KAAQ,KACRC,WAAc,MAEhBS,EAAK,CACHb,KAAQ,cACRC,MAAS,KACTC,KAAQ,QACRC,KAAQ,KACRC,WAAc,MAEhB,MAAO,CACLJ,KAAQ,UACRiB,SAAY,CACVjB,KAAQ,WACRE,KAAQ,WACRgB,KAAQ,QACRC,SAAY,KACZC,oBAAuB,GACvBX,WAAc,CACXH,EACD,CACEN,KAAQ,cACRC,MAAS,QACTC,KAAQ,YACRE,WAAc,yBACdD,KAASO,EACTH,aAAgB,cAChBC,QAAU,EACVC,WAAc,CACZ,CACET,KAAQ,cACRC,MAAS,KACTC,KAAQ,OACRE,WAAc,KACdD,KAAQ,KACRI,aAAgB,WAChBC,QAAU,EACVC,WAAc,CACXE,EACAE,QAObQ,UAAa,CACXrB,KAAQ,YACRE,KAAQ,WACRkB,oBAAuB,GACvBX,WAAc,CACXH,EACD,CACEN,KAAQ,cACRC,MAAS,QACTC,KAAQ,YACRE,WAAc,yBACdD,KAASO,EACTH,aAAgB,cAChBC,QAAU,EACVC,WAAc,CACZ,CACET,KAAQ,cACRC,MAAS,KACTC,KAAQ,OACRE,WAAc,KACdD,KAAQ,KACRI,aAAgB,WAChBC,QAAU,EACVC,WAAc,CACXE,EACAE,EACAd,QAObuB,OAAU,CACRC,cAAiB,QACjBrB,KAAQ,WACRsB,GAAM,KACNC,KAAQ,8PACRN,SAAY,KApKe,GAwK9BrB,EAAa4B,KAAO,mCACN5B,yNCtNTkC,EAAO,GAAAC,OAAMC,4BAAN,YACAC,EAAQ,GAAAF,OAAMC,4BAAN,UAAAD,OAAiDC,SAQhEE,EAAuBC,OAAO,6BAYrBC,iFAAf,SAAAC,EAAkCC,EAAiBC,GAAnD,IAAAC,EAAA,OAAAC,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACQN,EAAM,IAAIO,MAAMT,IAClBU,OAAST,EAASS,OAFxBJ,EAAAE,KAAA,EAGmBP,EAAShB,OAH5B,cAGEiB,EAAIjB,KAHNqB,EAAAK,KAIET,EAAIU,OAAShB,EAJfU,EAAAO,OAAA,SAKSX,GALT,wBAAAI,EAAAQ,SAAAf,wEAQA,SAAAgB,EACEC,EACAC,GAFF,IAAAhB,EAAA,OAAAE,EAAAC,EAAAC,KAAA,SAAAa,GAAA,cAAAA,EAAAX,KAAAW,EAAAV,MAAA,cAAAU,EAAAV,KAAA,EAIyBW,MAAM3B,EAAS,CACpC4B,OAAQ,OACRC,QAAS,CACPC,eAAgB,oBAElBC,YAAa,UACbC,KAAMC,KAAKC,UAAU,CACnBC,MAAOX,EAAQ/B,KACfgC,gBAZN,YAIQhB,EAJRiB,EAAAP,MAgBeiB,GAhBf,CAAAV,EAAAV,KAAA,eAAAU,EAAAL,OAAA,SAiBWZ,EAAS4B,QAjBpB,cAAAX,EAAAV,KAAA,EAmBgBV,EAAkB,6BAAAL,OACCQ,EAASS,QACtCT,GArBN,aAAAiB,EAAAP,KAAA,yBAAAO,EAAAJ,SAAAC,6BA0BA,IAAMe,EAAS,IAAIC,eACbC,EAAUC,UAAQC,sDAEjB,SAASC,IACd,IAAMC,EAAQ,IAAIC,QAAMP,GAExB,OAAO,IAAIQ,cAAY,CACrBN,UACAI,sBChEEG,EAAO,SAACC,GAAD,OACXC,EAAArC,EAAAsC,cAAA,MAAIC,KAAK,eAAeC,UAAU,YAChCH,EAAArC,EAAAsC,cAACG,EAAA,EAAD,CACEC,GAAIN,EAAMM,GACVC,MAAOP,EAAMO,MACbH,UAAU,WACVI,gBAAiB,UAEhBR,EAAMS,YAKAC,EAAU,kBACrBT,EAAArC,EAAAsC,cAAA,MAAIE,UAAU,6BACZH,EAAArC,EAAAsC,cAACS,EAAD,CAAML,GAAG,IAAIC,OAAK,GAAlB,aAGAN,EAAArC,EAAAsC,cAACS,EAAD,CAAML,GAAG,WAAT,qBACAL,EAAArC,EAAAsC,cAACS,EAAD,CAAML,GAAG,WAAT,kBACAL,EAAArC,EAAAsC,cAAA,WACAD,EAAArC,EAAAsC,cAACS,EAAD,CAAML,GAAG,WAAT,UACAL,EAAArC,EAAAsC,cAACS,EAAD,CAAML,GAAG,WAAT,YC7BSM,EAAY,kBACvBX,EAAArC,EAAAsC,cAAA,OAAKE,UAAU,4CACbH,EAAArC,EAAAsC,cAAA,OAAKE,UAAU,aACbH,EAAArC,EAAAsC,cAAA,MAAIE,UAAU,cAAd,oBACAH,EAAArC,EAAAsC,cAAA,KAAGE,UAAU,aACV,sDCQF,SAASS,EAAOb,GAAoB,IAAAc,EACAd,EAAMe,KAAxC7F,EADkC4F,EAClC5F,KAAM8F,EAD4BF,EAC5BE,SAAUC,EADkBH,EAClBG,OAAQ/C,EADU4C,EACV5C,OACzBgD,EAAYD,EAAOE,QACnBC,EACS,WAAbJ,EACI,sCACA,oCACCxD,EAAWU,EAAXV,QAEP,OACEyC,EAAArC,EAAAsC,cAAA,OAAKE,UAAU,sBACbH,EAAArC,EAAAsC,cAAA,OAAKE,UAAU,iBACbH,EAAArC,EAAAsC,cAAA,OAAKmB,IAAKH,EAAYd,UAAU,UAAUkB,IAAI,MAEhDrB,EAAArC,EAAAsC,cAAA,OAAKE,UAAU,kBACbH,EAAArC,EAAAsC,cAAA,SACED,EAAArC,EAAAsC,cAAA,KACEE,UAAS,2BAAAnD,OAA6BmE,GACtCG,cAAY,SAEdtB,EAAArC,EAAAsC,cAACG,EAAA,EAAD,CAAMC,GAAE,WAAArD,OAAa/B,GAAQkF,UAAU,4BACpClF,GAEH+E,EAAArC,EAAAsC,cAAA,QAAME,UAAU,yCACbJ,EAAMwB,QAGXvB,EAAArC,EAAAsC,cAAA,KAAGE,UAAU,+DACV5C,kBChCEiE,EAAb,SAAAC,GAGE,SAAAD,EAAYzB,GAAW,IAAA2B,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACrBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAM9B,KAHAkC,iBAEe,EAAAP,EAgDvBQ,aAAe,SAAAC,GAA8C,IAA5CC,EAA4CD,EAA5CC,MAAOrC,EAAqCoC,EAArCpC,MACtB,OAAIqC,EACKpC,EAAArC,EAAAsC,cAAA,WAAMmC,EAAM7E,SAInByC,EAAArC,EAAAsC,cAAA,WACED,EAAArC,EAAAsC,cAAA,+BACAD,EAAArC,EAAAsC,cAAA,cAAYE,UAAU,yBAAtB,aACYH,EAAArC,EAAAsC,cAAA,kBADZ,+CAGAD,EAAArC,EAAAsC,cAAA,MAAIE,UAAU,cACXuB,EAAKW,aAAatC,GAAOuC,IAAI,SAAAC,GAAmB,IAAjBzB,EAAiByB,EAAjBzB,KAAMS,EAAWgB,EAAXhB,MACpC,OACEvB,EAAArC,EAAAsC,cAAA,MAAIuC,IAAK1B,EAAK7F,KAAMkF,UAAU,mBAC5BH,EAAArC,EAAAsC,cAACW,EAAD,CAAQE,KAAMA,EAAMS,MAAOA,UA5DvCG,EAAKO,YAAcvC,IAHEgC,EAHzB,OAAAC,OAAAc,EAAA,EAAAd,CAAAH,EAAAC,GAAAE,OAAAe,EAAA,EAAAf,CAAAH,EAAA,EAAAgB,IAAA,SAAA7G,MAAA,WAUI,IAAMuD,EAAKyD,MAAA,kBAAAjI,EAAA,OA+BX,OACEsF,EAAArC,EAAAsC,cAAC2C,EAAA,cAAD,CACEX,YAAaJ,KAAKI,YAClB/C,MAAOA,EACPV,UAAW,GACXqE,OAAQhB,KAAKK,iBA9CrB,CAAAM,IAAA,eAAA7G,MAAA,SA4EIoE,GAEA,IAAKA,EACH,MAAO,GAGT,IAAM+C,EAAS/C,EAAM+C,OACrB,IAAKA,EACH,MAAO,GAGT,IAAMC,EAAiD,GAVxBC,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IAW/B,QAAAC,EAAAC,EAAoBP,EAAOQ,IAAIC,MAA/BnG,OAAAoG,cAAAR,GAAAI,EAAAC,EAAAtF,QAAA0F,MAAAT,GAAA,EAAsC,KAA3BzB,EAA2B6B,EAAAzH,MAChC4F,EAAM1G,KAAK6I,UACbX,EAAiBxB,EAAM1G,KAAK6I,SAAWnC,EAAM1G,KAAK2B,OAbvB,MAAAiB,GAAAwF,GAAA,EAAAC,EAAAzF,EAAA,YAAAuF,GAAA,MAAAK,EAAAM,QAAAN,EAAAM,SAAA,WAAAV,EAAA,MAAAC,GAiB/B,IAAMU,EAAW7D,EAAM8D,MAAMP,IAAIhB,IAAI,SAAAxB,GACnC,MAAO,CAACA,OAAMS,MAAOwB,EAAiBjC,EAAK7F,OAAS,MAKtD,OAFA2I,EAASE,KAAK,SAACnG,EAAGoG,GAAJ,OAAUpG,EAAEmD,KAAK7F,KAAK+I,cAAcD,EAAEjD,KAAK7F,QAElD2I,MApGXpC,EAAA,CAA4ByC,+CCR5BC,IAASC,QAAUD,IAASC,SAAW,GACvCD,IAASC,QAAQC,aAAe,WAC9B,OAAO,SAASC,GACdA,EAAMC,GAAG,OAAQ,SAASC,GACH,UAAjBA,EAAQtI,OACVsI,EAAQC,QAAQC,QAAQC,MAAMC,UAAYJ,EAAQ/H,UAWnD,QAAMoI,EAAb,SAAAnD,GAAA,SAAAmD,IAAA,IAAAC,EAAAnD,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA+C,GAAA,QAAAE,EAAAC,UAAAC,OAAA9J,EAAA,IAAA+J,MAAAH,GAAAI,EAAA,EAAAA,EAAAJ,EAAAI,IAAAhK,EAAAgK,GAAAH,UAAAG,GAAA,OAAAxD,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,MAAAgD,EAAAlD,OAAAI,EAAA,EAAAJ,CAAAiD,IAAA5C,KAAAmD,MAAAN,EAAA,CAAAhD,MAAA7E,OAAA9B,MACUkK,gBADV,EAAA1D,EAEU2C,WAFV,EAAA3C,EAAA,OAAAC,OAAAc,EAAA,EAAAd,CAAAiD,EAAAnD,GAAAE,OAAAe,EAAA,EAAAf,CAAAiD,EAAA,EAAApC,IAAA,SAAA7G,MAAA,WAIW,IAAA0J,EAAAxD,KACP,OACE7B,EAAArC,EAAAsC,cAAA,OACEE,UAAU,6BACVmF,IAAK,SAAAC,GACHF,EAAKD,WAAaG,OAT5B,CAAA/C,IAAA,oBAAA7G,MAAA,WAgBI,IAAM6J,EAAU3D,KAAK9B,MAAMyF,SAAW,GACtCA,EAAQrB,QAAU,CAACD,IAASC,QAAQC,gBAEpCvC,KAAKwC,MAAQ,IAAIH,IAASuB,IAAI5D,KAAKuD,WAAYvD,KAAK9B,MAAM2F,KAAMF,KAnBpE,CAAAhD,IAAA,uBAAA7G,MAAA,WAuBIkG,KAAKwC,OAASxC,KAAKwC,MAAMsB,aAvB7Bf,EAAA,CAA2BX,aCId2B,UAAb,SAAAnE,GAIE,SAAAmE,EAAY7F,GAAqB,IAAA2B,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA+D,IAC/BlE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAiE,GAAA5D,KAAAH,KAAM9B,KAJAkC,iBAGyB,EAAAP,EAFzBmE,WAEyB,EAAAnE,EAsEjCQ,aAAe,SAAAC,GAA+C,IAA7CC,EAA6CD,EAA7CC,MAAOrC,EAAsCoC,EAAtCpC,MACtB,GAAIqC,EACF,OAAOpC,EAAArC,EAAAsC,cAAA,WAAMmC,EAAM7E,SAGrB,IAAKwC,EACH,OACEC,EAAArC,EAAAsC,cAAA,OAAKE,UAAU,mBACbH,EAAArC,EAAAsC,cAAA,KAAGE,UAAU,8BAA8BmB,cAAY,SADzD,aAOJ,IAAMR,EAAOf,EAAM8D,MAAMiC,QACzB,IAAKhF,EACH,OAAO,KAGT,IAAME,EAASF,EAAKE,OAAO+E,UAAY,GAEvC,OACE/F,EAAArC,EAAAsC,cAAA,OAAKE,UAAU,uBACbH,EAAArC,EAAAsC,cAAA,OAAKE,UAAU,YACbH,EAAArC,EAAAsC,cAAA,OACEE,UAAU,oDACViB,IAAKJ,EACLK,IAAI,KAELK,EAAKsE,6BAA6BlF,GAClCY,EAAKuE,0BAA0BnF,IAElCd,EAAArC,EAAAsC,cAAA,OAAKE,UAAU,YACbH,EAAArC,EAAAsC,cAAA,MAAIE,UAAU,4BAAd,IACIuB,EAAK3B,MAAMmG,MAAM7J,OAAOpB,MAE3ByG,EAAKyE,aAAapG,GAClB2B,EAAK0E,gBAAgBrG,MAxG5B2B,EAAKO,YAAcvC,IACnBgC,EAAKmE,MAAQ,IAAIQ,IAEjB3E,EAAKmE,MAAMS,SAASC,MAAMC,MAAQ,sBAClC9E,EAAKmE,MAAMY,WAAY,EACvB/E,EAAKmE,MAAMa,eAAgB,EARIhF,EAJnC,OAAAC,OAAAc,EAAA,EAAAd,CAAAiE,EAAAnE,GAAAE,OAAAe,EAAA,EAAAf,CAAAiE,EAAA,EAAApD,IAAA,SAAA7G,MAAA,WAgBI,IAAMuD,EAAKyH,MAAA,kBAAAjM,EAAA,OA0CLkM,EAAW/E,KAAK9B,MAAMmG,MAAM7J,OAAOpB,KACnCuD,EAAY,CAChBvD,KAAM2L,EACNC,cAAe,CAACnD,QAASkD,IAG3B,OACE5G,EAAArC,EAAAsC,cAAC2C,EAAA,cAAD,CACEX,YAAaJ,KAAKI,YAClB/C,MAAOA,EACPV,UAAWA,EACXqE,OAAQhB,KAAKK,iBArErB,CAAAM,IAAA,4BAAA7G,MAAA,SAqH4BmF,GACxB,OAAOe,KAAKiF,oBACVhG,EAAKiG,kBACL,2BAxHN,CAAAvE,IAAA,+BAAA7G,MAAA,SA4H+BmF,GAC3B,OAAOe,KAAKiF,oBACVhG,EAAKkG,qBACL,8BA/HN,CAAAxE,IAAA,sBAAA7G,MAAA,SAmIsBsL,EAAqBhM,GAAc,IAAAoK,EAAAxD,KAC/C6D,EAAO,CACXwB,OAAQD,EAAQ3E,IAAI,SAAA6E,GAClB,OAAIA,EAAKtB,MAAMuB,IACb,2BAAApK,OAAkCmK,EAAKtB,MAAM5K,KAA7C,WAAA+B,OAA2DmK,EAAKtB,MAAMuB,IAAtE,aAAApK,OAAqFmK,EAAKtB,MAAM5K,KAAhG,MAGKoK,EAAKQ,MAAMwB,eAAX,IAAArK,OAA8BmK,EAAKtB,MAAM5K,KAAzC,QAETqM,OAAQ,CAACL,EAAQ3E,IAAI,SAAA6E,GAAI,OAAIA,EAAKI,UAUpC,OACEvH,EAAArC,EAAAsC,cAAA,KAAGE,UAAU,kCACXH,EAAArC,EAAAsC,cAAA,UAAKhF,GACL+E,EAAArC,EAAAsC,cAACuH,EAAD,CAAO9B,KAAMA,EAAMF,QAVP,CACdiC,IAAK,EACLC,MAAO,CACLC,aAAa,SAlJrB,CAAAnF,IAAA,eAAA7G,MAAA,SA8JeoE,GAAwD,IAAA6H,EAAA/F,KAC7D0B,EAAQxD,EAAM+C,OAAS/C,EAAM+C,OAAOQ,IAAIC,MAAQ,GACtD,OAAqB,IAAjBA,EAAMyB,OAENhF,EAAArC,EAAAsC,cAAA,KAAGE,UAAU,gCAAb,8BAC8B,IAC5BH,EAAArC,EAAAsC,cAAA,yBAAiB4B,KAAK9B,MAAMmG,MAAM7J,OAAOpB,KAAzC,SAFF,KAQF+E,EAAArC,EAAAsC,cAAA,KAAGE,UAAU,0BACVoD,EAAMjB,IAAI,SAAAuF,GAAC,OAAID,EAAKE,UAAUD,EAAEhN,KAAK2B,WA3K9C,CAAAgG,IAAA,kBAAA7G,MAAA,SAgLkBoE,GACd,IAAKA,EAAMgI,OACT,OACE/H,EAAArC,EAAAsC,cAAA,KAAGE,UAAU,6BAAb,wDAMJ,IAAM6H,EAAOjI,EAAMgI,OAAOC,KAC1B,OACEhI,EAAArC,EAAAsC,cAAA,KAAGE,UAAU,6BAAb,SACS6H,EADT,wBA3LN,CAAAxF,IAAA,YAAA7G,MAAA,SAiMY4F,GACR,MAAI,WAAW0G,KAAK1G,GAEhBvB,EAAArC,EAAAsC,cAAA,OACEE,UAAU,uCACVkB,IAAI,GACJD,IAAKG,IAKJvB,EAAArC,EAAAsC,cAAA,QAAME,UAAU,yBAAyBoB,OA5MpDqE,EAAA,CAA6B3B,cCXhBiE,EAAwB,CACnCC,KADmC,SAC3BC,GACN,OAAQA,EAAMC,YAAcD,EAAME,SAAY,kBAAM,UAGtDC,MAAO,cAGIC,EAAgB,CAC3BL,KAD2B,SACnBC,GACN,OAAQA,EAAMK,IAAML,EAAME,SAAY,kBAAM,UAG9CC,MAAO,MAGIG,EAAmB,CAC9BP,KAD8B,SACtBC,GACN,OAAQA,EAAMO,OAASP,EAAME,SAAY,kBAAM,UAGjDC,MAAO,SAGIK,EAAqB,CAACV,EAAYM,EAAIE,GC9B5C,SAASG,EAAM9I,GACpB,OACEC,EAAArC,EAAAsC,cAAA,cAAYE,UAAU,yBACpBH,EAAArC,EAAAsC,cAAA,SAAIF,EAAMvD,OCGT,gBAAMsM,EAAb,SAAArH,GAGE,SAAAqH,EAAY/I,GAAW,IAAA2B,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAiH,IACrBpH,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAmH,GAAA9G,KAAAH,KAAM9B,KAHAgJ,eAEe,EAAArH,EA+BvBQ,aAAe,SAAAC,GAAuC,IAArCC,EAAqCD,EAArCC,MAAOrC,EAA8BoC,EAA9BpC,MACtB,GAAIqC,EACF,OAAOpC,EAAArC,EAAAsC,cAAA,WAAMmC,EAAM7E,SAGrB,IAAMyL,EAAYjJ,EAAQA,EAAMkJ,UAAWC,OAAO1M,KAAOkF,EAAKqH,UAE9D,OAAKC,GAILtH,EAAKqH,UAAYC,EAGfhJ,EAAArC,EAAAsC,cAAA,OAAKE,UAAU,sCACbH,EAAArC,EAAAsC,cAAA,OAAKE,UAAU,aACbH,EAAArC,EAAAsC,cAAA,KAAGE,UAAU,aAAb,+FAIAH,EAAArC,EAAAsC,cAAA,UACEhE,KAAK,SACLkE,UAAU,2BACVgJ,QAASzH,EAAK0H,SAEdpJ,EAAArC,EAAAsC,cAAA,KAAGE,UAAU,cAAcmB,cAAY,SALzC,YASFtB,EAAArC,EAAAsC,cAAC4I,EAAD,CAAOrM,KAAMwM,MArBR,MAvCYtH,EAiEvB0H,QAAU,WACR1H,EAAK2H,SAAS,CACZpH,YAAavC,OAhEfgC,EAAKqH,UAAY,KACjBrH,EAAK4H,MAAQ,CACXrH,YAAavC,KALMgC,EAHzB,OAAAC,OAAAc,EAAA,EAAAd,CAAAmH,EAAArH,GAAAE,OAAAe,EAAA,EAAAf,CAAAmH,EAAA,EAAAtG,IAAA,SAAA7G,MAAA,WAaI,IAAMuD,EAAKqK,MAAA,kBAAA7O,EAAA,OAWX,OACEsF,EAAArC,EAAAsC,cAAC2C,EAAA,cAAD,CACEX,YAAaJ,KAAKyH,MAAMrH,YACxB/C,MAAOA,EACPV,UAAW,GACXqE,OAAQhB,KAAKK,mBA7BrB4G,EAAA,CAAiC7E,aCGpBuF,GAAb,SAAA/H,GAKE,SAAA+H,EAAYzJ,GAAuB,IAAA2B,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA2H,IACjC9H,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA6H,GAAAxH,KAAAH,KAAM9B,KALAkC,iBAI2B,EAAAP,EAH3B+H,eAG2B,EAAA/H,EAF3BgI,iBAE2B,EAAAhI,EAoDnCQ,aAAe,SAAAC,GAAqC,IAAnCC,EAAmCD,EAAnCC,MAAOrC,EAA4BoC,EAA5BpC,MACtB,OAAIqC,EACKpC,EAAArC,EAAAsC,cAAA,WAAMmC,EAAM7E,SAGhBwC,GAAU2B,EAAKgI,aAOR3J,GAAS2B,EAAKgI,aAAehI,EAAK+H,UACrC/H,EAAKiI,gBAAgBjI,EAAK+H,UAAW/H,EAAKgI,aACxC3J,GACT2B,EAAK+H,UAAY1J,EAAMkJ,UAAW3F,IAAIsG,SAASrC,MAC/C7F,EAAKgI,YAAc3J,EAAMkJ,UAAW3F,IAAIC,MAEjC7B,EAAKiI,gBAAgBjI,EAAK+H,UAAW/H,EAAKgI,mBAJ5C,EAPH1J,EAAArC,EAAAsC,cAAA,OAAKE,UAAU,mBACbH,EAAArC,EAAAsC,cAAA,KAAGE,UAAU,8BAA8BmB,cAAY,SADzD,qBAzDJI,EAAKO,YAAcvC,IACnBgC,EAAK+H,UAAY,KACjB/H,EAAKgI,YAAc,KAJchI,EALrC,OAAAC,OAAAc,EAAA,EAAAd,CAAA6H,EAAA/H,GAAAE,OAAAe,EAAA,EAAAf,CAAA6H,EAAA,EAAAhH,IAAA,SAAA7G,MAAA,WAYW,IAAA0J,EAAAxD,KACD3C,EAAK2K,MAAA,kBAAAnP,EAAA,OAoBLoP,EAAgB,CAAC5K,MAAO2C,KAAK9B,MAAMb,OACzC2C,KAAK9B,MAAMgK,KAAK5B,KAAK,CACnBM,GAAI,WACFqB,EAASE,SAAW3E,EAAKtF,MAAMkK,QAEjCtB,MAAO,WACLmB,EAASI,SAAW7E,EAAKtF,MAAMkK,UAInC,IAAMzL,EAAY,CAChB+G,EAAGuE,GAGL,OACE9J,EAAArC,EAAAsC,cAAC2C,EAAA,cAAD,CACEX,YAAaJ,KAAKI,YAClB/C,MAAOA,EACPV,UAAWA,EACXqE,OAAQhB,KAAKK,iBApDrB,CAAAM,IAAA,kBAAA7G,MAAA,SA+EkBwO,EAAelB,GAC7B,IAAMlB,EAASkB,EAAU3G,IAAI,SAAA8H,GAC3B,OAAOpK,EAAArC,EAAAsC,cAAC4I,EAAD,CAAOrG,IAAK4H,EAASvP,KAAK0B,GAAKC,KAAM4N,EAASvP,KAAK2B,SAGtD6N,EAAOpB,EAAUjE,OAASmF,EAAQ,eAAiB,GACnD5O,EAAmB,IAAV4O,EAAA,mCAEf,OACEnK,EAAArC,EAAAsC,cAAA,OAAKE,UAAU,iCACbH,EAAArC,EAAAsC,cAAA,OAAKE,UAAU,aACbH,EAAArC,EAAAsC,cAAA,oBACWoK,EADX,IACiBrK,EAAArC,EAAAsC,cAAA,cAASkK,GAD1B,IAC2C5O,EAD3C,MAIDwM,OA9FTyB,EAAA,CAA+BvF,aCDlBqG,WAAb,SAAA7I,GAAA,SAAA6I,IAAA,IAAAzF,EAAAnD,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAyI,GAAA,QAAAxF,EAAAC,UAAAC,OAAA9J,EAAA,IAAA+J,MAAAH,GAAAI,EAAA,EAAAA,EAAAJ,EAAAI,IAAAhK,EAAAgK,GAAAH,UAAAG,GAAA,OAAAxD,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,MAAAgD,EAAAlD,OAAAI,EAAA,EAAAJ,CAAA2I,IAAAtI,KAAAmD,MAAAN,EAAA,CAAAhD,MAAA7E,OAAA9B,MA4HEqP,cAAgB,SAACC,GACf,IAAMT,EAAOnB,EAAM6B,KAAK,SAAAV,GAAI,OAAIA,EAAKxB,QAAUiC,EAAME,OAAO/O,QAC5D+F,EAAKiJ,YAAY,CAACZ,UA9HtBrI,EAiIEkJ,eAAiB,SAACJ,GAChB9I,EAAKiJ,YAAY,CAACzL,MAAOsL,EAAME,OAAO/O,SAlI1C+F,EAqIEmJ,gBAAkB,SAACL,GACjB9I,EAAKiJ,YAAY,CAACV,OAAQO,EAAME,OAAO/O,SAtI3C+F,EAAA,OAAAC,OAAAc,EAAA,EAAAd,CAAA2I,EAAA7I,GAAAE,OAAAe,EAAA,EAAAf,CAAA2I,EAAA,EAAA9H,IAAA,aAAA7G,MAAA,WAEI,IAAMU,EAAS,IAAIyO,gBAAgBC,OAAOC,SAASC,QAE/ClB,EAAO7B,EACP+B,EAAS,GASb,OARI5N,EAAO6O,IAAI,OACbnB,EAAOvB,EACPyB,EAAS5N,EAAO8O,IAAI,OACX9O,EAAO6O,IAAI,WACpBnB,EAAOrB,EACPuB,EAAS5N,EAAO8O,IAAI,UAGf,CACLjM,MAAO7C,EAAO8O,IAAI,MAAQ,GAC1BlB,SACAF,UAjBN,CAAAvH,IAAA,cAAA7G,MAAA,SAqBcyP,GACV,IAAMC,EAAWxJ,KAAKyJ,aAChBxF,EAAUnE,OAAO4J,OAAOF,EAAUD,GAElC/O,EAAS,IAAIyO,gBAEnBhF,EAAQiE,KAAK5B,KAAK,CAChBM,GAAI,kBAAMpM,EAAOmP,IAAI,KAAM1F,EAAQmE,SACnCtB,MAAO,kBAAMtM,EAAOmP,IAAI,QAAS1F,EAAQmE,WAEvCnE,EAAQ5G,MAAM8F,QAChB3I,EAAOmP,IAAI,IAAK1F,EAAQ5G,OAG1B,IAAMuM,EAAapP,EAAOqP,WACpBC,EACJZ,OAAOC,SAASY,SAChB,KACAb,OAAOC,SAASa,KAChBd,OAAOC,SAASc,UACfL,EAAWzG,OAAS,EAAI,IAAMyG,EAAa,IAC5CV,OAAOC,SAASvO,KAEdsO,OAAOgB,QAAQC,aACjBjB,OAAOgB,QAAQC,aAAa,GAAI,GAAIL,GAEpCZ,OAAOC,SAASiB,KAAON,EAEzB9J,KAAKqK,gBAjDT,CAAA1J,IAAA,SAAA7G,MAAA,WAqDI,IAAMsP,EAASpJ,KAAKyJ,aACda,EAAalB,EAAOlB,KAAK5B,KAAK,CAClCE,WAAY,kBAAM,GAClBI,GAAI,kBAAM,GACVE,MAAO,kBAAM,KAGf,OACE3I,EAAArC,EAAAsC,cAAA,WACED,EAAArC,EAAAsC,cAAA,QACEE,UAAS,+CAAAnD,OAAiDiO,EAAOlB,KAAKxB,QAEtEvI,EAAArC,EAAAsC,cAAA,UACEE,UAAU,kCACVxE,MAAOsP,EAAOlB,KAAKxB,MACnB6D,SAAUvK,KAAK0I,eAEd3B,EAAMtG,IAAI,SAACyH,EAAMsC,GAChB,OACErM,EAAArC,EAAAsC,cAAA,UAAQuC,IAAK6J,EAAO1Q,MAAOoO,EAAKxB,OAC7BwB,EAAKxB,UAKb4D,GACCnM,EAAArC,EAAAsC,cAAA,SACEhE,KAAK,OACLkE,UAAU,eACV5D,GAAG,uBACH+P,YAAY,sBACZ3Q,MAAOsP,EAAOhB,OACdmC,SAAUvK,KAAKgJ,kBAGnB7K,EAAArC,EAAAsC,cAAA,SACEhE,KAAK,OACLkE,UAAU,eACV5D,GAAG,sBACH+P,YAAY,UACZ3Q,MAAOsP,EAAO/L,MACdkN,SAAUvK,KAAK+I,kBAGlB/I,KAAKK,aAAa+I,MAjG3B,CAAAzI,IAAA,eAAA7G,MAAA,SAsGesP,GACX,IAAMhB,EAASgB,EAAOhB,OACnBsC,MAAM,YACNjK,IAAI,SAAAkK,GAAM,OAAIA,EAAOC,QAAQ,KAAM,MACnCnK,IAAI,SAAAkK,GAAM,OAAIA,EAAOE,SACrBC,OAAO,SAAAH,GAAM,OAAIA,EAAOxH,OAAS,IAQpC,OANgBiG,EAAOlB,KAAK5B,KAAK,CAC/BE,WAAY,kBAA8B,IAAxB4C,EAAO/L,MAAM8F,QAC/ByD,GAAI,kBAAwB,IAAlBwB,EAAOjF,QACjB2D,MAAO,kBAAwB,IAAlBsB,EAAOjF,UAIbhF,EAAArC,EAAAsC,cAAC2M,EAAD,MAGL5M,EAAArC,EAAAsC,cAAC4M,GAAD,CAAW9C,KAAMkB,EAAOlB,KAAME,OAAQA,EAAQ/K,MAAO+L,EAAO/L,YAvHpEoL,EAAA,CAA4BrG,kCCFf6I,GAAb,SAAArL,GAAA,SAAAqL,IAAA,IAAAjI,EAAAnD,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAiL,GAAA,QAAAhI,EAAAC,UAAAC,OAAA9J,EAAA,IAAA+J,MAAAH,GAAAI,EAAA,EAAAA,EAAAJ,EAAAI,IAAAhK,EAAAgK,GAAAH,UAAAG,GAAA,OAAAxD,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,MAAAgD,EAAAlD,OAAAI,EAAA,EAAAJ,CAAAmL,IAAA9K,KAAAmD,MAAAN,EAAA,CAAAhD,MAAA7E,OAAA9B,MACEoO,MAAQ,CACNyD,QAAQ,GAFZrL,EAAA,OAAAC,OAAAc,EAAA,EAAAd,CAAAmL,EAAArL,GAAAE,OAAAe,EAAA,EAAAf,CAAAmL,EAAA,EAAAtK,IAAA,SAAA7G,MAAA,WAKW,IAAA0J,EAAAxD,KACDmL,EAAWnL,KAAKyH,MAAMyD,OACxB,kBACA,oBACEE,EAAapL,KAAKyH,MAAMyD,OAAS,SAAW,OAElD,OACE/M,EAAArC,EAAAsC,cAAA,KAAGE,UAAU,eACXH,EAAArC,EAAAsC,cAAA,SACEhE,KAAK,OACLM,GAAG,yBACH4D,UAAU,eACVxE,MAAOkG,KAAK9B,MAAMmN,QAClBC,UAAQ,IAEVnN,EAAArC,EAAAsC,cAACmN,GAAAzP,EAAD,CACEnB,KAAMqF,KAAK9B,MAAMmN,QACjBG,OAAQ,kBAAMhI,EAAKgE,SAAS,CAAC0D,QAAQ,MAErC/M,EAAArC,EAAAsC,cAAA,UAAQE,UAAW6M,EAAUM,UAAWzL,KAAK9B,MAAMwN,OAChDN,SAzBbH,EAAA,CAA8B7I,aCDjBuJ,WAAb,SAAA/L,GAGE,SAAA+L,EAAYzN,GAAW,IAAA2B,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA2L,IACrB9L,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA6L,GAAAxL,KAAAH,KAAM9B,KAHAkC,iBAEe,EAAAP,EAsBvBQ,aAAe,SAACuL,GACd,OACEzN,EAAArC,EAAAsC,cAAA,WACED,EAAArC,EAAAsC,cAAA,sCACCyB,EAAKgM,iBAAiBD,KAxB3B/L,EAAKO,YAAcvC,IAFEgC,EAHzB,OAAAC,OAAAc,EAAA,EAAAd,CAAA6L,EAAA/L,GAAAE,OAAAe,EAAA,EAAAf,CAAA6L,EAAA,EAAAhL,IAAA,SAAA7G,MAAA,WASI,IAAMuD,EAAKyO,MAAA,kBAAAjT,EAAA,OAMX,OACEsF,EAAArC,EAAAsC,cAAC2C,EAAA,cAAD,CACEX,YAAaJ,KAAKI,YAClB/C,MAAOA,EACPV,UAAW,GACXqE,OAAQhB,KAAKK,iBApBrB,CAAAM,IAAA,mBAAA7G,MAAA,SAAAwG,GAkC6D,IAAzCC,EAAyCD,EAAzCC,MAAOrC,EAAkCoC,EAAlCpC,MACvB,GAAIqC,EACF,OAAOpC,EAAArC,EAAAsC,cAAA,WAAMmC,EAAM7E,SAGrB,IAAMgQ,EAAQK,QAAQ7N,GAChBmN,EAAUnN,EAAQA,EAAM8N,YAAc,MAE5C,OACE7N,EAAArC,EAAAsC,cAAA,WACED,EAAArC,EAAAsC,cAAA,mDACyCD,EAAArC,EAAAsC,cAAA,uBADzC,+CAIAD,EAAArC,EAAAsC,cAAC6N,GAAD,CAAUP,MAAOA,EAAOL,QAASA,IACjClN,EAAArC,EAAAsC,cAAA,kFACyE,IACvED,EAAArC,EAAAsC,cAAA,KACEgM,KAAK,2DACLvB,OAAO,SACPqD,IAAI,uBAHN,mBAFF,UAjDRP,EAAA,CAA4BvJ,uBCiBf+J,gBAAM5Q,OAAO,QC1Bb6Q,GAAb,WAKE,SAAAA,IAAetM,OAAAC,EAAA,EAAAD,CAAAE,KAAAoM,GAAApM,KAJRqM,iBAIO,EAAArM,KAHNsM,SAGM,EAAAtM,KAFNuM,UAEM,EACZvM,KAAKsM,IAAM,IAAIE,IACfxM,KAAKqM,aAAc,EACnBrM,KAAKuM,KAAO,GARhB,OAAAzM,OAAAe,EAAA,EAAAf,CAAAsM,EAAA,EAAAzL,IAAA,cAAA7G,MAAA,SAWc2S,GAAwC,IAAA5M,EAAAG,KAElD,OADAA,KAAKuM,KAAKG,KAAKD,GACR,CACLE,QAAS,WACP,IAAMnC,EAAQ3K,EAAK0M,KAAKK,QAAQH,GAChC5M,EAAK0M,KAAKM,OAAOrC,EAAO,OAhBhC,CAAA7J,IAAA,YAAA7G,MAAA,SAqBYgT,GAAkB,IAAA3L,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IAC1B,QAAAC,EAAAC,EAAkBxB,KAAKuM,KAAvBhR,OAAAoG,cAAAR,GAAAI,EAAAC,EAAAtF,QAAA0F,MAAAT,GAAA,EAA6B,EAC3B4L,EAD2BxL,EAAAzH,OACvBgT,IAFoB,MAAAlR,GAAAwF,GAAA,EAAAC,EAAAzF,EAAA,YAAAuF,GAAA,MAAAK,EAAAM,QAAAN,EAAAM,SAAA,WAAAV,EAAA,MAAAC,MArB9B,CAAAV,IAAA,aAAA7G,MAAA,SA2BakT,GACT,OAAOhN,KAAKsM,IAAIjD,IAAI2D,EAAKtS,MA5B7B,CAAAiG,IAAA,SAAA7G,MAAA,SA+BSkT,GACL,IAAMC,EAAcjN,KAAKsM,IAAIjD,IAAI2D,EAAKtS,IAGtC,OAFAsF,KAAKsM,IAAIY,IAAIF,EAAKtS,IACbuS,GAAajN,KAAKmN,UAAUH,IACzBC,IAnCZ,CAAAtM,IAAA,iBAAA7G,MAAA,WAuCIkG,KAAKqM,aAAc,IAvCvB,CAAA1L,IAAA,gBAAA7G,MAAA,WA2CIkG,KAAKqM,aAAc,IA3CvB,CAAA1L,IAAA,SAAA7G,MAAA,SA8CSkT,GACAhN,KAAKsM,IAAIc,OAAOJ,EAAKtS,KACxBsF,KAAKsM,IAAIY,IAAIF,EAAKtS,IAEpBsF,KAAKmN,UAAUH,KAlDnB,CAAArM,IAAA,QAAA7G,MAAA,WAsDIkG,KAAKsM,IAAIe,QACTrN,KAAKmN,UAAUhB,MAvDnB,CAAAxL,IAAA,aAAA7G,MAAA,WA2DI,OAAOsJ,MAAMkK,KAAKtN,KAAKsM,OA3D3B,CAAA3L,IAAA,UAAA7G,MAAA,WA+DI,OAAyB,IAAlBkG,KAAKsM,IAAIiB,OA/DpB,CAAA5M,IAAA,WAAA7G,MAAA,WAmEI,OAAsB,IAAlBkG,KAAKsM,IAAIiB,KACJ,mBACoB,IAAlBvN,KAAKsM,IAAIiB,KACX,kBAEP,GAAApS,OAAU6E,KAAKsM,IAAIiB,KAAnB,uBAxENnB,EAAA,uBCUaoB,GAAb,SAAA5N,GAAA,SAAA4N,IAAA,IAAAxK,EAAAnD,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAwN,GAAA,QAAAvK,EAAAC,UAAAC,OAAA9J,EAAA,IAAA+J,MAAAH,GAAAI,EAAA,EAAAA,EAAAJ,EAAAI,IAAAhK,EAAAgK,GAAAH,UAAAG,GAAA,OAAAxD,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,MAAAgD,EAAAlD,OAAAI,EAAA,EAAAJ,CAAA0N,IAAArN,KAAAmD,MAAAN,EAAA,CAAAhD,MAAA7E,OAAA9B,MACU0T,SADV,EAAAlN,EA+CE4N,aAAe,SAAC9E,GACO,IAAjBA,EAAM+E,SAEV/E,EAAMgF,iBACN9N,EAAK3B,MAAM0P,UAAUC,OAAOhO,EAAK3B,MAAM8O,MACvCnN,EAAK3B,MAAM0P,UAAUE,iBACrBjO,EAAKwK,gBArDTxK,EAwDEkO,aAAe,SAACpF,GACT9I,EAAK3B,MAAM0P,UAAUvB,cAE1B1D,EAAMgF,iBACF9N,EAAK3B,MAAM0P,UAAUI,OAAOnO,EAAK3B,MAAM8O,OACzCnN,EAAKwK,gBA7DXxK,EAAA,OAAAC,OAAAc,EAAA,EAAAd,CAAA0N,EAAA5N,GAAAE,OAAAe,EAAA,EAAAf,CAAA0N,EAAA,EAAA7M,IAAA,oBAAA7G,MAAA,WAGsB,IAAA0J,EAAAxD,KAClBA,KAAK+M,IAAM/M,KAAK9B,MAAM0P,UAAUK,YAAY,SAAA/U,GACtCA,IAASiT,IAAK3I,EAAK6G,kBAL7B,CAAA1J,IAAA,uBAAA7G,MAAA,WAUIkG,KAAK+M,KAAO/M,KAAK+M,IAAIJ,YAVzB,CAAAhM,IAAA,SAAA7G,MAAA,WAaW,IAAAoU,EACkBlO,KAAK9B,MAAvB8O,EADAkB,EACAlB,KAAMxD,EADN0E,EACM1E,SACP2E,EAAKC,KAAOC,SAASrB,EAAKsB,YAC1BC,EAAc/E,GAAYA,EAASgF,QAAS9T,KAAOsS,EAAKwB,QAAS9T,GAEjE+T,EAAc,CAAC,gBACjBzO,KAAK9B,MAAM0P,UAAUc,WAAW1B,IAClCyB,EAAY/B,KAAK,yBAEnB,IAAIiC,EAAgB,KAYpB,OAXKJ,IACHI,EACExQ,EAAArC,EAAAsC,cAAA,OAAKE,UAAU,0BACbH,EAAArC,EAAAsC,cAAA,QAAME,UAAU,uBACdH,EAAArC,EAAAsC,cAAA,OAAKmB,IAAKyN,EAAKwB,QAASrP,OAAQyP,QAAUpP,IAAI,MAEhDrB,EAAArC,EAAAsC,cAAA,QAAME,UAAU,qBAAqB0O,EAAKwB,QAASpV,QAMvD+E,EAAArC,EAAAsC,cAAA,OACEE,UAAWmQ,EAAYI,KAAK,KAC5BC,YAAa9O,KAAKyN,aAClBsB,YAAa/O,KAAK+N,cAEjBY,EACDxQ,EAAArC,EAAAsC,cAAA,QAAME,UAAU,0BAA0B6P,EAAGa,OAAO,YACpD7Q,EAAArC,EAAAsC,cAAA,QAAME,UAAU,qBAAqB0O,EAAKrS,WA1ClD6S,EAAA,CAA0BpL,aCDb6M,GAAb,SAAArP,GAAA,SAAAqP,IAAA,IAAAjM,EAAAnD,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAiP,GAAA,QAAAhM,EAAAC,UAAAC,OAAA9J,EAAA,IAAA+J,MAAAH,GAAAI,EAAA,EAAAA,EAAAJ,EAAAI,IAAAhK,EAAAgK,GAAAH,UAAAG,GAAA,OAAAxD,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,MAAAgD,EAAAlD,OAAAI,EAAA,EAAAJ,CAAAmP,IAAA9O,KAAAmD,MAAAN,EAAA,CAAAhD,MAAA7E,OAAA9B,MACU6V,YADV,EAAArP,EA2DEsP,WAAa,WACXtP,EAAK3B,MAAM0P,UAAUwB,iBA5DzBvP,EA+DEwP,YAAc,WACZxP,EAAK3B,MAAM0P,UAAUwB,iBAhEzBvP,EAAA,OAAAC,OAAAc,EAAA,EAAAd,CAAAmP,EAAArP,GAAAE,OAAAe,EAAA,EAAAf,CAAAmP,EAAA,EAAAtO,IAAA,oBAAA7G,MAAA,WAIIoP,OAAOoG,iBAAiB,UAAWtP,KAAKmP,YAExCnP,KAAKkP,QAAUlP,KAAKkP,OAAOK,mBAN/B,CAAA5O,IAAA,qBAAA7G,MAAA,WAUIkG,KAAKkP,QAAUlP,KAAKkP,OAAOK,mBAV/B,CAAA5O,IAAA,uBAAA7G,MAAA,WAcIoP,OAAOsG,oBAAoB,UAAWxP,KAAKmP,cAd/C,CAAAxO,IAAA,SAAA7G,MAAA,WAkBI,OAAyB,OAArBkG,KAAK9B,MAAMuR,MACNzP,KAAK0P,gBAEL1P,KAAK2P,gBArBlB,CAAAhP,IAAA,gBAAA7G,MAAA,WA0BI,OACEqE,EAAArC,EAAAsC,cAAA,OAAKE,UAAU,0CACbH,EAAArC,EAAAsC,cAAA,KAAGE,UAAU,8BAA8BmB,cAAY,SADzD,aA3BN,CAAAkB,IAAA,cAAA7G,MAAA,WAkCgB,IAAA0J,EAAAxD,KACZ,OACE7B,EAAArC,EAAAsC,cAAA,OACEE,UAAU,gDACVsR,WAAY5P,KAAKqP,aAEhBrP,KAAK9B,MAAMuR,MAAOhP,IAAI,SAACuM,EAAM6C,GAC5B,OACE1R,EAAArC,EAAAsC,cAAC0R,GAAD,CACEnP,IAAKqM,EAAKtS,GACVsS,KAAMA,EACNxD,SAAUhG,EAAKtF,MAAMuR,MAAOI,EAAI,GAChCjC,UAAWpK,EAAKtF,MAAM0P,cAI5BzP,EAAArC,EAAAsC,cAAA,OACEqF,IAAK,SAAAd,GACHa,EAAK0L,OAASvM,UApD1BsM,EAAA,CAA6B7M,aCChB2N,GAAcC,IAAMC,cAA4B,MAOhDC,GAAO,SAAChS,GACnB,IAAMe,EAAOkR,qBAAWJ,IACxB,OAAK9Q,GAESA,EAAKmR,MAAMC,KAAK,SAAAhS,GAAI,OAAIA,EAAKjF,OAAS8E,EAAM9E,OAGnD8E,EAAMS,SALK,MCPP2R,GAAb,SAAA1Q,GAKE,SAAA0Q,EAAYpS,GAAuB,IAAA2B,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAsQ,IACjCzQ,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAwQ,GAAAnQ,KAAAH,KAAM9B,KALA6O,SAI2B,EAAAlN,EAH3B0Q,oBAG2B,EAAA1Q,EAF3B2Q,kBAE2B,EAAA3Q,EA4DnC4Q,SAAW,WACT5Q,EAAK3B,MAAM0P,UAAUP,SA1DrBxN,EAAK0Q,eAAiB1Q,EAAK6Q,OAAOC,KAAZ7Q,OAAA8Q,GAAA,EAAA9Q,CAAAD,GAAuB,SAC7CA,EAAK2Q,aAAe3Q,EAAK6Q,OAAOC,KAAZ7Q,OAAA8Q,GAAA,EAAA9Q,CAAAD,GAAuB,OAJVA,EALrC,OAAAC,OAAAc,EAAA,EAAAd,CAAAwQ,EAAA1Q,GAAAE,OAAAe,EAAA,EAAAf,CAAAwQ,EAAA,EAAA3P,IAAA,oBAAA7G,MAAA,WAYsB,IAAA0J,EAAAxD,KAClBA,KAAK+M,IAAM/M,KAAK9B,MAAM0P,UAAUK,YAAY,kBAAMzK,EAAK6G,kBAb3D,CAAA1J,IAAA,uBAAA7G,MAAA,WAiBIkG,KAAK+M,KAAO/M,KAAK+M,IAAIJ,YAjBzB,CAAAhM,IAAA,SAAA7G,MAAA,WAqBI,IAAM+W,EAAiB,CAAC,cACpBC,EAAW,KACXC,GAAU,EAYd,OAXI/Q,KAAK9B,MAAM0P,UAAUoD,UACvBH,EAAenE,KAAK,kBAEpBqE,GAAU,EACVD,EACE3S,EAAArC,EAAAsC,cAAA,UAAQE,UAAU,eAAegJ,QAAStH,KAAKyQ,UAA/C,UAOFtS,EAAArC,EAAAsC,cAAA,OAAKE,UAAU,0BACbH,EAAArC,EAAAsC,cAAA,KAAGE,UAAWuS,EAAehC,KAAK,MAC/B7O,KAAK9B,MAAM0P,UAAUqD,WACrBH,GAEH3S,EAAArC,EAAAsC,cAAA,OAAKE,UAAU,oCACbH,EAAArC,EAAAsC,cAAC8S,GAAD,CAAM9X,KAAK,iBACT+E,EAAArC,EAAAsC,cAAA,UACEE,UAAU,kBACVmN,SAAUsF,EACVzJ,QAAStH,KAAKuQ,gBAHhB,UAQFpS,EAAArC,EAAAsC,cAAC8S,GAAD,CAAM9X,KAAK,iBACT+E,EAAArC,EAAAsC,cAAA,UACEE,UAAU,kBACVmN,SAAUsF,EACVzJ,QAAStH,KAAKwQ,cAHhB,iBApDZ,CAAA7P,IAAA,SAAA7G,MAAA,SAqES6P,GAAa,IAAA5D,EAAA/F,KAClB,GAAKA,KAAK9B,MAAMiT,QAAhB,CAEA,IAAMC,EAAQC,MAAA,kBAAAxY,EAAA,OAYR8D,EAAY,CAChBgN,MACAwH,QAASnR,KAAK9B,MAAMiT,QACpB1B,MAAOzP,KAAK9B,MAAM0P,UAAU0D,cAG9BC,yBAAevR,KAAK9B,MAAMkC,YAAa,CACrCgR,WACAzU,YACA6U,YAAa,kBAAMzL,EAAK7H,MAAM0P,UAAUP,gBA7F9CiD,EAAA,CAA+BlO,aCWlBqP,WAAb,SAAA7R,GAIE,SAAA6R,EAAYvT,GAAW,IAAA2B,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAyR,IACrB5R,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA2R,GAAAtR,KAAAH,KAAM9B,KAJAwT,mBAGe,EAAA7R,EAFfqK,aAEe,EAAArK,EA2DvB8R,oBAAsB,SAAArR,GAAyC,IAAvCC,EAAuCD,EAAvCC,MAAOrC,EAAgCoC,EAAhCpC,MAC7B,GAAIqC,EACF,OAAOV,EAAK+R,YAAYrR,GAG1B,IAAMsR,EAAe3T,EAAQA,EAAM4T,MAAMJ,cAAgB7R,EAAK6R,cAC9D,OAAO7R,EAAKkS,cAAcF,GAAgB,GAAI,OAjEzBhS,EAuGvBmS,oBAAsB,SAAAtR,GAAyC,IAAvCH,EAAuCG,EAAvCH,MAAOrC,EAAgCwC,EAAhCxC,MAC7B,GAAIqC,EACF,OAAOV,EAAK+R,YAAYrR,GAG1B,IAAMsR,EAAe3T,EAAQA,EAAM4T,MAAMJ,cAAgB7R,EAAK6R,cACxDxH,EAAUhM,EAAQA,EAAM4T,MAAMG,gBAAkBpS,EAAKqK,QAE3D,OAAOrK,EAAKkS,cAAcF,EAAc3H,IA/GnBrK,EA6KvBqS,iBAAmB,SAACvJ,GAClB9I,EAAKqK,QAAU,KACfrK,EAAK4H,MAAMmG,UAAUP,QACrBxN,EAAK2H,SAAS,CAAC2K,eAAgBxJ,EAAME,OAAO/O,SAhLvB+F,EAmLvBuS,QAAU,SAACzJ,GACTA,EAAMgF,iBACN9N,EAAK2H,SAAS,CAACpH,YAAavC,OAlL5BgC,EAAK6R,cAAgB,KACrB7R,EAAKqK,QAAU,KAEfrK,EAAK4H,MAAQ,CACXrH,YAAavC,IACbsU,eAAgB,KAChBvE,UAAW,IAAIxB,IAEjBvM,EAAKqS,iBAAmBrS,EAAKqS,iBAAiBvB,KAAtB7Q,OAAA8Q,GAAA,EAAA9Q,CAAAD,IAXHA,EAJzB,OAAAC,OAAAc,EAAA,EAAAd,CAAA2R,EAAA7R,GAAAE,OAAAe,EAAA,EAAAf,CAAA2R,EAAA,EAAA9Q,IAAA,SAAA7G,MAAA,WAmBI,OAA2B,OAAvBkG,KAAK0R,cACA1R,KAAKqS,qBAGPrS,KAAKsS,uBAvBhB,CAAA3R,IAAA,cAAA7G,MAAA,SA0BcyG,GACV,OACEpC,EAAArC,EAAAsC,cAAA,OAAKE,UAAU,uCACbH,EAAArC,EAAAsC,cAAA,4BACAD,EAAArC,EAAAsC,cAAA,QAAME,UAAU,mCACdH,EAAArC,EAAAsC,cAAA,UACEE,UAAU,sCACVxE,MAAM,MACN2R,UAAQ,GAERtN,EAAArC,EAAAsC,cAAA,UAAQtE,MAAM,OAAd,SAGJqE,EAAArC,EAAAsC,cAAA,OAAKE,UAAU,yBAAyBiC,EAAM7E,YAvCtD,CAAAiF,IAAA,qBAAA7G,MAAA,WA6CI,IAAMuD,EAAKkV,MAAA,kBAAA1Z,EAAA,MAQX,OACEsF,EAAArC,EAAAsC,cAAC2C,EAAA,cAAD,CACEX,YAAaJ,KAAKyH,MAAMrH,YACxB/C,MAAOA,EACPV,UAAW,GACXqE,OAAQhB,KAAK2R,wBA1DrB,CAAAhR,IAAA,qBAAA7G,MAAA,WAyEI,IAAMuD,EAAKmV,MAAA,kBAAA3Z,EAAA,MAoBL8D,EAAY,CAChBwU,QAASnR,KAAKyH,MAAM0K,gBAAkB,IAGxC,OACEhU,EAAArC,EAAAsC,cAAC2C,EAAA,cAAD,CACEX,YAAaJ,KAAKyH,MAAMrH,YACxB/C,MAAOA,EACPV,UAAWA,EACXqE,OAAQhB,KAAKgS,wBAtGrB,CAAArR,IAAA,gBAAA7G,MAAA,SAuHI+X,EACA3H,GACA,IAAA1G,EAAAxD,KACI6R,KACG7R,KAAKyH,MAAM0K,gBAAkBN,EAAa1O,OAAS,GACtDsP,WAAW,kBAAMjP,EAAKgE,SAAS,CAAC2K,eAAgBN,EAAa,MAAM,GAErE7R,KAAK0R,cAAgBG,GAGnB3H,IACFlK,KAAKkK,QAAUA,GAGjB,IAAMwI,EAAsBb,GAAgB,CAAC,OACvCc,EAAiB3S,KAAKyH,MAAM0K,gBAAkB,MAEpD,OACEhU,EAAArC,EAAAsC,cAAA,OAAKE,UAAU,kBACbH,EAAArC,EAAAsC,cAAA,4BACAD,EAAArC,EAAAsC,cAAA,QAAME,UAAU,mCACdH,EAAArC,EAAAsC,cAAA,SAAOE,UAAU,UAAUsU,QAAQ,0BAAnC,WAGAzU,EAAArC,EAAAsC,cAAA,OAAKE,UAAU,eACbH,EAAArC,EAAAsC,cAAA,UACEE,UAAU,0DACV5D,GAAG,yBACHZ,MAAO6Y,EACPlH,UAAWoG,EACXtH,SAAUvK,KAAKkS,kBAEdQ,EAAoBjS,IAAI,SAAArH,GACvB,OACE+E,EAAArC,EAAAsC,cAAA,UAAQuC,IAAKvH,EAAMU,MAAOV,GACvBA,MAKT+E,EAAArC,EAAAsC,cAAA,UACEE,UAAU,2CACVgJ,QAAStH,KAAKoS,SAEdjU,EAAArC,EAAAsC,cAAA,KAAGE,UAAU,cAAcmB,eAAA,IAJ7B,cAQJtB,EAAArC,EAAAsC,cAACyU,GAAD,CAASpD,MAAOvF,EAAS0D,UAAW5N,KAAKyH,MAAMmG,YAC/CzP,EAAArC,EAAAsC,cAAC0U,GAAD,CACE1S,YAAaJ,KAAKyH,MAAMrH,YACxB+Q,QAASnR,KAAKyH,MAAM0K,gBAAkB,GACtCvE,UAAW5N,KAAKyH,MAAMmG,iBA3KhC6D,EAAA,CAA4BrP,cCTf2Q,GAAgB,SAAC7U,GAAD,OAC3BC,EAAArC,EAAAsC,cAAC2R,GAAYiD,SAAb,CAAsBlZ,MAAOoE,EAAMe,MACjCd,EAAArC,EAAAsC,cAAA,OAAKE,UAAU,eACbH,EAAArC,EAAAsC,cAAA,OAAKE,UAAU,YACbH,EAAArC,EAAAsC,cAAC6U,EAAD,OAEF9U,EAAArC,EAAAsC,cAAA,OAAKE,UAAU,YACbH,EAAArC,EAAAsC,cAAC8U,EAAA,EAAD,CAAOC,KAAK,IAAIC,UAAWtU,EAAWL,OAAK,IAC3CN,EAAArC,EAAAsC,cAAC8U,EAAA,EAAD,CAAOC,KAAK,UAAUC,UAAWzT,EAAQlB,OAAK,IAC9CN,EAAArC,EAAAsC,cAAC8U,EAAA,EAAD,CAAOC,KAAK,gBAAgBC,UAAWrP,IACvC5F,EAAArC,EAAAsC,cAAC8U,EAAA,EAAD,CAAOC,KAAK,UAAUC,UAAW3K,KACjCtK,EAAArC,EAAAsC,cAAC8U,EAAA,EAAD,CAAOC,KAAK,UAAUC,UAAWzH,KACjCxN,EAAArC,EAAAsC,cAAC8U,EAAA,EAAD,CAAOC,KAAK,UAAUC,UAAW3B,SCvBnC4B,WAAU,GAAAlY,OAAMC,4BAAN,wBAQHkY,GAAS,SAACpV,GACrB,IAAIqV,EAAiB,KAErB,GAAIrV,EAAM6G,SAAU,CAClB,IAAIyO,EAAkB,GAClBtV,EAAMwB,OACR8T,EAAgB9G,KACdvO,EAAArC,EAAAsC,cAAA,QAAMuC,IAAI,IAAIrC,UAAU,oCACrBJ,EAAMwB,MAEPvB,EAAArC,EAAAsC,cAAA,KACEuC,IAAI,IACJrC,UAAU,yCACVmB,cAAY,WAKpB+T,EAAgB9G,KACdvO,EAAArC,EAAAsC,cAACG,EAAA,EAAD,CACEC,GAAE,WAAArD,OAAa+C,EAAM6G,UACrBpE,IAAI,IACJrC,UAAU,0DAHZ,IAKIJ,EAAM6G,WAIZwO,EACEpV,EAAArC,EAAAsC,cAAAD,EAAArC,EAAA2X,SAAA,KACGD,EACDrV,EAAArC,EAAAsC,cAAA,OAAKE,UAAU,oCAAoCiB,IAAKrB,EAAMiB,OAAQK,IAAI,KAC1ErB,EAAArC,EAAAsC,cAAA,KAAGgM,KAAMiJ,GAAY/U,UAAU,qCAC7BH,EAAArC,EAAAsC,cAAA,KAAGE,UAAU,sBAAsBmB,cAAY,SADjD,YAQN,OACEtB,EAAArC,EAAAsC,cAAA,OAAKE,UAAU,6BACbH,EAAArC,EAAAsC,cAAA,OAAKE,UAAU,sDACbH,EAAArC,EAAAsC,cAAA,UACEhE,KAAK,SACLkE,UAAU,2BACVoV,cAAY,WACZC,cAAY,gCACZC,gBAAc,SAEdzV,EAAArC,EAAAsC,cAAA,QAAME,UAAU,uBAAhB,sBAEFH,EAAArC,EAAAsC,cAAA,OAAKE,UAAU,4BAAf,iBAEAH,EAAArC,EAAAsC,cAAA,OACEE,UAAU,uCACV5D,GAAG,gCAEF6Y,MC/DEM,WAAb,SAAAjU,GAAA,SAAAiU,IAAA,OAAA/T,OAAAC,EAAA,EAAAD,CAAAE,KAAA6T,GAAA/T,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA+T,GAAAvQ,MAAAtD,KAAAkD,YAAA,OAAApD,OAAAc,EAAA,EAAAd,CAAA+T,EAAAjU,GAAAE,OAAAe,EAAA,EAAAf,CAAA+T,EAAA,EAAAlT,IAAA,oBAAA7G,MAAA,WAEIyO,SAAS5J,SAAS,GAAGmV,UAAU5G,IAAI,sBAFvC,CAAAvM,IAAA,SAAA7G,MAAA,WAMI,OACEqE,EAAArC,EAAAsC,cAAA,OAAKE,UAAU,2BACbH,EAAArC,EAAAsC,cAAA,6CACAD,EAAArC,EAAAsC,cAAA,SACED,EAAArC,EAAAsC,cAAA,KAAGgM,KAAMpK,KAAK9B,MAAM6V,QAASzV,UAAU,wBACrCH,EAAArC,EAAAsC,cAAA,OACEoB,IAAI,qBACJwU,OAAO,KACPC,MAAM,MACN1U,IAAI,6DACJ2U,OAAO,qIAPb,qCAWE/V,EAAArC,EAAAsC,cAAA,KAAGgM,KAAK,+CAAR,6BAIFjM,EAAArC,EAAAsC,cAAA,KAAGE,UAAU,cACXH,EAAArC,EAAAsC,cAAA,UACED,EAAArC,EAAAsC,cAAA,2CAC6BD,EAAArC,EAAAsC,cAAA,qBAD7B,6BA1BZ,CAAAuC,IAAA,uBAAA7G,MAAA,WAqCIyO,SAAS5J,SAAS,GAAGmV,UAAUK,OAAO,wBArC1CN,EAAA,CAA2BzR,cCWdgS,WAAb,SAAAxU,GAGE,SAAAwU,EAAYlW,GAAW,IAAA2B,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAoU,IACrBvU,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAsU,GAAAjU,KAAAH,KAAM9B,KAHAkC,iBAEe,EAAAP,EAwCvBQ,aAAe,SAACuL,GACd,IxBpC2BhQ,EwBoCvBsB,EAAO,KACP6H,EAAW,GACXrF,EAAQ,GACRP,EAAS,GAEb,IxBzC2BvD,EwByCRgQ,EAAOrL,QxBxCd3E,EAAqBU,SAAWhB,EwByC1C,GAA4B,MAAxBsQ,EAAOrL,MAAMnE,OAAgB,CAC/B,IAAMiY,EAASC,mBAAmB/L,SAASY,SAAUc,UACrD/M,EAAOiB,EAAArC,EAAAsC,cAACmW,GAAD,CAAOR,QAAO,GAAA5Y,OAAKE,EAAL,YAAAF,OAAwBkZ,UAE7CnX,EAAOiB,EAAArC,EAAAsC,cAAA,WAAMwN,EAAOrL,MAAM7E,cAEvB,GAAIkQ,EAAO1N,MAAO,CACvB,IAAMe,EAAO2M,EAAO1N,MAAM8D,MAAMwS,GAChCzP,EAAW9F,EAAK7F,KACZwS,EAAO1N,MAAMwB,QACfA,EAAQkM,EAAO1N,MAAMwB,MAAM+U,KAAK9Z,MAE9BsE,EAAKE,QAAUF,EAAKE,OAAOE,UAC7BF,EAASF,EAAKE,OAAOE,SAGvBnC,EAAOiB,EAAArC,EAAAsC,cAACsW,GAAD,CAAezV,KAAMA,SAE5B/B,EACEiB,EAAArC,EAAAsC,cAAA,OAAKE,UAAU,+BACbH,EAAArC,EAAAsC,cAAA,KAAGE,UAAU,WACXH,EAAArC,EAAAsC,cAAA,KAAGE,UAAU,8BAA8BmB,cAAY,SADzD,YAQN,OACEtB,EAAArC,EAAAsC,cAACG,EAAA,EAAD,KACEJ,EAAArC,EAAAsC,cAAA,OAAKE,UAAU,mBACbH,EAAArC,EAAAsC,cAAA,OAAKE,UAAU,OACbH,EAAArC,EAAAsC,cAACuW,GAAD,CAAQ5P,SAAUA,EAAUrF,MAAOA,EAAOP,OAAQA,KAEnDjC,KA/EP2C,EAAKO,YAAcvC,IAFEgC,EAHzB,OAAAC,OAAAc,EAAA,EAAAd,CAAAsU,EAAAxU,GAAAE,OAAAe,EAAA,EAAAf,CAAAsU,EAAA,EAAAzT,IAAA,SAAA7G,MAAA,WASI,IAAMuD,EAAKuX,MAAA,kBAAA/b,EAAA,OAwBX,OACEsF,EAAArC,EAAAsC,cAAC2C,EAAA,cAAD,CACEX,YAAaJ,KAAKI,YAClB/C,MAAOA,EACPV,UAAW,GACXqE,OAAQhB,KAAKK,mBAtCrB+T,EAAA,CAAyBhS,cCPL2J,QACW,cAA7B7C,OAAOC,SAAS0L,UAEe,UAA7B3L,OAAOC,SAAS0L,UAEhB3L,OAAOC,SAAS0L,SAASxQ,MACvB,2DCJNyQ,IAAS9T,OAAO7C,EAAArC,EAAAsC,cAAC2W,GAAD,MAASxM,SAASyM,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcxJ,MAAMyJ,KAAK,SAAAC,GACjCA,EAAaC,gDE3InBxc,EAAAC,EAAAC,GAwBA,IAAMC,EAAyB,WAC/B,IAAIC,EAAK,CACP,CACEC,KAAQ,cACRC,MAAS,KACTC,KAAQ,QACRE,WAAc,KACdD,KAAQ,KACRI,aAAgB,QAChBC,QAAU,EACVC,WAAc,CACZ,CACET,KAAQ,cACRC,MAAS,KACTC,KAAQ,gBACRC,KAAQ,KACRC,WAAc,SAKtB,MAAO,CACLJ,KAAQ,UACRiB,SAAY,CACVjB,KAAQ,WACRE,KAAQ,qBACRgB,KAAQ,QACRC,SAAY,KACZC,oBAAuB,GACvBX,WAAeV,GAEjBsB,UAAa,CACXrB,KAAQ,YACRE,KAAQ,qBACRkB,oBAAuB,GACvBX,WAAeV,GAEjBuB,OAAU,CACRC,cAAiB,QACjBrB,KAAQ,qBACRsB,GAAM,KACNC,KAAQ,qEACRN,SAAY,KA1Ce,GA8C9BrB,EAAa4B,KAAO,mCACN5B,6CCvEfH,EAAAC,EAAAC,GAoDA,IAAMC,EAAyB,WAC/B,IAAIC,EAAK,CACP,CACEC,KAAQ,gBACRE,KAAQ,UACRgB,KAAQ,UACRS,aAAgB,OAGpBtB,EAAK,CACHL,KAAQ,cACRC,MAAS,KACTC,KAAQ,KACRC,KAAQ,KACRC,WAAc,MAEhBE,EAAK,CACH,CACEN,KAAQ,cACRC,MAAS,KACTC,KAAQ,QACRE,WAAc,KACdD,KAAQ,KACRI,aAAgB,QAChBC,QAAU,EACVC,WAAc,CACZ,CACET,KAAQ,cACRC,MAAS,KACTC,KAAQ,gBACRC,KAAQ,KACRC,WAAc,MAEhB,CACEJ,KAAQ,cACRC,MAAS,KACTC,KAAQ,kBACRE,WAAc,KACdD,KAAQ,CACN,CACEH,KAAQ,WACRE,KAAQ,UACR0B,aAAgB,YAGpBrB,aAAgB,OAChBC,QAAU,EACVC,WAAc,CACXJ,EACD,CACEL,KAAQ,cACRC,MAAS,KACTC,KAAQ,UACRE,WAAc,KACdD,KAAQ,KACRI,aAAgB,OAChBC,QAAU,EACVC,WAAc,CACXJ,EACD,CACEL,KAAQ,cACRC,MAAS,KACTC,KAAQ,OACRC,KAAQ,KACRC,WAAc,MAEhB,CACEJ,KAAQ,cACRC,MAAS,KACTC,KAAQ,SACRE,WAAc,KACdD,KAAQ,KACRI,aAAgB,SAChBC,QAAU,EACVC,WAAc,CACZ,CACET,KAAQ,cACRC,MAAS,KACTC,KAAQ,UACRC,KAAQ,KACRC,WAAc,UAMxB,CACEJ,KAAQ,cACRC,MAAS,KACTC,KAAQ,YACRC,KAAQ,KACRC,WAAc,MAEhB,CACEJ,KAAQ,cACRC,MAAS,KACTC,KAAQ,OACRC,KAAQ,KACRC,WAAc,WAO1B,MAAO,CACLJ,KAAQ,UACRiB,SAAY,CACVjB,KAAQ,WACRE,KAAQ,qBACRgB,KAAQ,QACRC,SAAY,KACZC,oBAAwBrB,EACxBU,WAAeH,GAEjBe,UAAa,CACXrB,KAAQ,YACRE,KAAQ,qBACRkB,oBAAwBrB,EACxBU,WAAeH,GAEjBgB,OAAU,CACRC,cAAiB,QACjBrB,KAAQ,qBACRsB,GAAM,KACNC,KAAQ,0RACRN,SAAY,KA9He,GAkI9BrB,EAAa4B,KAAO,mCACN5B","file":"static/js/main.4222157c.chunk.js","sourcesContent":["/* tslint:disable */\n\nimport { ConcreteRequest } from \"relay-runtime\";\nexport type Presence = \"ACTIVE\" | \"AWAY\" | \"UNKNOWN\" | \"%future added value\";\nexport type PeopleQueryVariables = {};\nexport type PeopleQueryResponse = {\n    readonly users: {\n        readonly all: ReadonlyArray<{\n            readonly name: string;\n            readonly presence: Presence;\n            readonly avatar: {\n                readonly image48: string | null;\n            };\n            readonly status: {\n                readonly message: string | null;\n                readonly emoji: string | null;\n            };\n        }>;\n    };\n    readonly titles: {\n        readonly all: {\n            readonly edges: ReadonlyArray<{\n                readonly node: {\n                    readonly text: string;\n                    readonly subject: string | null;\n                };\n            }>;\n        };\n    } | null;\n};\nexport type PeopleQuery = {\n    readonly response: PeopleQueryResponse;\n    readonly variables: PeopleQueryVariables;\n};\n\n\n\n/*\nquery PeopleQuery {\n  users {\n    all {\n      name\n      presence\n      avatar {\n        image48\n      }\n      status {\n        message\n        emoji\n      }\n      id\n    }\n  }\n  titles: documents(set: \"title\") {\n    all(criteria: {}) {\n      edges {\n        node {\n          text\n          subject\n          id\n        }\n      }\n    }\n  }\n}\n*/\n\nconst node: ConcreteRequest = (function(){\nvar v0 = {\n  \"kind\": \"ScalarField\",\n  \"alias\": null,\n  \"name\": \"name\",\n  \"args\": null,\n  \"storageKey\": null\n},\nv1 = {\n  \"kind\": \"ScalarField\",\n  \"alias\": null,\n  \"name\": \"presence\",\n  \"args\": null,\n  \"storageKey\": null\n},\nv2 = {\n  \"kind\": \"LinkedField\",\n  \"alias\": null,\n  \"name\": \"avatar\",\n  \"storageKey\": null,\n  \"args\": null,\n  \"concreteType\": \"Avatar\",\n  \"plural\": false,\n  \"selections\": [\n    {\n      \"kind\": \"ScalarField\",\n      \"alias\": null,\n      \"name\": \"image48\",\n      \"args\": null,\n      \"storageKey\": null\n    }\n  ]\n},\nv3 = {\n  \"kind\": \"LinkedField\",\n  \"alias\": null,\n  \"name\": \"status\",\n  \"storageKey\": null,\n  \"args\": null,\n  \"concreteType\": \"Status\",\n  \"plural\": false,\n  \"selections\": [\n    {\n      \"kind\": \"ScalarField\",\n      \"alias\": null,\n      \"name\": \"message\",\n      \"args\": null,\n      \"storageKey\": null\n    },\n    {\n      \"kind\": \"ScalarField\",\n      \"alias\": null,\n      \"name\": \"emoji\",\n      \"args\": null,\n      \"storageKey\": null\n    }\n  ]\n},\nv4 = [\n  {\n    \"kind\": \"Literal\",\n    \"name\": \"set\",\n    \"value\": \"title\"\n  }\n],\nv5 = [\n  {\n    \"kind\": \"Literal\",\n    \"name\": \"criteria\",\n    \"value\": {}\n  }\n],\nv6 = {\n  \"kind\": \"ScalarField\",\n  \"alias\": null,\n  \"name\": \"text\",\n  \"args\": null,\n  \"storageKey\": null\n},\nv7 = {\n  \"kind\": \"ScalarField\",\n  \"alias\": null,\n  \"name\": \"subject\",\n  \"args\": null,\n  \"storageKey\": null\n},\nv8 = {\n  \"kind\": \"ScalarField\",\n  \"alias\": null,\n  \"name\": \"id\",\n  \"args\": null,\n  \"storageKey\": null\n};\nreturn {\n  \"kind\": \"Request\",\n  \"fragment\": {\n    \"kind\": \"Fragment\",\n    \"name\": \"PeopleQuery\",\n    \"type\": \"Query\",\n    \"metadata\": null,\n    \"argumentDefinitions\": [],\n    \"selections\": [\n      {\n        \"kind\": \"LinkedField\",\n        \"alias\": null,\n        \"name\": \"users\",\n        \"storageKey\": null,\n        \"args\": null,\n        \"concreteType\": \"UserSet\",\n        \"plural\": false,\n        \"selections\": [\n          {\n            \"kind\": \"LinkedField\",\n            \"alias\": null,\n            \"name\": \"all\",\n            \"storageKey\": null,\n            \"args\": null,\n            \"concreteType\": \"User\",\n            \"plural\": true,\n            \"selections\": [\n              (v0/*: any*/),\n              (v1/*: any*/),\n              (v2/*: any*/),\n              (v3/*: any*/)\n            ]\n          }\n        ]\n      },\n      {\n        \"kind\": \"LinkedField\",\n        \"alias\": \"titles\",\n        \"name\": \"documents\",\n        \"storageKey\": \"documents(set:\\\"title\\\")\",\n        \"args\": (v4/*: any*/),\n        \"concreteType\": \"DocumentSet\",\n        \"plural\": false,\n        \"selections\": [\n          {\n            \"kind\": \"LinkedField\",\n            \"alias\": null,\n            \"name\": \"all\",\n            \"storageKey\": \"all(criteria:{})\",\n            \"args\": (v5/*: any*/),\n            \"concreteType\": \"DocumentConnection\",\n            \"plural\": false,\n            \"selections\": [\n              {\n                \"kind\": \"LinkedField\",\n                \"alias\": null,\n                \"name\": \"edges\",\n                \"storageKey\": null,\n                \"args\": null,\n                \"concreteType\": \"DocumentEdge\",\n                \"plural\": true,\n                \"selections\": [\n                  {\n                    \"kind\": \"LinkedField\",\n                    \"alias\": null,\n                    \"name\": \"node\",\n                    \"storageKey\": null,\n                    \"args\": null,\n                    \"concreteType\": \"Document\",\n                    \"plural\": false,\n                    \"selections\": [\n                      (v6/*: any*/),\n                      (v7/*: any*/)\n                    ]\n                  }\n                ]\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  },\n  \"operation\": {\n    \"kind\": \"Operation\",\n    \"name\": \"PeopleQuery\",\n    \"argumentDefinitions\": [],\n    \"selections\": [\n      {\n        \"kind\": \"LinkedField\",\n        \"alias\": null,\n        \"name\": \"users\",\n        \"storageKey\": null,\n        \"args\": null,\n        \"concreteType\": \"UserSet\",\n        \"plural\": false,\n        \"selections\": [\n          {\n            \"kind\": \"LinkedField\",\n            \"alias\": null,\n            \"name\": \"all\",\n            \"storageKey\": null,\n            \"args\": null,\n            \"concreteType\": \"User\",\n            \"plural\": true,\n            \"selections\": [\n              (v0/*: any*/),\n              (v1/*: any*/),\n              (v2/*: any*/),\n              (v3/*: any*/),\n              (v8/*: any*/)\n            ]\n          }\n        ]\n      },\n      {\n        \"kind\": \"LinkedField\",\n        \"alias\": \"titles\",\n        \"name\": \"documents\",\n        \"storageKey\": \"documents(set:\\\"title\\\")\",\n        \"args\": (v4/*: any*/),\n        \"concreteType\": \"DocumentSet\",\n        \"plural\": false,\n        \"selections\": [\n          {\n            \"kind\": \"LinkedField\",\n            \"alias\": null,\n            \"name\": \"all\",\n            \"storageKey\": \"all(criteria:{})\",\n            \"args\": (v5/*: any*/),\n            \"concreteType\": \"DocumentConnection\",\n            \"plural\": false,\n            \"selections\": [\n              {\n                \"kind\": \"LinkedField\",\n                \"alias\": null,\n                \"name\": \"edges\",\n                \"storageKey\": null,\n                \"args\": null,\n                \"concreteType\": \"DocumentEdge\",\n                \"plural\": true,\n                \"selections\": [\n                  {\n                    \"kind\": \"LinkedField\",\n                    \"alias\": null,\n                    \"name\": \"node\",\n                    \"storageKey\": null,\n                    \"args\": null,\n                    \"concreteType\": \"Document\",\n                    \"plural\": false,\n                    \"selections\": [\n                      (v6/*: any*/),\n                      (v7/*: any*/),\n                      (v8/*: any*/)\n                    ]\n                  }\n                ]\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  },\n  \"params\": {\n    \"operationKind\": \"query\",\n    \"name\": \"PeopleQuery\",\n    \"id\": null,\n    \"text\": \"query PeopleQuery {\\n  users {\\n    all {\\n      name\\n      presence\\n      avatar {\\n        image48\\n      }\\n      status {\\n        message\\n        emoji\\n      }\\n      id\\n    }\\n  }\\n  titles: documents(set: \\\"title\\\") {\\n    all(criteria: {}) {\\n      edges {\\n        node {\\n          text\\n          subject\\n          id\\n        }\\n      }\\n    }\\n  }\\n}\\n\",\n    \"metadata\": {}\n  }\n};\n})();\n(node as any).hash = '28094ab31a64fbe177811308b6004e81';\nexport default node;\n","/* tslint:disable */\n\nimport { ConcreteRequest } from \"relay-runtime\";\nexport type Criteria = {\n    readonly query?: string | null;\n    readonly subject?: string | null;\n    readonly speakers?: ReadonlyArray<string> | null;\n    readonly mentions?: ReadonlyArray<string> | null;\n};\nexport type ProfileQueryVariables = {\n    readonly name: string;\n    readonly titleCriteria: Criteria;\n};\nexport type ProfileQueryResponse = {\n    readonly users: {\n        readonly current: {\n            readonly avatar: {\n                readonly image192: string | null;\n            };\n            readonly topReactionsReceived: ReadonlyArray<{\n                readonly count: number;\n                readonly emoji: {\n                    readonly name: string;\n                    readonly url: string | null;\n                };\n            }>;\n            readonly topReactionsGiven: ReadonlyArray<{\n                readonly count: number;\n                readonly emoji: {\n                    readonly name: string;\n                    readonly url: string | null;\n                };\n            }>;\n        } | null;\n    };\n    readonly titles: {\n        readonly all: {\n            readonly edges: ReadonlyArray<{\n                readonly node: {\n                    readonly text: string;\n                };\n            }>;\n        };\n    } | null;\n    readonly quotes: {\n        readonly rank: number;\n    } | null;\n};\nexport type ProfileQuery = {\n    readonly response: ProfileQueryResponse;\n    readonly variables: ProfileQueryVariables;\n};\n\n\n\n/*\nquery ProfileQuery(\n  $name: String!\n  $titleCriteria: Criteria!\n) {\n  users {\n    current: withName(name: $name) {\n      avatar {\n        image192\n      }\n      topReactionsReceived(limit: 10) {\n        count\n        emoji {\n          name\n          url\n        }\n      }\n      topReactionsGiven(limit: 10) {\n        count\n        emoji {\n          name\n          url\n        }\n      }\n      id\n    }\n  }\n  titles: documents(set: \"title\") {\n    all(first: 100, criteria: $titleCriteria) {\n      edges {\n        node {\n          text\n          id\n        }\n      }\n    }\n  }\n  quotes: documents(set: \"quote\") {\n    rank(speaker: $name)\n  }\n}\n*/\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"kind\": \"LocalArgument\",\n    \"name\": \"name\",\n    \"type\": \"String!\",\n    \"defaultValue\": null\n  },\n  {\n    \"kind\": \"LocalArgument\",\n    \"name\": \"titleCriteria\",\n    \"type\": \"Criteria!\",\n    \"defaultValue\": null\n  }\n],\nv1 = [\n  {\n    \"kind\": \"Variable\",\n    \"name\": \"name\",\n    \"variableName\": \"name\"\n  }\n],\nv2 = {\n  \"kind\": \"LinkedField\",\n  \"alias\": null,\n  \"name\": \"avatar\",\n  \"storageKey\": null,\n  \"args\": null,\n  \"concreteType\": \"Avatar\",\n  \"plural\": false,\n  \"selections\": [\n    {\n      \"kind\": \"ScalarField\",\n      \"alias\": null,\n      \"name\": \"image192\",\n      \"args\": null,\n      \"storageKey\": null\n    }\n  ]\n},\nv3 = [\n  {\n    \"kind\": \"Literal\",\n    \"name\": \"limit\",\n    \"value\": 10\n  }\n],\nv4 = [\n  {\n    \"kind\": \"ScalarField\",\n    \"alias\": null,\n    \"name\": \"count\",\n    \"args\": null,\n    \"storageKey\": null\n  },\n  {\n    \"kind\": \"LinkedField\",\n    \"alias\": null,\n    \"name\": \"emoji\",\n    \"storageKey\": null,\n    \"args\": null,\n    \"concreteType\": \"Emoji\",\n    \"plural\": false,\n    \"selections\": [\n      {\n        \"kind\": \"ScalarField\",\n        \"alias\": null,\n        \"name\": \"name\",\n        \"args\": null,\n        \"storageKey\": null\n      },\n      {\n        \"kind\": \"ScalarField\",\n        \"alias\": null,\n        \"name\": \"url\",\n        \"args\": null,\n        \"storageKey\": null\n      }\n    ]\n  }\n],\nv5 = {\n  \"kind\": \"LinkedField\",\n  \"alias\": null,\n  \"name\": \"topReactionsReceived\",\n  \"storageKey\": \"topReactionsReceived(limit:10)\",\n  \"args\": (v3/*: any*/),\n  \"concreteType\": \"EmojiCount\",\n  \"plural\": true,\n  \"selections\": (v4/*: any*/)\n},\nv6 = {\n  \"kind\": \"LinkedField\",\n  \"alias\": null,\n  \"name\": \"topReactionsGiven\",\n  \"storageKey\": \"topReactionsGiven(limit:10)\",\n  \"args\": (v3/*: any*/),\n  \"concreteType\": \"EmojiCount\",\n  \"plural\": true,\n  \"selections\": (v4/*: any*/)\n},\nv7 = [\n  {\n    \"kind\": \"Literal\",\n    \"name\": \"set\",\n    \"value\": \"title\"\n  }\n],\nv8 = [\n  {\n    \"kind\": \"Variable\",\n    \"name\": \"criteria\",\n    \"variableName\": \"titleCriteria\"\n  },\n  {\n    \"kind\": \"Literal\",\n    \"name\": \"first\",\n    \"value\": 100\n  }\n],\nv9 = {\n  \"kind\": \"ScalarField\",\n  \"alias\": null,\n  \"name\": \"text\",\n  \"args\": null,\n  \"storageKey\": null\n},\nv10 = {\n  \"kind\": \"LinkedField\",\n  \"alias\": \"quotes\",\n  \"name\": \"documents\",\n  \"storageKey\": \"documents(set:\\\"quote\\\")\",\n  \"args\": [\n    {\n      \"kind\": \"Literal\",\n      \"name\": \"set\",\n      \"value\": \"quote\"\n    }\n  ],\n  \"concreteType\": \"DocumentSet\",\n  \"plural\": false,\n  \"selections\": [\n    {\n      \"kind\": \"ScalarField\",\n      \"alias\": null,\n      \"name\": \"rank\",\n      \"args\": [\n        {\n          \"kind\": \"Variable\",\n          \"name\": \"speaker\",\n          \"variableName\": \"name\"\n        }\n      ],\n      \"storageKey\": null\n    }\n  ]\n},\nv11 = {\n  \"kind\": \"ScalarField\",\n  \"alias\": null,\n  \"name\": \"id\",\n  \"args\": null,\n  \"storageKey\": null\n};\nreturn {\n  \"kind\": \"Request\",\n  \"fragment\": {\n    \"kind\": \"Fragment\",\n    \"name\": \"ProfileQuery\",\n    \"type\": \"Query\",\n    \"metadata\": null,\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"selections\": [\n      {\n        \"kind\": \"LinkedField\",\n        \"alias\": null,\n        \"name\": \"users\",\n        \"storageKey\": null,\n        \"args\": null,\n        \"concreteType\": \"UserSet\",\n        \"plural\": false,\n        \"selections\": [\n          {\n            \"kind\": \"LinkedField\",\n            \"alias\": \"current\",\n            \"name\": \"withName\",\n            \"storageKey\": null,\n            \"args\": (v1/*: any*/),\n            \"concreteType\": \"User\",\n            \"plural\": false,\n            \"selections\": [\n              (v2/*: any*/),\n              (v5/*: any*/),\n              (v6/*: any*/)\n            ]\n          }\n        ]\n      },\n      {\n        \"kind\": \"LinkedField\",\n        \"alias\": \"titles\",\n        \"name\": \"documents\",\n        \"storageKey\": \"documents(set:\\\"title\\\")\",\n        \"args\": (v7/*: any*/),\n        \"concreteType\": \"DocumentSet\",\n        \"plural\": false,\n        \"selections\": [\n          {\n            \"kind\": \"LinkedField\",\n            \"alias\": null,\n            \"name\": \"all\",\n            \"storageKey\": null,\n            \"args\": (v8/*: any*/),\n            \"concreteType\": \"DocumentConnection\",\n            \"plural\": false,\n            \"selections\": [\n              {\n                \"kind\": \"LinkedField\",\n                \"alias\": null,\n                \"name\": \"edges\",\n                \"storageKey\": null,\n                \"args\": null,\n                \"concreteType\": \"DocumentEdge\",\n                \"plural\": true,\n                \"selections\": [\n                  {\n                    \"kind\": \"LinkedField\",\n                    \"alias\": null,\n                    \"name\": \"node\",\n                    \"storageKey\": null,\n                    \"args\": null,\n                    \"concreteType\": \"Document\",\n                    \"plural\": false,\n                    \"selections\": [\n                      (v9/*: any*/)\n                    ]\n                  }\n                ]\n              }\n            ]\n          }\n        ]\n      },\n      (v10/*: any*/)\n    ]\n  },\n  \"operation\": {\n    \"kind\": \"Operation\",\n    \"name\": \"ProfileQuery\",\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"selections\": [\n      {\n        \"kind\": \"LinkedField\",\n        \"alias\": null,\n        \"name\": \"users\",\n        \"storageKey\": null,\n        \"args\": null,\n        \"concreteType\": \"UserSet\",\n        \"plural\": false,\n        \"selections\": [\n          {\n            \"kind\": \"LinkedField\",\n            \"alias\": \"current\",\n            \"name\": \"withName\",\n            \"storageKey\": null,\n            \"args\": (v1/*: any*/),\n            \"concreteType\": \"User\",\n            \"plural\": false,\n            \"selections\": [\n              (v2/*: any*/),\n              (v5/*: any*/),\n              (v6/*: any*/),\n              (v11/*: any*/)\n            ]\n          }\n        ]\n      },\n      {\n        \"kind\": \"LinkedField\",\n        \"alias\": \"titles\",\n        \"name\": \"documents\",\n        \"storageKey\": \"documents(set:\\\"title\\\")\",\n        \"args\": (v7/*: any*/),\n        \"concreteType\": \"DocumentSet\",\n        \"plural\": false,\n        \"selections\": [\n          {\n            \"kind\": \"LinkedField\",\n            \"alias\": null,\n            \"name\": \"all\",\n            \"storageKey\": null,\n            \"args\": (v8/*: any*/),\n            \"concreteType\": \"DocumentConnection\",\n            \"plural\": false,\n            \"selections\": [\n              {\n                \"kind\": \"LinkedField\",\n                \"alias\": null,\n                \"name\": \"edges\",\n                \"storageKey\": null,\n                \"args\": null,\n                \"concreteType\": \"DocumentEdge\",\n                \"plural\": true,\n                \"selections\": [\n                  {\n                    \"kind\": \"LinkedField\",\n                    \"alias\": null,\n                    \"name\": \"node\",\n                    \"storageKey\": null,\n                    \"args\": null,\n                    \"concreteType\": \"Document\",\n                    \"plural\": false,\n                    \"selections\": [\n                      (v9/*: any*/),\n                      (v11/*: any*/)\n                    ]\n                  }\n                ]\n              }\n            ]\n          }\n        ]\n      },\n      (v10/*: any*/)\n    ]\n  },\n  \"params\": {\n    \"operationKind\": \"query\",\n    \"name\": \"ProfileQuery\",\n    \"id\": null,\n    \"text\": \"query ProfileQuery(\\n  $name: String!\\n  $titleCriteria: Criteria!\\n) {\\n  users {\\n    current: withName(name: $name) {\\n      avatar {\\n        image192\\n      }\\n      topReactionsReceived(limit: 10) {\\n        count\\n        emoji {\\n          name\\n          url\\n        }\\n      }\\n      topReactionsGiven(limit: 10) {\\n        count\\n        emoji {\\n          name\\n          url\\n        }\\n      }\\n      id\\n    }\\n  }\\n  titles: documents(set: \\\"title\\\") {\\n    all(first: 100, criteria: $titleCriteria) {\\n      edges {\\n        node {\\n          text\\n          id\\n        }\\n      }\\n    }\\n  }\\n  quotes: documents(set: \\\"quote\\\") {\\n    rank(speaker: $name)\\n  }\\n}\\n\",\n    \"metadata\": {}\n  }\n};\n})();\n(node as any).hash = '6909612b595759bd5819ae0b5de00978';\nexport default node;\n","/* tslint:disable */\n\nimport { ConcreteRequest } from \"relay-runtime\";\nexport type RandomQuoteQueryVariables = {};\nexport type RandomQuoteQueryResponse = {\n    readonly documents: {\n        readonly random: {\n            readonly found: boolean;\n            readonly text: string;\n        };\n    } | null;\n};\nexport type RandomQuoteQuery = {\n    readonly response: RandomQuoteQueryResponse;\n    readonly variables: RandomQuoteQueryVariables;\n};\n\n\n\n/*\nquery RandomQuoteQuery {\n  documents(set: \"quote\") {\n    random(criteria: {}) {\n      found\n      text\n      id\n    }\n  }\n}\n*/\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"kind\": \"Literal\",\n    \"name\": \"set\",\n    \"value\": \"quote\"\n  }\n],\nv1 = [\n  {\n    \"kind\": \"Literal\",\n    \"name\": \"criteria\",\n    \"value\": {}\n  }\n],\nv2 = {\n  \"kind\": \"ScalarField\",\n  \"alias\": null,\n  \"name\": \"found\",\n  \"args\": null,\n  \"storageKey\": null\n},\nv3 = {\n  \"kind\": \"ScalarField\",\n  \"alias\": null,\n  \"name\": \"text\",\n  \"args\": null,\n  \"storageKey\": null\n};\nreturn {\n  \"kind\": \"Request\",\n  \"fragment\": {\n    \"kind\": \"Fragment\",\n    \"name\": \"RandomQuoteQuery\",\n    \"type\": \"Query\",\n    \"metadata\": null,\n    \"argumentDefinitions\": [],\n    \"selections\": [\n      {\n        \"kind\": \"LinkedField\",\n        \"alias\": null,\n        \"name\": \"documents\",\n        \"storageKey\": \"documents(set:\\\"quote\\\")\",\n        \"args\": (v0/*: any*/),\n        \"concreteType\": \"DocumentSet\",\n        \"plural\": false,\n        \"selections\": [\n          {\n            \"kind\": \"LinkedField\",\n            \"alias\": null,\n            \"name\": \"random\",\n            \"storageKey\": \"random(criteria:{})\",\n            \"args\": (v1/*: any*/),\n            \"concreteType\": \"Document\",\n            \"plural\": false,\n            \"selections\": [\n              (v2/*: any*/),\n              (v3/*: any*/)\n            ]\n          }\n        ]\n      }\n    ]\n  },\n  \"operation\": {\n    \"kind\": \"Operation\",\n    \"name\": \"RandomQuoteQuery\",\n    \"argumentDefinitions\": [],\n    \"selections\": [\n      {\n        \"kind\": \"LinkedField\",\n        \"alias\": null,\n        \"name\": \"documents\",\n        \"storageKey\": \"documents(set:\\\"quote\\\")\",\n        \"args\": (v0/*: any*/),\n        \"concreteType\": \"DocumentSet\",\n        \"plural\": false,\n        \"selections\": [\n          {\n            \"kind\": \"LinkedField\",\n            \"alias\": null,\n            \"name\": \"random\",\n            \"storageKey\": \"random(criteria:{})\",\n            \"args\": (v1/*: any*/),\n            \"concreteType\": \"Document\",\n            \"plural\": false,\n            \"selections\": [\n              (v2/*: any*/),\n              (v3/*: any*/),\n              {\n                \"kind\": \"ScalarField\",\n                \"alias\": null,\n                \"name\": \"id\",\n                \"args\": null,\n                \"storageKey\": null\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  },\n  \"params\": {\n    \"operationKind\": \"query\",\n    \"name\": \"RandomQuoteQuery\",\n    \"id\": null,\n    \"text\": \"query RandomQuoteQuery {\\n  documents(set: \\\"quote\\\") {\\n    random(criteria: {}) {\\n      found\\n      text\\n      id\\n    }\\n  }\\n}\\n\",\n    \"metadata\": {}\n  }\n};\n})();\n(node as any).hash = 'b00c2b7f51b5eafc60256f9ab7e571dd';\nexport default node;\n","/* tslint:disable */\n\nimport { ConcreteRequest } from \"relay-runtime\";\nexport type Criteria = {\n    readonly query?: string | null;\n    readonly subject?: string | null;\n    readonly speakers?: ReadonlyArray<string> | null;\n    readonly mentions?: ReadonlyArray<string> | null;\n};\nexport type QuotePageQueryVariables = {\n    readonly c: Criteria;\n};\nexport type QuotePageQueryResponse = {\n    readonly documents: {\n        readonly all: {\n            readonly edges: ReadonlyArray<{\n                readonly node: {\n                    readonly id: string | null;\n                    readonly text: string;\n                };\n            }>;\n            readonly pageInfo: {\n                readonly count: number;\n                readonly hasNextPage: boolean;\n            };\n        };\n    } | null;\n};\nexport type QuotePageQuery = {\n    readonly response: QuotePageQueryResponse;\n    readonly variables: QuotePageQueryVariables;\n};\n\n\n\n/*\nquery QuotePageQuery(\n  $c: Criteria!\n) {\n  documents(set: \"quote\") {\n    all(criteria: $c, first: 20) {\n      edges {\n        node {\n          id\n          text\n        }\n      }\n      pageInfo {\n        count\n        hasNextPage\n      }\n    }\n  }\n}\n*/\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"kind\": \"LocalArgument\",\n    \"name\": \"c\",\n    \"type\": \"Criteria!\",\n    \"defaultValue\": null\n  }\n],\nv1 = [\n  {\n    \"kind\": \"LinkedField\",\n    \"alias\": null,\n    \"name\": \"documents\",\n    \"storageKey\": \"documents(set:\\\"quote\\\")\",\n    \"args\": [\n      {\n        \"kind\": \"Literal\",\n        \"name\": \"set\",\n        \"value\": \"quote\"\n      }\n    ],\n    \"concreteType\": \"DocumentSet\",\n    \"plural\": false,\n    \"selections\": [\n      {\n        \"kind\": \"LinkedField\",\n        \"alias\": null,\n        \"name\": \"all\",\n        \"storageKey\": null,\n        \"args\": [\n          {\n            \"kind\": \"Variable\",\n            \"name\": \"criteria\",\n            \"variableName\": \"c\"\n          },\n          {\n            \"kind\": \"Literal\",\n            \"name\": \"first\",\n            \"value\": 20\n          }\n        ],\n        \"concreteType\": \"DocumentConnection\",\n        \"plural\": false,\n        \"selections\": [\n          {\n            \"kind\": \"LinkedField\",\n            \"alias\": null,\n            \"name\": \"edges\",\n            \"storageKey\": null,\n            \"args\": null,\n            \"concreteType\": \"DocumentEdge\",\n            \"plural\": true,\n            \"selections\": [\n              {\n                \"kind\": \"LinkedField\",\n                \"alias\": null,\n                \"name\": \"node\",\n                \"storageKey\": null,\n                \"args\": null,\n                \"concreteType\": \"Document\",\n                \"plural\": false,\n                \"selections\": [\n                  {\n                    \"kind\": \"ScalarField\",\n                    \"alias\": null,\n                    \"name\": \"id\",\n                    \"args\": null,\n                    \"storageKey\": null\n                  },\n                  {\n                    \"kind\": \"ScalarField\",\n                    \"alias\": null,\n                    \"name\": \"text\",\n                    \"args\": null,\n                    \"storageKey\": null\n                  }\n                ]\n              }\n            ]\n          },\n          {\n            \"kind\": \"LinkedField\",\n            \"alias\": null,\n            \"name\": \"pageInfo\",\n            \"storageKey\": null,\n            \"args\": null,\n            \"concreteType\": \"PageInfo\",\n            \"plural\": false,\n            \"selections\": [\n              {\n                \"kind\": \"ScalarField\",\n                \"alias\": null,\n                \"name\": \"count\",\n                \"args\": null,\n                \"storageKey\": null\n              },\n              {\n                \"kind\": \"ScalarField\",\n                \"alias\": null,\n                \"name\": \"hasNextPage\",\n                \"args\": null,\n                \"storageKey\": null\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  }\n];\nreturn {\n  \"kind\": \"Request\",\n  \"fragment\": {\n    \"kind\": \"Fragment\",\n    \"name\": \"QuotePageQuery\",\n    \"type\": \"Query\",\n    \"metadata\": null,\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"selections\": (v1/*: any*/)\n  },\n  \"operation\": {\n    \"kind\": \"Operation\",\n    \"name\": \"QuotePageQuery\",\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"selections\": (v1/*: any*/)\n  },\n  \"params\": {\n    \"operationKind\": \"query\",\n    \"name\": \"QuotePageQuery\",\n    \"id\": null,\n    \"text\": \"query QuotePageQuery(\\n  $c: Criteria!\\n) {\\n  documents(set: \\\"quote\\\") {\\n    all(criteria: $c, first: 20) {\\n      edges {\\n        node {\\n          id\\n          text\\n        }\\n      }\\n      pageInfo {\\n        count\\n        hasNextPage\\n      }\\n    }\\n  }\\n}\\n\",\n    \"metadata\": {}\n  }\n};\n})();\n(node as any).hash = '6e063f623999a0dc41b92fe0b238d3ed';\nexport default node;\n","/* tslint:disable */\n\nimport { ConcreteRequest } from \"relay-runtime\";\nexport type EventsQueryVariables = {};\nexport type EventsQueryResponse = {\n    readonly calendarURL: string;\n};\nexport type EventsQuery = {\n    readonly response: EventsQueryResponse;\n    readonly variables: EventsQueryVariables;\n};\n\n\n\n/*\nquery EventsQuery {\n  calendarURL\n}\n*/\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"kind\": \"ScalarField\",\n    \"alias\": null,\n    \"name\": \"calendarURL\",\n    \"args\": null,\n    \"storageKey\": null\n  }\n];\nreturn {\n  \"kind\": \"Request\",\n  \"fragment\": {\n    \"kind\": \"Fragment\",\n    \"name\": \"EventsQuery\",\n    \"type\": \"Query\",\n    \"metadata\": null,\n    \"argumentDefinitions\": [],\n    \"selections\": (v0/*: any*/)\n  },\n  \"operation\": {\n    \"kind\": \"Operation\",\n    \"name\": \"EventsQuery\",\n    \"argumentDefinitions\": [],\n    \"selections\": (v0/*: any*/)\n  },\n  \"params\": {\n    \"operationKind\": \"query\",\n    \"name\": \"EventsQuery\",\n    \"id\": null,\n    \"text\": \"query EventsQuery {\\n  calendarURL\\n}\\n\",\n    \"metadata\": {}\n  }\n};\n})();\n(node as any).hash = '388cd7e5bbbedc329dded72e8648dbf6';\nexport default node;\n","/* tslint:disable */\n\nimport { ConcreteRequest } from \"relay-runtime\";\nexport type ActionBarSubmitMutationVariables = {\n    readonly set: string;\n    readonly channel: string;\n    readonly lines: ReadonlyArray<string>;\n};\nexport type ActionBarSubmitMutationResponse = {\n    readonly createDocument: {\n        readonly id: string | null;\n    };\n};\nexport type ActionBarSubmitMutation = {\n    readonly response: ActionBarSubmitMutationResponse;\n    readonly variables: ActionBarSubmitMutationVariables;\n};\n\n\n\n/*\nmutation ActionBarSubmitMutation(\n  $set: String!\n  $channel: String!\n  $lines: [ID!]!\n) {\n  createDocument(set: $set, channel: $channel, lines: $lines) {\n    id\n  }\n}\n*/\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"kind\": \"LocalArgument\",\n    \"name\": \"set\",\n    \"type\": \"String!\",\n    \"defaultValue\": null\n  },\n  {\n    \"kind\": \"LocalArgument\",\n    \"name\": \"channel\",\n    \"type\": \"String!\",\n    \"defaultValue\": null\n  },\n  {\n    \"kind\": \"LocalArgument\",\n    \"name\": \"lines\",\n    \"type\": \"[ID!]!\",\n    \"defaultValue\": null\n  }\n],\nv1 = [\n  {\n    \"kind\": \"LinkedField\",\n    \"alias\": null,\n    \"name\": \"createDocument\",\n    \"storageKey\": null,\n    \"args\": [\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"channel\",\n        \"variableName\": \"channel\"\n      },\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"lines\",\n        \"variableName\": \"lines\"\n      },\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"set\",\n        \"variableName\": \"set\"\n      }\n    ],\n    \"concreteType\": \"Document\",\n    \"plural\": false,\n    \"selections\": [\n      {\n        \"kind\": \"ScalarField\",\n        \"alias\": null,\n        \"name\": \"id\",\n        \"args\": null,\n        \"storageKey\": null\n      }\n    ]\n  }\n];\nreturn {\n  \"kind\": \"Request\",\n  \"fragment\": {\n    \"kind\": \"Fragment\",\n    \"name\": \"ActionBarSubmitMutation\",\n    \"type\": \"Mutation\",\n    \"metadata\": null,\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"selections\": (v1/*: any*/)\n  },\n  \"operation\": {\n    \"kind\": \"Operation\",\n    \"name\": \"ActionBarSubmitMutation\",\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"selections\": (v1/*: any*/)\n  },\n  \"params\": {\n    \"operationKind\": \"mutation\",\n    \"name\": \"ActionBarSubmitMutation\",\n    \"id\": null,\n    \"text\": \"mutation ActionBarSubmitMutation(\\n  $set: String!\\n  $channel: String!\\n  $lines: [ID!]!\\n) {\\n  createDocument(set: $set, channel: $channel, lines: $lines) {\\n    id\\n  }\\n}\\n\",\n    \"metadata\": {}\n  }\n};\n})();\n(node as any).hash = '6207ead903199684c65e05bfe37267af';\nexport default node;\n","/* tslint:disable */\n\nimport { ConcreteRequest } from \"relay-runtime\";\nexport type AppQueryVariables = {};\nexport type AppQueryResponse = {\n    readonly users: {\n        readonly me: {\n            readonly id: string;\n            readonly name: string;\n            readonly avatar: {\n                readonly image48: string | null;\n            };\n            readonly roles: ReadonlyArray<{\n                readonly name: string;\n            }>;\n        };\n    };\n    readonly title: {\n        readonly mine: {\n            readonly text: string;\n            readonly found: boolean;\n        };\n    } | null;\n};\nexport type AppQuery = {\n    readonly response: AppQueryResponse;\n    readonly variables: AppQueryVariables;\n};\n\n\n\n/*\nquery AppQuery {\n  users {\n    me {\n      id\n      name\n      avatar {\n        image48\n      }\n      roles {\n        name\n      }\n    }\n  }\n  title: documents(set: \"title\") {\n    mine {\n      text\n      found\n      id\n    }\n  }\n}\n*/\n\nconst node: ConcreteRequest = (function(){\nvar v0 = {\n  \"kind\": \"ScalarField\",\n  \"alias\": null,\n  \"name\": \"id\",\n  \"args\": null,\n  \"storageKey\": null\n},\nv1 = {\n  \"kind\": \"ScalarField\",\n  \"alias\": null,\n  \"name\": \"name\",\n  \"args\": null,\n  \"storageKey\": null\n},\nv2 = {\n  \"kind\": \"LinkedField\",\n  \"alias\": null,\n  \"name\": \"users\",\n  \"storageKey\": null,\n  \"args\": null,\n  \"concreteType\": \"UserSet\",\n  \"plural\": false,\n  \"selections\": [\n    {\n      \"kind\": \"LinkedField\",\n      \"alias\": null,\n      \"name\": \"me\",\n      \"storageKey\": null,\n      \"args\": null,\n      \"concreteType\": \"User\",\n      \"plural\": false,\n      \"selections\": [\n        (v0/*: any*/),\n        (v1/*: any*/),\n        {\n          \"kind\": \"LinkedField\",\n          \"alias\": null,\n          \"name\": \"avatar\",\n          \"storageKey\": null,\n          \"args\": null,\n          \"concreteType\": \"Avatar\",\n          \"plural\": false,\n          \"selections\": [\n            {\n              \"kind\": \"ScalarField\",\n              \"alias\": null,\n              \"name\": \"image48\",\n              \"args\": null,\n              \"storageKey\": null\n            }\n          ]\n        },\n        {\n          \"kind\": \"LinkedField\",\n          \"alias\": null,\n          \"name\": \"roles\",\n          \"storageKey\": null,\n          \"args\": null,\n          \"concreteType\": \"Role\",\n          \"plural\": true,\n          \"selections\": [\n            (v1/*: any*/)\n          ]\n        }\n      ]\n    }\n  ]\n},\nv3 = [\n  {\n    \"kind\": \"Literal\",\n    \"name\": \"set\",\n    \"value\": \"title\"\n  }\n],\nv4 = {\n  \"kind\": \"ScalarField\",\n  \"alias\": null,\n  \"name\": \"text\",\n  \"args\": null,\n  \"storageKey\": null\n},\nv5 = {\n  \"kind\": \"ScalarField\",\n  \"alias\": null,\n  \"name\": \"found\",\n  \"args\": null,\n  \"storageKey\": null\n};\nreturn {\n  \"kind\": \"Request\",\n  \"fragment\": {\n    \"kind\": \"Fragment\",\n    \"name\": \"AppQuery\",\n    \"type\": \"Query\",\n    \"metadata\": null,\n    \"argumentDefinitions\": [],\n    \"selections\": [\n      (v2/*: any*/),\n      {\n        \"kind\": \"LinkedField\",\n        \"alias\": \"title\",\n        \"name\": \"documents\",\n        \"storageKey\": \"documents(set:\\\"title\\\")\",\n        \"args\": (v3/*: any*/),\n        \"concreteType\": \"DocumentSet\",\n        \"plural\": false,\n        \"selections\": [\n          {\n            \"kind\": \"LinkedField\",\n            \"alias\": null,\n            \"name\": \"mine\",\n            \"storageKey\": null,\n            \"args\": null,\n            \"concreteType\": \"Document\",\n            \"plural\": false,\n            \"selections\": [\n              (v4/*: any*/),\n              (v5/*: any*/)\n            ]\n          }\n        ]\n      }\n    ]\n  },\n  \"operation\": {\n    \"kind\": \"Operation\",\n    \"name\": \"AppQuery\",\n    \"argumentDefinitions\": [],\n    \"selections\": [\n      (v2/*: any*/),\n      {\n        \"kind\": \"LinkedField\",\n        \"alias\": \"title\",\n        \"name\": \"documents\",\n        \"storageKey\": \"documents(set:\\\"title\\\")\",\n        \"args\": (v3/*: any*/),\n        \"concreteType\": \"DocumentSet\",\n        \"plural\": false,\n        \"selections\": [\n          {\n            \"kind\": \"LinkedField\",\n            \"alias\": null,\n            \"name\": \"mine\",\n            \"storageKey\": null,\n            \"args\": null,\n            \"concreteType\": \"Document\",\n            \"plural\": false,\n            \"selections\": [\n              (v4/*: any*/),\n              (v5/*: any*/),\n              (v0/*: any*/)\n            ]\n          }\n        ]\n      }\n    ]\n  },\n  \"params\": {\n    \"operationKind\": \"query\",\n    \"name\": \"AppQuery\",\n    \"id\": null,\n    \"text\": \"query AppQuery {\\n  users {\\n    me {\\n      id\\n      name\\n      avatar {\\n        image48\\n      }\\n      roles {\\n        name\\n      }\\n    }\\n  }\\n  title: documents(set: \\\"title\\\") {\\n    mine {\\n      text\\n      found\\n      id\\n    }\\n  }\\n}\\n\",\n    \"metadata\": {}\n  }\n};\n})();\n(node as any).hash = 'ef0c7e8618a1ab8874ab5c307ccd12bc';\nexport default node;\n","import {\n  Environment,\n  Network,\n  RecordSource,\n  Store,\n  OperationType,\n  RequestParameters,\n  Variables,\n} from \"relay-runtime\";\n\nconst API_URL = `${process.env.REACT_APP_API_BASE_URL}/graphql`;\nexport const AUTH_URL = `${process.env.REACT_APP_API_BASE_URL}/auth/${process.env.REACT_APP_API_AUTH_TYPE}`;\n\nexport interface QueryResult<T extends OperationType> {\n  error: Error | null;\n  props: T[\"response\"] | null;\n  retry: (() => void) | null;\n}\n\nconst NETWORK_ERROR_MARKER = Symbol(\"is-network-error\");\n\nexport interface NetworkError extends Error {\n  status: number;\n  text: string;\n  marker: typeof NETWORK_ERROR_MARKER;\n}\n\nexport function isNetworkError(err: Error | null): err is NetworkError {\n  return err ? (err as NetworkError).marker === NETWORK_ERROR_MARKER : false;\n}\n\nasync function createNetworkError(message: string, response: Response) {\n  const err = new Error(message) as NetworkError;\n  err.status = response.status;\n  err.text = await response.text();\n  err.marker = NETWORK_ERROR_MARKER;\n  return err as NetworkError;\n}\n\nasync function fetchQuery(\n  request: RequestParameters,\n  variables: Variables\n): Promise<any> {\n  const response = await fetch(API_URL, {\n    method: \"POST\",\n    headers: {\n      \"content-type\": \"application/json\",\n    },\n    credentials: \"include\",\n    body: JSON.stringify({\n      query: request.text,\n      variables,\n    }),\n  });\n\n  if (response.ok) {\n    return response.json();\n  } else {\n    throw await createNetworkError(\n      `API server responded with ${response.status}`,\n      response\n    );\n  }\n}\n\nconst source = new RecordSource();\nconst network = Network.create(fetchQuery);\n\nexport function getEnvironment(): Environment {\n  const store = new Store(source);\n\n  return new Environment({\n    network,\n    store,\n  });\n}\n","import React from \"react\";\nimport {NavLink} from \"react-router-dom\";\n\ninterface PillProps {\n  to: string;\n  exact?: boolean;\n  children: string;\n}\n\nconst Pill = (props: PillProps) => (\n  <li role=\"presentation\" className=\"nav-item\">\n    <NavLink\n      to={props.to}\n      exact={props.exact}\n      className=\"nav-link\"\n      activeClassName={\"active\"}\n    >\n      {props.children}\n    </NavLink>\n  </li>\n);\n\nexport const SideNav = () => (\n  <ul className=\"nav nav-pills flex-column\">\n    <Pill to=\"/\" exact>\n      dashboard\n    </Pill>\n    <Pill to=\"/people\">dramatis personae</Pill>\n    <Pill to=\"/recent\">recent chatter</Pill>\n    <hr />\n    <Pill to=\"/quotes\">quotes</Pill>\n    <Pill to=\"/events\">events</Pill>\n  </ul>\n);\n","import React from \"react\";\n\nexport const Dashboard = () => (\n  <div className=\"card bg-light border border-info rounded\">\n    <div className=\"card-body\">\n      <h3 className=\"card-title\">Why hello there.</h3>\n      <p className=\"card-text\">\n        {\"Pretend there's something awesome written here.\"}\n      </p>\n    </div>\n  </div>\n);\n","import React from \"react\";\nimport {Link} from \"react-router-dom\";\n\nexport interface User {\n  readonly name: string;\n  readonly presence: string;\n  readonly avatar: {image48: string | null};\n  readonly status: {readonly message: string | null};\n}\n\ninterface PersonProps {\n  user: User;\n  title: string;\n}\n\nexport function Person(props: PersonProps) {\n  const {name, presence, avatar, status} = props.user;\n  const avatarURL = avatar.image48;\n  const presenceIcon =\n    presence === \"ACTIVE\"\n      ? \"pushbot-status-active fa-dot-circle\"\n      : \"pushbot-status-inactive fa-circle\";\n  const {message} = status;\n\n  return (\n    <div className=\"pushbot-person row\">\n      <div className=\"col-xs-1 px-2\">\n        <img src={avatarURL!} className=\"rounded\" alt=\"\" />\n      </div>\n      <div className=\"col-xs-11 px-2\">\n        <p>\n          <i\n            className={`far pushbot-status mr-2 ${presenceIcon}`}\n            aria-hidden=\"true\"\n          />\n          <Link to={`/people/${name}`} className=\"pushbot-person-name mr-2\">\n            {name}\n          </Link>\n          <span className=\"pushbot-person-title font-weight-bold\">\n            {props.title}\n          </span>\n        </p>\n        <p className=\"pushbot-person-status-message font-italic font-weight-light\">\n          {message}\n        </p>\n      </div>\n    </div>\n  );\n}\n","import React, {Component} from \"react\";\nimport {QueryRenderer, Environment} from \"react-relay\";\nimport {graphql} from \"babel-plugin-relay/macro\";\n\nimport {getEnvironment, QueryResult} from \"../common/Transport\";\nimport {User, Person} from \"./Person\";\n\nimport {PeopleQuery} from \"../__generated__/PeopleQuery.graphql\";\n\nimport \"./People.css\";\n\nexport class People extends Component {\n  private environment: Environment;\n\n  constructor(props: {}) {\n    super(props);\n\n    this.environment = getEnvironment();\n  }\n\n  render() {\n    const query = graphql`\n      query PeopleQuery {\n        users {\n          all {\n            name\n            presence\n\n            avatar {\n              image48\n            }\n\n            status {\n              message\n              emoji\n            }\n          }\n        }\n\n        titles: documents(set: \"title\") {\n          all(criteria: {}) {\n            edges {\n              node {\n                text\n                subject\n              }\n            }\n          }\n        }\n      }\n    `;\n\n    return (\n      <QueryRenderer<PeopleQuery>\n        environment={this.environment}\n        query={query}\n        variables={{}}\n        render={this.renderResult}\n      />\n    );\n  }\n\n  renderResult = ({error, props}: QueryResult<PeopleQuery>) => {\n    if (error) {\n      return <div>{error.message}</div>;\n    }\n\n    return (\n      <div>\n        <h3>Dramatis Personae</h3>\n        <blockquote className=\"blockquote text-right\">\n          Maybe the <em>real</em> lab was the friends we made along the way.\n        </blockquote>\n        <ul className=\"list-group\">\n          {this.collateUsers(props).map(({user, title}) => {\n            return (\n              <li key={user.name} className=\"list-group-item\">\n                <Person user={user} title={title} />\n              </li>\n            );\n          })}\n        </ul>\n      </div>\n    );\n  };\n\n  collateUsers(\n    props: QueryResult<PeopleQuery>[\"props\"]\n  ): {user: User; title: string}[] {\n    if (!props) {\n      return [];\n    }\n\n    const titles = props.titles;\n    if (!titles) {\n      return [];\n    }\n\n    const titlesByUsername: {[username: string]: string} = {};\n    for (const title of titles.all.edges) {\n      if (title.node.subject) {\n        titlesByUsername[title.node.subject] = title.node.text;\n      }\n    }\n\n    const userData = props.users.all.map(user => {\n      return {user, title: titlesByUsername[user.name] || \"\"};\n    });\n\n    userData.sort((a, b) => a.user.name.localeCompare(b.user.name));\n\n    return userData;\n  }\n}\n","import React, {Component} from \"react\";\nimport Chartist from \"chartist\";\n\nChartist.plugins = Chartist.plugins || {};\nChartist.plugins.ctHtmlLabels = function() {\n  return function(chart: any) {\n    chart.on(\"draw\", function(context: any) {\n      if (context.type === \"label\") {\n        context.element.empty()._node.innerHTML = context.text;\n      }\n    });\n  };\n};\n\ninterface ChartProps {\n  data: Chartist.IChartistData;\n  options: Chartist.IBarChartOptions;\n}\n\nexport class Chart extends Component<ChartProps> {\n  private refElement?: HTMLElement | null;\n  private chart?: Chartist.IChartistBarChart;\n\n  render() {\n    return (\n      <div\n        className=\"ct-chart ct-golden-section\"\n        ref={c => {\n          this.refElement = c;\n        }}\n      />\n    );\n  }\n\n  componentDidMount() {\n    const options = this.props.options || {};\n    options.plugins = [Chartist.plugins.ctHtmlLabels()];\n\n    this.chart = new Chartist.Bar(this.refElement, this.props.data, options);\n  }\n\n  componentWillUnmount() {\n    this.chart && this.chart.detach();\n  }\n}\n","import React, {Component} from \"react\";\nimport {QueryRenderer, Environment} from \"react-relay\";\nimport {graphql} from \"babel-plugin-relay/macro\";\nimport EmojiConverter from \"emoji-js\";\n\nimport {getEnvironment, QueryResult} from \"../common/Transport\";\nimport {Chart} from \"../common/Chart\";\nimport {ProfileQuery} from \"../__generated__/ProfileQuery.graphql\";\n\nimport \"./Profile.css\";\n\ninterface ProfileProps {\n  match: {\n    params: {\n      name: string;\n    };\n  };\n}\n\ntype User = NonNullable<ProfileQuery[\"response\"][\"users\"][\"current\"]>;\n\ntype EmojiCount = User[\"topReactionsGiven\"] | User[\"topReactionsReceived\"];\n\nexport class Profile extends Component<ProfileProps> {\n  private environment: Environment;\n  private emoji: EmojiConverter;\n\n  constructor(props: ProfileProps) {\n    super(props);\n\n    this.environment = getEnvironment();\n    this.emoji = new EmojiConverter();\n\n    this.emoji.img_sets.apple.sheet = \"/sheet_apple_64.png\";\n    this.emoji.use_sheet = true;\n    this.emoji.include_title = true;\n  }\n\n  render() {\n    const query = graphql`\n      query ProfileQuery($name: String!, $titleCriteria: Criteria!) {\n        users {\n          current: withName(name: $name) {\n            avatar {\n              image192\n            }\n\n            topReactionsReceived(limit: 10) {\n              count\n              emoji {\n                name\n                url\n              }\n            }\n\n            topReactionsGiven(limit: 10) {\n              count\n              emoji {\n                name\n                url\n              }\n            }\n          }\n        }\n\n        titles: documents(set: \"title\") {\n          all(first: 100, criteria: $titleCriteria) {\n            edges {\n              node {\n                text\n              }\n            }\n          }\n        }\n\n        quotes: documents(set: \"quote\") {\n          rank(speaker: $name)\n        }\n      }\n    `;\n\n    const username = this.props.match.params.name;\n    const variables = {\n      name: username,\n      titleCriteria: {subject: username},\n    };\n\n    return (\n      <QueryRenderer<ProfileQuery>\n        environment={this.environment}\n        query={query}\n        variables={variables}\n        render={this.renderResult}\n      />\n    );\n  }\n\n  renderResult = ({error, props}: QueryResult<ProfileQuery>) => {\n    if (error) {\n      return <div>{error.message}</div>;\n    }\n\n    if (!props) {\n      return (\n        <div className=\"pushbot-loading\">\n          <i className=\"fas fa-circle-notch fa-spin\" aria-hidden=\"true\" />\n          sluuuuurp\n        </div>\n      );\n    }\n\n    const user = props.users.current;\n    if (!user) {\n      return null;\n    }\n\n    const avatar = user.avatar.image192 || \"\";\n\n    return (\n      <div className=\"pushbot-profile row\">\n        <div className=\"col-md-6\">\n          <img\n            className=\"pushbot-profile-avatar img-responsive img-rounded\"\n            src={avatar}\n            alt=\"\"\n          />\n          {this.renderReactionsReceivedChart(user)}\n          {this.renderReactionsGivenChart(user)}\n        </div>\n        <div className=\"col-md-6\">\n          <h1 className=\"pushbot-profile-username\">\n            @{this.props.match.params.name}\n          </h1>\n          {this.renderTitles(props)}\n          {this.renderQuoteRank(props)}\n        </div>\n      </div>\n    );\n  };\n\n  renderReactionsGivenChart(user: User) {\n    return this.renderReactionChart(\n      user.topReactionsGiven,\n      \"Emoji reactions given\"\n    );\n  }\n\n  renderReactionsReceivedChart(user: User) {\n    return this.renderReactionChart(\n      user.topReactionsReceived,\n      \"Emoji reactions received\"\n    );\n  }\n\n  renderReactionChart(results: EmojiCount, name: string) {\n    const data = {\n      labels: results.map(each => {\n        if (each.emoji.url) {\n          return `<img class=\"emoji\" alt=\"${each.emoji.name}\" src=\"${each.emoji.url}\" title=\"${each.emoji.name}\">`;\n        }\n\n        return this.emoji.replace_colons(`:${each.emoji.name}:`);\n      }),\n      series: [results.map(each => each.count)],\n    };\n\n    const options = {\n      low: 0,\n      axisY: {\n        onlyInteger: true,\n      },\n    };\n\n    return (\n      <p className=\"pushbot-profile-reaction-chart\">\n        <h4>{name}</h4>\n        <Chart data={data} options={options} />\n      </p>\n    );\n  }\n\n  renderTitles(props: NonNullable<QueryResult<ProfileQuery>[\"props\"]>) {\n    const edges = props.titles ? props.titles.all.edges : [];\n    if (edges.length === 0) {\n      return (\n        <p className=\"pushbot-profile-titles-empty\">\n          No titles yet. Set one with{\" \"}\n          <code>!settitle {this.props.match.params.name}: ...</code>.\n        </p>\n      );\n    }\n\n    return (\n      <p className=\"pushbot-profile-titles\">\n        {edges.map(t => this.titleFrom(t.node.text))}\n      </p>\n    );\n  }\n\n  renderQuoteRank(props: NonNullable<QueryResult<ProfileQuery>[\"props\"]>) {\n    if (!props.quotes) {\n      return (\n        <p className=\"pushbot-profile-quoterank\">\n          You have not yet been immortalized in the quotefile.\n        </p>\n      );\n    }\n\n    const rank = props.quotes.rank;\n    return (\n      <p className=\"pushbot-profile-quoterank\">\n        Rank #{rank} in the quotefile.\n      </p>\n    );\n  }\n\n  titleFrom(title: string) {\n    if (/^https?:/.test(title)) {\n      return (\n        <img\n          className=\"pushbot-profile-title img-responsive\"\n          alt=\"\"\n          src={title}\n        />\n      );\n    }\n\n    return <span className=\"pushbot-profile-title\">{title}</span>;\n  }\n}\n","export interface QueryModeCases<R> {\n  containing?(): R;\n  by?(): R;\n  about?(): R;\n  default?(): R;\n}\n\nexport interface QueryMode {\n  when<R>(cases: QueryModeCases<R>): R | null;\n  label: string;\n}\n\nexport const CONTAINING: QueryMode = {\n  when<R>(cases: QueryModeCases<R>): R | null {\n    return (cases.containing || cases.default || (() => null))();\n  },\n\n  label: \"containing\",\n};\n\nexport const BY: QueryMode = {\n  when<R>(cases: QueryModeCases<R>): R | null {\n    return (cases.by || cases.default || (() => null))();\n  },\n\n  label: \"by\",\n};\n\nexport const ABOUT: QueryMode = {\n  when<R>(cases: QueryModeCases<R>): R | null {\n    return (cases.about || cases.default || (() => null))();\n  },\n\n  label: \"about\",\n};\n\nexport const modes: QueryMode[] = [CONTAINING, BY, ABOUT];\n","import React from \"react\";\n\ninterface QuoteProps {\n  text: string;\n}\n\nexport function Quote(props: QuoteProps) {\n  return (\n    <blockquote className=\"mx-md-2 pushbot-quote\">\n      <p>{props.text}</p>\n    </blockquote>\n  );\n}\n","import React, {Component} from \"react\";\nimport {QueryRenderer, Environment} from \"react-relay\";\nimport {graphql} from \"babel-plugin-relay/macro\";\n\nimport {getEnvironment} from \"../common/Transport\";\nimport {RandomQuoteQuery, RandomQuoteResult} from \"./queryTypes\";\nimport {Quote} from \"./Quote\";\n\ninterface RandomQuoteState {\n  environment: Environment;\n}\n\nexport class RandomQuote extends Component<{}, RandomQuoteState> {\n  private lastQuote: string | null;\n\n  constructor(props: {}) {\n    super(props);\n\n    this.lastQuote = null;\n    this.state = {\n      environment: getEnvironment(),\n    };\n  }\n\n  render() {\n    const query = graphql`\n      query RandomQuoteQuery {\n        documents(set: \"quote\") {\n          random(criteria: {}) {\n            found\n            text\n          }\n        }\n      }\n    `;\n\n    return (\n      <QueryRenderer<RandomQuoteQuery>\n        environment={this.state.environment}\n        query={query}\n        variables={{}}\n        render={this.renderResult}\n      />\n    );\n  }\n\n  renderResult = ({error, props}: RandomQuoteResult) => {\n    if (error) {\n      return <div>{error.message}</div>;\n    }\n\n    const quoteText = props ? props.documents!.random.text : this.lastQuote;\n\n    if (!quoteText) {\n      return null;\n    }\n\n    this.lastQuote = quoteText;\n\n    return (\n      <div className=\"pushbot-random-quote card border-0\">\n        <div className=\"card-body\">\n          <p className=\"card-text\">\n            Type a search term above to find specific quotes. In the meantime,\n            enjoy this random quote.\n          </p>\n          <button\n            type=\"button\"\n            className=\"btn btn-secondary btn-sm\"\n            onClick={this.another}\n          >\n            <i className=\"fas fa-sync\" aria-hidden=\"true\" />\n            Another\n          </button>\n        </div>\n        <Quote text={quoteText} />\n      </div>\n    );\n  };\n\n  another = () => {\n    this.setState({\n      environment: getEnvironment(),\n    });\n  };\n}\n","import React, {Component} from \"react\";\nimport {QueryRenderer, Environment} from \"react-relay\";\nimport {graphql} from \"babel-plugin-relay/macro\";\n\nimport {Quote} from \"./Quote\";\nimport {getEnvironment} from \"../common/Transport\";\nimport {QueryMode} from \"./queryMode\";\nimport {QuotePageQuery, QuotePageResult, IQuotes} from \"./queryTypes\";\n\ninterface QuotePageProps {\n  query: string;\n  people: string[];\n  mode: QueryMode;\n}\n\nexport class QuotePage extends Component<QuotePageProps> {\n  private environment: Environment;\n  private lastTotal: number | null;\n  private lastResults: IQuotes | null;\n\n  constructor(props: QuotePageProps) {\n    super(props);\n    this.environment = getEnvironment();\n    this.lastTotal = null;\n    this.lastResults = null;\n  }\n\n  render() {\n    const query = graphql`\n      query QuotePageQuery($c: Criteria!) {\n        documents(set: \"quote\") {\n          all(criteria: $c, first: 20) {\n            edges {\n              node {\n                id\n                text\n              }\n            }\n\n            pageInfo {\n              count\n              hasNextPage\n            }\n          }\n        }\n      }\n    `;\n\n    const criteria: any = {query: this.props.query};\n    this.props.mode.when({\n      by: () => {\n        criteria.speakers = this.props.people;\n      },\n      about: () => {\n        criteria.mentions = this.props.people;\n      },\n    });\n\n    const variables = {\n      c: criteria,\n    };\n\n    return (\n      <QueryRenderer<QuotePageQuery>\n        environment={this.environment}\n        query={query}\n        variables={variables}\n        render={this.renderResult}\n      />\n    );\n  }\n\n  renderResult = ({error, props}: QuotePageResult) => {\n    if (error) {\n      return <div>{error.message}</div>;\n    }\n\n    if (!props && !this.lastResults) {\n      return (\n        <div className=\"pushbot-loading\">\n          <i className=\"fas fa-circle-notch fa-spin\" aria-hidden=\"true\" />\n          performing query\n        </div>\n      );\n    } else if (!props && this.lastResults && this.lastTotal) {\n      return this.renderDocuments(this.lastTotal, this.lastResults);\n    } else if (props) {\n      this.lastTotal = props.documents!.all.pageInfo.count;\n      this.lastResults = props.documents!.all.edges;\n\n      return this.renderDocuments(this.lastTotal, this.lastResults);\n    }\n  };\n\n  renderDocuments(total: number, documents: IQuotes) {\n    const quotes = documents.map(document => {\n      return <Quote key={document.node.id!} text={document.node.text} />;\n    });\n\n    const more = documents.length < total ? \"the first of\" : \"\";\n    const plural = total === 1 ? `matching quote` : `matching quotes`;\n\n    return (\n      <div className=\"pushbot-results card border-0\">\n        <div className=\"card-body\">\n          <p>\n            Showing {more} <strong>{total}</strong> {plural}.\n          </p>\n        </div>\n        {quotes}\n      </div>\n    );\n  }\n}\n","import React, {Component} from \"react\";\n\nimport {QueryMode, CONTAINING, BY, ABOUT, modes} from \"./queryMode\";\nimport {RandomQuote} from \"./RandomQuote\";\nimport {QuotePage} from \"./QuotePage\";\n\nimport \"./Quotes.css\";\n\ninterface Search {\n  query: string;\n  people: string;\n  mode: QueryMode;\n}\n\nexport class Quotes extends Component {\n  readSearch(): Search {\n    const params = new URLSearchParams(window.location.search);\n\n    let mode = CONTAINING;\n    let people = \"\";\n    if (params.has(\"by\")) {\n      mode = BY;\n      people = params.get(\"by\")!;\n    } else if (params.has(\"about\")) {\n      mode = ABOUT;\n      people = params.get(\"about\")!;\n    }\n\n    return {\n      query: params.get(\"q\") || \"\",\n      people,\n      mode,\n    };\n  }\n\n  writeSearch(changes: Partial<Search>) {\n    const previous = this.readSearch();\n    const current = Object.assign(previous, changes);\n\n    const params = new URLSearchParams();\n\n    current.mode.when({\n      by: () => params.set(\"by\", current.people),\n      about: () => params.set(\"about\", current.people),\n    });\n    if (current.query.length) {\n      params.set(\"q\", current.query);\n    }\n\n    const nextSearch = params.toString();\n    const nextURL =\n      window.location.protocol +\n      \"//\" +\n      window.location.host +\n      window.location.pathname +\n      (nextSearch.length > 0 ? \"?\" + nextSearch : \"\") +\n      window.location.hash;\n\n    if (window.history.replaceState) {\n      window.history.replaceState({}, \"\", nextURL);\n    } else {\n      window.location.href = nextURL;\n    }\n    this.forceUpdate();\n  }\n\n  render() {\n    const search = this.readSearch();\n    const showPeople = search.mode.when({\n      containing: () => false,\n      by: () => true,\n      about: () => true,\n    });\n\n    return (\n      <div>\n        <form\n          className={`pushbot-quote-form form-inline pushbot-mode-${search.mode.label}`}\n        >\n          <select\n            className=\"pushbot-quote-mode form-control\"\n            value={search.mode.label}\n            onChange={this.didChangeMode}\n          >\n            {modes.map((mode, index) => {\n              return (\n                <option key={index} value={mode.label}>\n                  {mode.label}\n                </option>\n              );\n            })}\n          </select>\n          {showPeople && (\n            <input\n              type=\"text\"\n              className=\"form-control\"\n              id=\"pushbot-quote-people\"\n              placeholder=\"fenris, iguanaditty\"\n              value={search.people}\n              onChange={this.didChangePeople}\n            />\n          )}\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            id=\"pushbot-quote-query\"\n            placeholder='\"query\"'\n            value={search.query}\n            onChange={this.didChangeQuery}\n          />\n        </form>\n        {this.renderResult(search)}\n      </div>\n    );\n  }\n\n  renderResult(search: Search) {\n    const people = search.people\n      .split(/[,+;]|\\s/)\n      .map(person => person.replace(/^@/, \"\"))\n      .map(person => person.trim())\n      .filter(person => person.length > 0);\n\n    const noQuery = search.mode.when({\n      containing: () => search.query.length === 0,\n      by: () => people.length === 0,\n      about: () => people.length === 0,\n    });\n\n    if (noQuery) {\n      return <RandomQuote />;\n    } else {\n      return (\n        <QuotePage mode={search.mode} people={people} query={search.query} />\n      );\n    }\n  }\n\n  didChangeMode = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const mode = modes.find(mode => mode.label === event.target.value);\n    this.writeSearch({mode});\n  };\n\n  didChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.writeSearch({query: event.target.value});\n  };\n\n  didChangePeople = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.writeSearch({people: event.target.value});\n  };\n}\n","import React, {Component} from \"react\";\nimport CopyToClipboard from \"react-copy-to-clipboard\";\n\ninterface FeedFormProps {\n  ready: boolean;\n  feedURL: string;\n}\n\ninterface FeedFormState {\n  copied: boolean;\n}\n\nexport class FeedForm extends Component<FeedFormProps, FeedFormState> {\n  state = {\n    copied: false,\n  };\n\n  render() {\n    const btnClass = this.state.copied\n      ? \"btn btn-success\"\n      : \"btn btn-secondary\";\n    const btnMessage = this.state.copied ? \"Copied\" : \"Copy\";\n\n    return (\n      <p className=\"form-inline\">\n        <input\n          type=\"text\"\n          id=\"pushbot-events-feedurl\"\n          className=\"form-control\"\n          value={this.props.feedURL}\n          readOnly\n        />\n        <CopyToClipboard\n          text={this.props.feedURL}\n          onCopy={() => this.setState({copied: true})}\n        >\n          <button className={btnClass} disabled={!this.props.ready}>\n            {btnMessage}\n          </button>\n        </CopyToClipboard>\n      </p>\n    );\n  }\n}\n","import React, {Component} from \"react\";\nimport {QueryRenderer, Environment} from \"react-relay\";\nimport {graphql} from \"babel-plugin-relay/macro\";\n\nimport {FeedForm} from \"./FeedForm\";\nimport {getEnvironment, QueryResult} from \"../common/Transport\";\n\nimport {EventsQuery} from \"../__generated__/EventsQuery.graphql\";\n\nimport \"./Events.css\";\n\nexport class Events extends Component {\n  private environment: Environment;\n\n  constructor(props: {}) {\n    super(props);\n    this.environment = getEnvironment();\n  }\n\n  render() {\n    const query = graphql`\n      query EventsQuery {\n        calendarURL\n      }\n    `;\n\n    return (\n      <QueryRenderer<EventsQuery>\n        environment={this.environment}\n        query={query}\n        variables={{}}\n        render={this.renderResult}\n      />\n    );\n  }\n\n  renderResult = (result: QueryResult<EventsQuery>) => {\n    return (\n      <div>\n        <h3>Goings On and Happenings</h3>\n        {this.renderResultBody(result)}\n      </div>\n    );\n  };\n\n  renderResultBody({error, props}: QueryResult<EventsQuery>) {\n    if (error) {\n      return <div>{error.message}</div>;\n    }\n\n    const ready = Boolean(props);\n    const feedURL = props ? props.calendarURL : \"...\";\n\n    return (\n      <div>\n        <p>\n          Keep up with #~s events planned in the <code>#events</code> channel\n          with your own, personal iCal feed.\n        </p>\n        <FeedForm ready={ready} feedURL={feedURL} />\n        <p>\n          Subscribe to this URL with any compatible calendar software, including{\" \"}\n          <a\n            href=\"https://calendar.google.com/calendar/r/settings/addbyurl\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Google calendar\n          </a>\n          .\n        </p>\n      </div>\n    );\n  }\n}\n","import {QueryResult} from \"../common/Transport\";\n\nimport {\n  RecentChannelQuery,\n  RecentChannelQueryVariables,\n  RecentChannelQueryResponse,\n} from \"../__generated__/RecentChannelQuery.graphql\";\n\nimport {\n  RecentHistoryQuery,\n  RecentHistoryQueryVariables,\n  RecentHistoryQueryResponse,\n} from \"../__generated__/RecentHistoryQuery.graphql\";\n\nexport type RecentChannelQuery = RecentChannelQuery;\nexport type RecentChannelQueryVariables = RecentChannelQueryVariables;\nexport type RecentChannelQueryResponse = RecentChannelQueryResponse;\nexport type RecentChannelResult = QueryResult<RecentChannelQuery>;\n\nexport type RecentHistoryQuery = RecentHistoryQuery;\nexport type RecentHistoryQueryVariables = RecentHistoryQueryVariables;\nexport type RecentHistoryQueryResponse = RecentHistoryQueryResponse;\nexport type RecentHistoryResult = QueryResult<RecentHistoryQuery>;\n\nexport type ILine = NonNullable<\n  RecentHistoryQueryResponse[\"cache\"][\"linesForChannel\"]\n>[0];\n\nexport const ALL = Symbol(\"all\");\n\nexport type IChange = ILine | typeof ALL;\n\nexport interface IDisposable {\n  dispose(): void;\n}\n","import {IChange, ILine, IDisposable, ALL} from \"./queryTypes\";\n\nexport class Selection {\n  public isSelecting: boolean;\n  private ids: Set<string>;\n  private subs: ((arg: IChange) => any)[];\n\n  constructor() {\n    this.ids = new Set();\n    this.isSelecting = false;\n    this.subs = [];\n  }\n\n  onDidChange(cb: (arg: IChange) => any): IDisposable {\n    this.subs.push(cb);\n    return {\n      dispose: () => {\n        const index = this.subs.indexOf(cb);\n        this.subs.splice(index, 1);\n      },\n    };\n  }\n\n  didChange(payload: IChange) {\n    for (const sub of this.subs) {\n      sub(payload);\n    }\n  }\n\n  isSelected(line: ILine): boolean {\n    return this.ids.has(line.id!);\n  }\n\n  select(line: ILine): boolean {\n    const wasSelected = this.ids.has(line.id!);\n    this.ids.add(line.id!);\n    if (!wasSelected) this.didChange(line);\n    return !wasSelected;\n  }\n\n  startSelecting() {\n    this.isSelecting = true;\n  }\n\n  stopSelecting() {\n    this.isSelecting = false;\n  }\n\n  toggle(line: ILine) {\n    if (!this.ids.delete(line.id!)) {\n      this.ids.add(line.id!);\n    }\n    this.didChange(line);\n  }\n\n  clear() {\n    this.ids.clear();\n    this.didChange(ALL);\n  }\n\n  getLineIDs(): string[] {\n    return Array.from(this.ids);\n  }\n\n  isEmpty(): boolean {\n    return this.ids.size === 0;\n  }\n\n  describe(): string {\n    if (this.ids.size === 0) {\n      return \"nothing selected\";\n    } else if (this.ids.size === 1) {\n      return \"1 line selected\";\n    } else {\n      return `${this.ids.size} lines selected`;\n    }\n  }\n}\n","import React, {Component} from \"react\";\nimport moment from \"moment\";\n\nimport {ILine, IDisposable, ALL} from \"./queryTypes\";\nimport {Selection} from \"./selection\";\n\ninterface LineProps {\n  previous?: ILine;\n  line: ILine;\n  selection: Selection;\n}\n\nexport class Line extends Component<LineProps> {\n  private sub?: IDisposable;\n\n  componentDidMount() {\n    this.sub = this.props.selection.onDidChange(kind => {\n      if (kind === ALL) this.forceUpdate();\n    });\n  }\n\n  componentWillUnmount() {\n    this.sub && this.sub.dispose();\n  }\n\n  render() {\n    const {line, previous} = this.props;\n    const ts = moment(parseInt(line.timestamp));\n    const sameSpeaker = previous && previous.speaker!.id === line.speaker!.id;\n\n    const lineClasses = [\"pushbot-line\"];\n    if (this.props.selection.isSelected(line))\n      lineClasses.push(\"pushbot-line-selected\");\n\n    let speakerBanner = null;\n    if (!sameSpeaker) {\n      speakerBanner = (\n        <div className=\"pushbot-speaker-banner\">\n          <span className=\"pushbot-line-avatar\">\n            <img src={line.speaker!.avatar!.image32!} alt=\"\" />\n          </span>\n          <span className=\"pushbot-line-name\">{line.speaker!.name}</span>\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={lineClasses.join(\" \")}\n        onMouseDown={this.didMouseDown}\n        onMouseMove={this.didMouseMove}\n      >\n        {speakerBanner}\n        <span className=\"pushbot-line-timestamp\">{ts.format(\"h:mm:ss\")}</span>\n        <span className=\"pushbot-line-text\">{line.text}</span>\n      </div>\n    );\n  }\n\n  didMouseDown = (event: React.MouseEvent<HTMLDivElement>) => {\n    if (event.button !== 0) return;\n\n    event.preventDefault();\n    this.props.selection.toggle(this.props.line);\n    this.props.selection.startSelecting();\n    this.forceUpdate();\n  };\n\n  didMouseMove = (event: React.MouseEvent) => {\n    if (!this.props.selection.isSelecting) return;\n\n    event.preventDefault();\n    if (this.props.selection.select(this.props.line)) {\n      this.forceUpdate();\n    }\n  };\n}\n","import React, {Component} from \"react\";\n\nimport {ILine} from \"./queryTypes\";\nimport {Selection} from \"./selection\";\nimport {Line} from \"./Line\";\n\ninterface HistoryProps {\n  lines: ReadonlyArray<ILine> | null;\n  selection: Selection;\n}\n\nexport class History extends Component<HistoryProps> {\n  private bottom?: HTMLElement | null;\n\n  componentDidMount() {\n    window.addEventListener(\"mouseup\", this.didMouseUp);\n\n    this.bottom && this.bottom.scrollIntoView();\n  }\n\n  componentDidUpdate() {\n    this.bottom && this.bottom.scrollIntoView();\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"mouseup\", this.didMouseUp);\n  }\n\n  render() {\n    if (this.props.lines === null) {\n      return this.renderLoading();\n    } else {\n      return this.renderLines();\n    }\n  }\n\n  renderLoading() {\n    return (\n      <div className=\"pushbot-history border pushbot-loading\">\n        <i className=\"fas fa-circle-notch fa-spin\" aria-hidden=\"true\" />\n        loading\n      </div>\n    );\n  }\n\n  renderLines() {\n    return (\n      <div\n        className=\"pushbot-history border pushbot-history-loaded\"\n        onMouseOut={this.didMouseOut}\n      >\n        {this.props.lines!.map((line, i) => {\n          return (\n            <Line\n              key={line.id!}\n              line={line}\n              previous={this.props.lines![i - 1]}\n              selection={this.props.selection}\n            />\n          );\n        })}\n        <div\n          ref={element => {\n            this.bottom = element;\n          }}\n        />\n      </div>\n    );\n  }\n\n  didMouseUp = () => {\n    this.props.selection.stopSelecting();\n  };\n\n  didMouseOut = () => {\n    this.props.selection.stopSelecting();\n  };\n}\n","import React, {useContext} from \"react\";\n\ninterface IRole {\n  readonly name: string;\n}\n\nexport interface IUser {\n  readonly id: string;\n  readonly name: string;\n  readonly roles: ReadonlyArray<IRole>;\n}\n\nexport const UserContext = React.createContext<IUser | null>(null);\n\ninterface RoleProps {\n  name: string;\n  children: JSX.Element;\n}\n\nexport const Role = (props: RoleProps) => {\n  const user = useContext(UserContext);\n  if (!user) return null;\n\n  const match = user.roles.some(role => role.name === props.name);\n  if (!match) return null;\n\n  return props.children;\n};\n","import React, {Component} from \"react\";\nimport {Environment, commitMutation} from \"relay-runtime\";\nimport {graphql} from \"babel-plugin-relay/macro\";\n\nimport {IDisposable} from \"./queryTypes\";\nimport {Selection} from \"./selection\";\nimport {Role} from \"../common/Role\";\n\ninterface ActionBarProps {\n  environment: Environment;\n  channel: string;\n  selection: Selection;\n}\n\nexport class ActionBar extends Component<ActionBarProps> {\n  private sub?: IDisposable;\n  private didSubmitQuote: () => void;\n  private didSubmitLim: () => void;\n\n  constructor(props: ActionBarProps) {\n    super(props);\n\n    this.didSubmitQuote = this.submit.bind(this, \"quote\");\n    this.didSubmitLim = this.submit.bind(this, \"lim\");\n  }\n\n  componentDidMount() {\n    this.sub = this.props.selection.onDidChange(() => this.forceUpdate());\n  }\n\n  componentWillUnmount() {\n    this.sub && this.sub.dispose();\n  }\n\n  render() {\n    const textClassNames = [\"text-muted\"];\n    let clearBtn = null;\n    let disable = true;\n    if (this.props.selection.isEmpty()) {\n      textClassNames.push(\"pushbot-empty\");\n    } else {\n      disable = false;\n      clearBtn = (\n        <button className=\"btn btn-link\" onClick={this.didClear}>\n          clear\n        </button>\n      );\n    }\n\n    return (\n      <div className=\"pushbot-recent-actions\">\n        <p className={textClassNames.join(\" \")}>\n          {this.props.selection.describe()}\n          {clearBtn}\n        </p>\n        <div className=\"btn-group pushbot-recent-actions\">\n          <Role name=\"quote pontiff\">\n            <button\n              className=\"btn btn-primary\"\n              disabled={disable}\n              onClick={this.didSubmitQuote}\n            >\n              Quote\n            </button>\n          </Role>\n          <Role name=\"poet laureate\">\n            <button\n              className=\"btn btn-primary\"\n              disabled={disable}\n              onClick={this.didSubmitLim}\n            >\n              Limerick\n            </button>\n          </Role>\n        </div>\n      </div>\n    );\n  }\n\n  didClear = () => {\n    this.props.selection.clear();\n  };\n\n  submit(set: string) {\n    if (!this.props.channel) return;\n\n    const mutation = graphql`\n      mutation ActionBarSubmitMutation(\n        $set: String!\n        $channel: String!\n        $lines: [ID!]!\n      ) {\n        createDocument(set: $set, channel: $channel, lines: $lines) {\n          id\n        }\n      }\n    `;\n\n    const variables = {\n      set,\n      channel: this.props.channel,\n      lines: this.props.selection.getLineIDs(),\n    };\n\n    commitMutation(this.props.environment, {\n      mutation,\n      variables,\n      onCompleted: () => this.props.selection.clear(),\n    });\n  }\n}\n","import React, {Component} from \"react\";\nimport {QueryRenderer} from \"react-relay\";\nimport {Environment} from \"relay-runtime\";\nimport {graphql} from \"babel-plugin-relay/macro\";\n\nimport {getEnvironment} from \"../common/Transport\";\nimport {\n  ILine,\n  RecentChannelQuery,\n  RecentChannelResult,\n  RecentHistoryQuery,\n  RecentHistoryResult,\n} from \"./queryTypes\";\nimport {Selection} from \"./selection\";\nimport {History} from \"./History\";\nimport {ActionBar} from \"./ActionBar\";\n\nimport \"./Recent.css\";\n\ninterface RecentState {\n  environment: Environment;\n  currentChannel: string | null;\n  selection: Selection;\n}\n\nexport class Recent extends Component<{}, RecentState> {\n  private knownChannels: ReadonlyArray<string> | null;\n  private history: ReadonlyArray<ILine> | null;\n\n  constructor(props: {}) {\n    super(props);\n\n    this.knownChannels = null;\n    this.history = null;\n\n    this.state = {\n      environment: getEnvironment(),\n      currentChannel: null,\n      selection: new Selection(),\n    };\n    this.didChangeChannel = this.didChangeChannel.bind(this);\n  }\n\n  render() {\n    if (this.knownChannels === null) {\n      return this.renderChannelQuery();\n    }\n\n    return this.renderHistoryQuery();\n  }\n\n  renderError(error: Error) {\n    return (\n      <div className=\"pushbot-recent pushbot-recent-error\">\n        <h3>Recent Chatter</h3>\n        <form className=\"pushbot-recent-form form-inline\">\n          <select\n            className=\"pushbot-recent-channel form-control\"\n            value=\"...\"\n            disabled\n          >\n            <option value=\"...\">...</option>\n          </select>\n        </form>\n        <div className=\"pushbot-error-message\">{error.message}</div>\n      </div>\n    );\n  }\n\n  renderChannelQuery() {\n    const query = graphql`\n      query RecentChannelQuery {\n        cache {\n          knownChannels\n        }\n      }\n    `;\n\n    return (\n      <QueryRenderer<RecentChannelQuery>\n        environment={this.state.environment}\n        query={query}\n        variables={{}}\n        render={this.renderChannelResult}\n      />\n    );\n  }\n\n  renderChannelResult = ({error, props}: RecentChannelResult) => {\n    if (error) {\n      return this.renderError(error);\n    }\n\n    const channelNames = props ? props.cache.knownChannels : this.knownChannels;\n    return this.renderCurrent(channelNames || [], null);\n  };\n\n  renderHistoryQuery() {\n    const query = graphql`\n      query RecentHistoryQuery($channel: String!) {\n        cache {\n          knownChannels\n          linesForChannel(channel: $channel) {\n            id\n            speaker {\n              id\n              name\n              avatar {\n                image32\n              }\n            }\n            timestamp\n            text\n          }\n        }\n      }\n    `;\n\n    const variables = {\n      channel: this.state.currentChannel || \"\",\n    };\n\n    return (\n      <QueryRenderer<RecentHistoryQuery>\n        environment={this.state.environment}\n        query={query}\n        variables={variables}\n        render={this.renderHistoryResult}\n      />\n    );\n  }\n\n  renderHistoryResult = ({error, props}: RecentHistoryResult) => {\n    if (error) {\n      return this.renderError(error);\n    }\n\n    const channelNames = props ? props.cache.knownChannels : this.knownChannels;\n    const history = props ? props.cache.linesForChannel : this.history;\n\n    return this.renderCurrent(channelNames, history);\n  };\n\n  renderCurrent(\n    channelNames: ReadonlyArray<string> | null,\n    history: ReadonlyArray<ILine> | null\n  ) {\n    if (channelNames) {\n      if (!this.state.currentChannel && channelNames.length > 0) {\n        setTimeout(() => this.setState({currentChannel: channelNames[0]}), 0);\n      }\n      this.knownChannels = channelNames;\n    }\n\n    if (history) {\n      this.history = history;\n    }\n\n    const displayChannelNames = channelNames || [\"...\"];\n    const displayChannel = this.state.currentChannel || \"...\";\n\n    return (\n      <div className=\"pushbot-recent\">\n        <h3>Recent Chatter</h3>\n        <form className=\"pushbot-recent-form form-inline\">\n          <label className=\"mr-md-3\" htmlFor=\"pushbot-recent-channel\">\n            Channel\n          </label>\n          <div className=\"input-group\">\n            <select\n              className=\"pushbot-recent-channel form-control input-group-prepend\"\n              id=\"pushbot-recent-channel\"\n              value={displayChannel}\n              disabled={!channelNames}\n              onChange={this.didChangeChannel}\n            >\n              {displayChannelNames.map(name => {\n                return (\n                  <option key={name} value={name}>\n                    {name}\n                  </option>\n                );\n              })}\n            </select>\n            <button\n              className=\"btn btn-secondary pushbot-recent-refresh\"\n              onClick={this.refresh}\n            >\n              <i className=\"fas fa-sync\" aria-hidden /> Refresh\n            </button>\n          </div>\n        </form>\n        <History lines={history} selection={this.state.selection} />\n        <ActionBar\n          environment={this.state.environment}\n          channel={this.state.currentChannel || \"\"}\n          selection={this.state.selection}\n        />\n      </div>\n    );\n  }\n\n  didChangeChannel = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    this.history = null;\n    this.state.selection.clear();\n    this.setState({currentChannel: event.target.value});\n  };\n\n  refresh = (event: React.MouseEvent<HTMLButtonElement>) => {\n    event.preventDefault();\n    this.setState({environment: getEnvironment()});\n  };\n}\n","import React from \"react\";\nimport {Route} from \"react-router-dom\";\n\nimport {SideNav} from \"./SideNav\";\nimport {Dashboard} from \"./dashboard/Dashboard\";\nimport {People} from \"./people/People\";\nimport {Profile} from \"./profile/Profile\";\nimport {Quotes} from \"./quotes/Quotes\";\nimport {Events} from \"./events/Events\";\nimport {Recent} from \"./recent/Recent\";\nimport {UserContext, IUser} from \"./common/Role\";\n\ninterface AuthenticatedProps {\n  user: IUser;\n}\n\nexport const Authenticated = (props: AuthenticatedProps) => (\n  <UserContext.Provider value={props.user}>\n    <div className=\"row mt-md-5\">\n      <div className=\"col-md-2\">\n        <SideNav />\n      </div>\n      <div className=\"col-md-8\">\n        <Route path=\"/\" component={Dashboard} exact />\n        <Route path=\"/people\" component={People} exact />\n        <Route path=\"/people/:name\" component={Profile} />\n        <Route path=\"/quotes\" component={Quotes} />\n        <Route path=\"/events\" component={Events} />\n        <Route path=\"/recent\" component={Recent} />\n      </div>\n    </div>\n  </UserContext.Provider>\n);\n","import React from \"react\";\nimport {Link} from \"react-router-dom\";\n\nimport \"./Banner.css\";\n\nconst LOGOUT_URL = `${process.env.REACT_APP_API_BASE_URL}/logout?backTo=true`;\n\ninterface BannerProps {\n  username: string;\n  title: string;\n  avatar: string;\n}\n\nexport const Banner = (props: BannerProps) => {\n  let accountControl = null;\n\n  if (props.username) {\n    let accountElements = [];\n    if (props.title) {\n      accountElements.push(\n        <span key=\"0\" className=\"navbar-text pushbot-navbar-title\">\n          {props.title}\n\n          <i\n            key=\"1\"\n            className=\"far fa-circle pushbot-navbar-separator\"\n            aria-hidden=\"true\"\n          />\n        </span>\n      );\n    }\n    accountElements.push(\n      <Link\n        to={`/people/${props.username}`}\n        key=\"2\"\n        className=\"navbar-text pushbot-navbar-username font-weight-bolder\"\n      >\n        @{props.username}\n      </Link>\n    );\n\n    accountControl = (\n      <>\n        {accountElements}\n        <img className=\"navbar-item pushbot-navbar-avatar\" src={props.avatar} alt=\"\" />\n        <a href={LOGOUT_URL} className=\"navbar-item pushbot-navbar-logout\">\n          <i className=\"fas fa-sign-out-alt\" aria-hidden=\"true\" />\n          Log out\n        </a>\n      </>\n    );\n  }\n\n  return (\n    <div className=\"container-fluid mx-0 px-0\">\n      <nav className=\"navbar navbar-expand-lg navbar-light bg-light mx-0\">\n        <button\n          type=\"button\"\n          className=\"navbar-toggler collapsed\"\n          data-toggle=\"collapse\"\n          data-target=\"#bs-example-navbar-collapse-1\"\n          aria-expanded=\"false\"\n        >\n          <span className=\"navbar-toggler-icon\">Toggle navigation</span>\n        </button>\n        <div className=\"navbar-brand flex-grow-1\">pushbot party</div>\n\n        <div\n          className=\"collapse navbar-collapse flex-grow-0\"\n          id=\"bs-example-navbar-collapse-1\"\n        >\n          {accountControl}\n        </div>\n      </nav>\n    </div>\n  );\n};\n","import React, {Component} from \"react\";\n\nimport \"./Login.css\";\n\ninterface LoginProps {\n  authUrl: string;\n}\n\nexport class Login extends Component<LoginProps> {\n  componentDidMount() {\n    document.children[0].classList.add(\"pushbot-login-bg\");\n  }\n\n  render() {\n    return (\n      <div className=\"jumbotron pushbot-login\">\n        <h1>Are there stairs in your house?</h1>\n        <p>\n          <a href={this.props.authUrl} className=\"pushbot-signin-slack\">\n            <img\n              alt=\"Sign in with Slack\"\n              height=\"40\"\n              width=\"172\"\n              src=\"https://platform.slack-edge.com/img/sign_in_with_slack.png\"\n              srcSet=\"https://platform.slack-edge.com/img/sign_in_with_slack.png 1x, https://platform.slack-edge.com/img/sign_in_with_slack@2x.png 2x\"\n            />\n          </a>\n          so that I may protect you from the\n          <a href=\"https://www.youtube.com/watch?v=7E0ot9iJm_k\">\n            terrible secret of space\n          </a>\n        </p>\n        <p className=\"text-muted\">\n          <em>\n            <small>\n              (Make sure that you choose <strong>#~s</strong> as your Slack\n              team)\n            </small>\n          </em>\n        </p>\n      </div>\n    );\n  }\n\n  componentWillUnmount() {\n    document.children[0].classList.remove(\"pushbot-login-bg\");\n  }\n}\n","import React, {Component} from \"react\";\nimport {QueryRenderer, Environment} from \"react-relay\";\nimport {graphql} from \"babel-plugin-relay/macro\";\nimport {BrowserRouter as Router} from \"react-router-dom\";\n\nimport {\n  getEnvironment,\n  AUTH_URL,\n  QueryResult,\n  isNetworkError,\n} from \"./common/Transport\";\nimport {Authenticated} from \"./Authenticated\";\nimport {Banner} from \"./Banner\";\nimport {Login} from \"./Login\";\n\nimport {AppQuery} from \"./__generated__/AppQuery.graphql\";\n\nimport \"./App.css\";\n\nexport class App extends Component {\n  private environment: Environment;\n\n  constructor(props: {}) {\n    super(props);\n    this.environment = getEnvironment();\n  }\n\n  render() {\n    const query = graphql`\n      query AppQuery {\n        users {\n          me {\n            id\n            name\n            avatar {\n              image48\n            }\n            roles {\n              name\n            }\n          }\n        }\n\n        title: documents(set: \"title\") {\n          mine {\n            text\n            found\n          }\n        }\n      }\n    `;\n\n    return (\n      <QueryRenderer<AppQuery>\n        environment={this.environment}\n        query={query}\n        variables={{}}\n        render={this.renderResult}\n      />\n    );\n  }\n\n  renderResult = (result: QueryResult<AppQuery>) => {\n    let body = null;\n    let username = \"\";\n    let title = \"\";\n    let avatar = \"\";\n\n    if (isNetworkError(result.error)) {\n      if (result.error.status === 401) {\n        const backTo = encodeURIComponent(document.location!.pathname);\n        body = <Login authUrl={`${AUTH_URL}?backTo=${backTo}`} />;\n      } else {\n        body = <div>{result.error.message}</div>;\n      }\n    } else if (result.props) {\n      const user = result.props.users.me;\n      username = user.name;\n      if (result.props.title) {\n        title = result.props.title.mine.text;\n      }\n      if (user.avatar && user.avatar.image48) {\n        avatar = user.avatar.image48;\n      }\n\n      body = <Authenticated user={user} />;\n    } else {\n      body = (\n        <div className=\"row mt-md-5 pushbot-loading\">\n          <p className=\"mx-auto\">\n            <i className=\"fas fa-circle-notch fa-spin\" aria-hidden=\"true\" />\n            loading\n          </p>\n        </div>\n      );\n    }\n\n    return (\n      <Router>\n        <div className=\"container-fluid\">\n          <div className=\"row\">\n            <Banner username={username} title={title} avatar={avatar} />\n          </div>\n          {body}\n        </div>\n      </Router>\n    );\n  };\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as {env: {[key: string]: string}}).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import \"bootswatch/dist/spacelab/bootstrap.min.css\";\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\n\nimport \"jquery\";\nimport \"popper.js\";\nimport \"bootstrap\";\nimport \"@fortawesome/fontawesome-free\";\nimport \"./index.css\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {App} from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","/* tslint:disable */\n\nimport { ConcreteRequest } from \"relay-runtime\";\nexport type RecentChannelQueryVariables = {};\nexport type RecentChannelQueryResponse = {\n    readonly cache: {\n        readonly knownChannels: ReadonlyArray<string>;\n    };\n};\nexport type RecentChannelQuery = {\n    readonly response: RecentChannelQueryResponse;\n    readonly variables: RecentChannelQueryVariables;\n};\n\n\n\n/*\nquery RecentChannelQuery {\n  cache {\n    knownChannels\n  }\n}\n*/\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"kind\": \"LinkedField\",\n    \"alias\": null,\n    \"name\": \"cache\",\n    \"storageKey\": null,\n    \"args\": null,\n    \"concreteType\": \"Cache\",\n    \"plural\": false,\n    \"selections\": [\n      {\n        \"kind\": \"ScalarField\",\n        \"alias\": null,\n        \"name\": \"knownChannels\",\n        \"args\": null,\n        \"storageKey\": null\n      }\n    ]\n  }\n];\nreturn {\n  \"kind\": \"Request\",\n  \"fragment\": {\n    \"kind\": \"Fragment\",\n    \"name\": \"RecentChannelQuery\",\n    \"type\": \"Query\",\n    \"metadata\": null,\n    \"argumentDefinitions\": [],\n    \"selections\": (v0/*: any*/)\n  },\n  \"operation\": {\n    \"kind\": \"Operation\",\n    \"name\": \"RecentChannelQuery\",\n    \"argumentDefinitions\": [],\n    \"selections\": (v0/*: any*/)\n  },\n  \"params\": {\n    \"operationKind\": \"query\",\n    \"name\": \"RecentChannelQuery\",\n    \"id\": null,\n    \"text\": \"query RecentChannelQuery {\\n  cache {\\n    knownChannels\\n  }\\n}\\n\",\n    \"metadata\": {}\n  }\n};\n})();\n(node as any).hash = 'b33c5ca20b56c7400e6a375a0e5965ed';\nexport default node;\n","/* tslint:disable */\n\nimport { ConcreteRequest } from \"relay-runtime\";\nexport type RecentHistoryQueryVariables = {\n    readonly channel: string;\n};\nexport type RecentHistoryQueryResponse = {\n    readonly cache: {\n        readonly knownChannels: ReadonlyArray<string>;\n        readonly linesForChannel: ReadonlyArray<{\n            readonly id: string | null;\n            readonly speaker: {\n                readonly id: string;\n                readonly name: string;\n                readonly avatar: {\n                    readonly image32: string | null;\n                };\n            } | null;\n            readonly timestamp: string;\n            readonly text: string;\n        }> | null;\n    };\n};\nexport type RecentHistoryQuery = {\n    readonly response: RecentHistoryQueryResponse;\n    readonly variables: RecentHistoryQueryVariables;\n};\n\n\n\n/*\nquery RecentHistoryQuery(\n  $channel: String!\n) {\n  cache {\n    knownChannels\n    linesForChannel(channel: $channel) {\n      id\n      speaker {\n        id\n        name\n        avatar {\n          image32\n        }\n      }\n      timestamp\n      text\n    }\n  }\n}\n*/\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"kind\": \"LocalArgument\",\n    \"name\": \"channel\",\n    \"type\": \"String!\",\n    \"defaultValue\": null\n  }\n],\nv1 = {\n  \"kind\": \"ScalarField\",\n  \"alias\": null,\n  \"name\": \"id\",\n  \"args\": null,\n  \"storageKey\": null\n},\nv2 = [\n  {\n    \"kind\": \"LinkedField\",\n    \"alias\": null,\n    \"name\": \"cache\",\n    \"storageKey\": null,\n    \"args\": null,\n    \"concreteType\": \"Cache\",\n    \"plural\": false,\n    \"selections\": [\n      {\n        \"kind\": \"ScalarField\",\n        \"alias\": null,\n        \"name\": \"knownChannels\",\n        \"args\": null,\n        \"storageKey\": null\n      },\n      {\n        \"kind\": \"LinkedField\",\n        \"alias\": null,\n        \"name\": \"linesForChannel\",\n        \"storageKey\": null,\n        \"args\": [\n          {\n            \"kind\": \"Variable\",\n            \"name\": \"channel\",\n            \"variableName\": \"channel\"\n          }\n        ],\n        \"concreteType\": \"Line\",\n        \"plural\": true,\n        \"selections\": [\n          (v1/*: any*/),\n          {\n            \"kind\": \"LinkedField\",\n            \"alias\": null,\n            \"name\": \"speaker\",\n            \"storageKey\": null,\n            \"args\": null,\n            \"concreteType\": \"User\",\n            \"plural\": false,\n            \"selections\": [\n              (v1/*: any*/),\n              {\n                \"kind\": \"ScalarField\",\n                \"alias\": null,\n                \"name\": \"name\",\n                \"args\": null,\n                \"storageKey\": null\n              },\n              {\n                \"kind\": \"LinkedField\",\n                \"alias\": null,\n                \"name\": \"avatar\",\n                \"storageKey\": null,\n                \"args\": null,\n                \"concreteType\": \"Avatar\",\n                \"plural\": false,\n                \"selections\": [\n                  {\n                    \"kind\": \"ScalarField\",\n                    \"alias\": null,\n                    \"name\": \"image32\",\n                    \"args\": null,\n                    \"storageKey\": null\n                  }\n                ]\n              }\n            ]\n          },\n          {\n            \"kind\": \"ScalarField\",\n            \"alias\": null,\n            \"name\": \"timestamp\",\n            \"args\": null,\n            \"storageKey\": null\n          },\n          {\n            \"kind\": \"ScalarField\",\n            \"alias\": null,\n            \"name\": \"text\",\n            \"args\": null,\n            \"storageKey\": null\n          }\n        ]\n      }\n    ]\n  }\n];\nreturn {\n  \"kind\": \"Request\",\n  \"fragment\": {\n    \"kind\": \"Fragment\",\n    \"name\": \"RecentHistoryQuery\",\n    \"type\": \"Query\",\n    \"metadata\": null,\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"selections\": (v2/*: any*/)\n  },\n  \"operation\": {\n    \"kind\": \"Operation\",\n    \"name\": \"RecentHistoryQuery\",\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"selections\": (v2/*: any*/)\n  },\n  \"params\": {\n    \"operationKind\": \"query\",\n    \"name\": \"RecentHistoryQuery\",\n    \"id\": null,\n    \"text\": \"query RecentHistoryQuery(\\n  $channel: String!\\n) {\\n  cache {\\n    knownChannels\\n    linesForChannel(channel: $channel) {\\n      id\\n      speaker {\\n        id\\n        name\\n        avatar {\\n          image32\\n        }\\n      }\\n      timestamp\\n      text\\n    }\\n  }\\n}\\n\",\n    \"metadata\": {}\n  }\n};\n})();\n(node as any).hash = '4638d70a91379c9d2ce46aefaca2f3d9';\nexport default node;\n"],"sourceRoot":""}